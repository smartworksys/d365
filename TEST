function onAffiliateAccountNumberChange(executionContext) {
    var formContext = executionContext.getFormContext();
    var affiliateAccountNumber = formContext
      .getAttribute(CONSTANTS.ATTRIBUTE_NAMES.AFFILIATE_ACCOUNT_NUMBER)
      .getValue();
    var certAccountNumber = formContext
      .getAttribute(CONSTANTS.ATTRIBUTE_NAMES.CERTIFICATE_ACCOUNT_NUMBER)
      .getValue();
    var accNumber = formContext
      .getAttribute("nf1pbm_accessnumberint")
      .getValue();
    var accountType = formContext
      .getAttribute(CONSTANTS.ATTRIBUTE_NAMES.ACCOUNT_TYPE)
      .getValue();

    // IIFE so we can use await inside
    (async function() {
      try {
        const instructions = await getMaturityInstructions(
          executionContext,
          accNumber,
          accountType,
          certAccountNumber,
          affiliateAccountNumber
        );
        console.log("Maturity Instructions:", instructions);

        if (affiliateAccountNumber && affiliateAccountNumber !== "--Select--") {
          apiaccountsData.forEach(function(item) {
            if (affiliateAccountNumber === item.accountNumber) {
              var affiliateBalance = parseFloat(item.availableBalance);
              formContext
                .getAttribute(CONSTANTS.ATTRIBUTE_NAMES.AFFILIATE_BALANCE_AMOUNT)
                .setValue(affiliateBalance);
              CONSTANTS.ACCOUNT_DETAILS.AFFILIATE_ACCOUNT_TYPE = item.accountType;
              // fix typo in helper name
              if (item.subType === "IR" || item.subType === "EDN") {
                setAffiliateAccountTypeOptionSetValue(
                  formContext,
                  item.iraPlanSequenceNumber
                );
              } else {
                setAffiliateAccountTypeOptionSetValue(
                  formContext,
                  item.subType
                );
              }
            }
          });
        } else {
          formContext
            .getAttribute(CONSTANTS.ATTRIBUTE_NAMES.AFFILIATE_BALANCE_AMOUNT)
            .setValue(null);
        }

        // then call the dependents
        amountChange(executionContext);
        initializeRAOptions(executionContext);
        initializeMaturityOptions(executionContext);
        enableDisableAmount(executionContext);

      } catch (err) {
        console.error("Error fetching maturity instructions:", err);
      }
    })();  // <-- invoke it
}
