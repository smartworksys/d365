function validateStateWithholding(formContext) {
    // Load constants from state config
    const reqdPlCls = CONSTANTS.IRA_STATE_CODES.mandPlanCls;
    const reqdPrmDist = CONSTANTS.IRA_STATE_CODES.mandPremDist;
    const regType = CONSTANTS.IRA_STATE_CODES.stateRegType;
    const followFed = CONSTANTS.IRA_STATE_CODES.followFedWld;
    const formReq = CONSTANTS.IRA_STATE_CODES.formReqWaive;
    const MIN_RATE = CONSTANTS.IRA_STATE_CODES.minRate;
    const stateWhPermitted = CONSTANTS.IRA_STATE_CODES.stateWithholdingPermitted; // assumed boolean

    // Get form values
    const amountTo = formContext.getAttribute(CONSTANTS.ATTRIBUTE_NAMES.MATURITY_OPTIONS)?.getValue();
    const fedWh = formContext.getAttribute(CONSTANTS.ATTRIBUTE_NAMES.IRS_FEDERAL_TAX_PERCENTAGE)?.getValue() || 0;
    const stateWh = formContext.getAttribute(CONSTANTS.ATTRIBUTE_NAMES.IRS_STATE_TAX_PERCENTAGE)?.getValue() || 0;
    const memberAge = formContext.getAttribute("Member_Age")?.getValue();
    const exemptionReceived = formContext.getAttribute("Exemption_Received")?.getValue();

    // Define error messages
    const ERROR_MESSAGES = {
        MSG_1: "State withholding must meet the minimum rate when following voluntary federal election.",
        MSG_2: "Both federal and state withholding must meet the minimum rate when following required federal election.",
        MSG_3: "Exemption form is required before proceeding.",
        MSG_4: "State withholding must meet the minimum rate for required plan closures.",
        MSG_5: "State withholding must meet the minimum rate for required premium distributions.",
        MSG_6: "Exemption form is required when state withholding is 0%."
    };

    // Helper functions
    function showDialog(message) {
        Xrm.Navigation.openAlertDialog({ text: message });
        return false;
    }

    function showExemptionRadio() {
        // Implement UI display for exemption form prompt
    }

    function hideStateWHTextBox() {
        formContext.getControl(CONSTANTS.ATTRIBUTE_NAMES.IRS_STATE_TAX_PERCENTAGE).setVisible(false);
    }

    function save() {
        return true;
    }

    // ----------------------- MAIN LOGIC ------------------------

    // Step 1: REG_TYPE first
    if (regType === 'M' || regType === 'V') {
        hideStateWHTextBox();
        return true;
    }

    if (regType === 'S') {
        if (amountTo === 'Close') {
            if (stateWh >= MIN_RATE) return save();
            if (stateWh === 0) {
                showExemptionRadio();
                if (exemptionReceived) return save();
                return showDialog(ERROR_MESSAGES.MSG_6);
            }
        }
    }

    // Step 2: REQD_PL_CLS == 'X'
    if (reqdPlCls === 'X') {
        if (amountTo === 'Close') {
            if (reqdPrmDist === 'X') {
                if (memberAge < 59.5) {
                    if (followFed === 'V') {
                        if (stateWh >= MIN_RATE) return save();
                        return showDialog(ERROR_MESSAGES.MSG_1);
                    } else if (followFed === 'R') {
                        if (fedWh > 0) {
                            if (stateWh >= MIN_RATE) return save();
                            return showDialog(ERROR_MESSAGES.MSG_2);
                        } else {
                            return showDialog(ERROR_MESSAGES.MSG_1);
                        }
                    }
                } else {
                    return showDialog(ERROR_MESSAGES.MSG_1);
                }
            }
        }
    }

    // Step 3: REQD_PL_CLS == 'R'
    if (reqdPlCls === 'R') {
        if (amountTo === 'Close') {
            if (stateWh >= MIN_RATE) return save();
            return showDialog(ERROR_MESSAGES.MSG_4);
        }

        if (reqdPrmDist === 'R') {
            if (memberAge < 59.5) {
                if (stateWh >= MIN_RATE) return save();
                return showDialog(ERROR_MESSAGES.MSG_5);
            }
        }

        if (followFed === 'Y') {
            if (fedWh > 0) {
                if (stateWh >= MIN_RATE) return save();
                if (stateWh === 0) {
                    showExemptionRadio();
                    if (exemptionReceived) return save();
                    return showDialog(ERROR_MESSAGES.MSG_6);
                }
            }
        }
    }

    // Step 4: REQD_PL_CLS == 'Y'
    if (reqdPlCls === 'Y') {
        if (reqdPrmDist === 'Y' && memberAge < 59.5) {
            if (stateWh >= MIN_RATE) return save();
            if (stateWh === 0) {
                showExemptionRadio();
                if (exemptionReceived) return save();
                return showDialog(ERROR_MESSAGES.MSG_6);
            }
        }
    }

    // Step 5: FORM_REQ == 'N'
    if (formReq === 'N') {
        save();
        showExemptionRadio();
        if (!exemptionReceived) {
            return showDialog(ERROR_MESSAGES.MSG_3);
        }
    }

    // Step 6: Withholding not permitted at all
    if (!stateWhPermitted) {
        hideStateWHTextBox();
    }

    return true;
}
