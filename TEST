function validateStateWithholding(formContext) {
    // -------------------- Constants & Form Values --------------------
    const {
        mandPlanCls: reqdPlCls,
        mandPremDist: reqdPrmDist,
        stateRegType: regType,
        followFedWld: followFed,
        formReqWaive: formReq,
        minRate: MIN_RATE
    } = CONSTANTS.IRA_STATE_CODES;

    const amountTo = formContext.getAttribute(CONSTANTS.ATTRIBUTE_NAMES.MATURITY_OPTIONS)?.getValue();
    const fedWh = formContext.getAttribute(CONSTANTS.ATTRIBUTE_NAMES.IRS_FEDERAL_TAX_PERCENTAGE)?.getValue() || 0;
    const stateWh = formContext.getAttribute(CONSTANTS.ATTRIBUTE_NAMES.IRS_STATE_TAX_PERCENTAGE)?.getValue() || 0;
    const memberAge = formContext.getAttribute("Member_Age")?.getValue();
    const exemptionReceived = formContext.getAttribute("Exemption_Received")?.getValue();

    const ERROR_MESSAGES = {
        MSG_1: "State withholding must meet the minimum rate when following voluntary federal election.",
        MSG_2: "Both federal and state withholding must meet the minimum rate when following required federal election.",
        MSG_3: "Exemption form is required before proceeding.",
        MSG_4: "State withholding must meet the minimum rate for required plan closures.",
        MSG_5: "State withholding must meet the minimum rate for required premium distributions.",
        MSG_6: "Exemption form is required when state withholding is 0%."
    };

    // -------------------- Helper Functions --------------------
    function showDialog(message) {
        Xrm.Navigation.openAlertDialog({ text: message });
        return false;
    }

    function showExemptionRadio() {
        const control = formContext.getControl("Exemption_Received");
        if (control) control.setVisible(true);
    }

    function hideStateWHTextBox() {
        const control = formContext.getControl(CONSTANTS.ATTRIBUTE_NAMES.IRS_STATE_TAX_PERCENTAGE);
        if (control) control.setVisible(false);
    }

    function handleExemptionFlow() {
        if (stateWh === 0) {
            showExemptionRadio();
            return exemptionReceived ? true : showDialog(ERROR_MESSAGES.MSG_6);
        }
        return null; // Not an exemption case
    }

    function checkMinRateOrExemption(errorMsg) {
        const exemptionResult = handleExemptionFlow();
        if (exemptionResult !== null) return exemptionResult;
        return stateWh >= MIN_RATE ? true : showDialog(errorMsg);
    }

    function checkMinRateOrHide(errorMsg) {
        return stateWh >= MIN_RATE ? true : (hideStateWHTextBox(), showDialog(errorMsg));
    }

    // -------------------- REG TYPE: S --------------------
    if (regType === 'S') {
        if (followFed === 'R' && fedWh > 0) {
            return checkMinRateOrHide(ERROR_MESSAGES.MSG_2);
        }

        if (reqdPlCls === 'R' && amountTo === 'Close') {
            return checkMinRateOrHide(ERROR_MESSAGES.MSG_4);
        }

        if (reqdPrmDist === 'R' && memberAge < 59.5) {
            return checkMinRateOrHide(ERROR_MESSAGES.MSG_5);
        }

        if (followFed === 'Y' && fedWh > 0) {
            return checkMinRateOrExemption(ERROR_MESSAGES.MSG_6);
        }

        if (reqdPlCls === 'Y' && amountTo === 'Close') {
            return checkMinRateOrExemption(ERROR_MESSAGES.MSG_6);
        }

        if (reqdPrmDist === 'Y' && memberAge < 59.5) {
            return checkMinRateOrExemption(ERROR_MESSAGES.MSG_6);
        }

        if (formReq === 'N') {
            showExemptionRadio();
            return exemptionReceived ? true : showDialog(ERROR_MESSAGES.MSG_3);
        }

        hideStateWHTextBox();
        return false;
    }

    // -------------------- REG TYPE: M or V --------------------
    if (regType === 'M' || regType === 'V') {
        if (reqdPlCls === 'X' && amountTo === 'Close') {
            hideStateWHTextBox();
            return false;
        }

        if (reqdPrmDist === 'X' && memberAge < 59.5) {
            hideStateWHTextBox();
            return false;
        }

        if (followFed === 'V') {
            return checkMinRateOrHide(ERROR_MESSAGES.MSG_1);
        }

        if (followFed === 'R' && fedWh > 0) {
            return checkMinRateOrHide(ERROR_MESSAGES.MSG_2);
        }

        if (reqdPlCls === 'R' && amountTo === 'Close') {
            return checkMinRateOrHide(ERROR_MESSAGES.MSG_4);
        }

        if (reqdPrmDist === 'R' && memberAge < 59.5) {
            return checkMinRateOrHide(ERROR_MESSAGES.MSG_5);
        }

        if (followFed === 'Y' && fedWh > 0) {
            return checkMinRateOrExemption(ERROR_MESSAGES.MSG_6);
        }

        if (reqdPlCls === 'Y' && reqdPrmDist === 'Y' && memberAge < 59.5) {
            return checkMinRateOrExemption(ERROR_MESSAGES.MSG_6);
        }

        if (formReq === 'N') {
            showExemptionRadio();
            return exemptionReceived ? true : showDialog(ERROR_MESSAGES.MSG_3);
        }

        hideStateWHTextBox();
        return false;
    }

    // -------------------- REG TYPE not S/M/V --------------------
    hideStateWHTextBox();
    return false;
}

