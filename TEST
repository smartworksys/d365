<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta http-equiv="x-ua-compatible" content="ie=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>IRA STATE TAX WITHHOLDING - STATE RATE TABLE</title>
<style>
  :root {
    --bg: #fff;
    --fg: #1f2937;
    --muted: #6b7280;
    --line: #e5e7eb;
  }
  body {
    margin: 0;
    font: 13px/1.45 system-ui, "Segoe UI", Roboto, "Helvetica Neue", Arial;
    color: var(--fg);
    background: var(--bg);
  }
  header {
    position: sticky;
    top: 0;
    background: var(--bg);
    border-bottom: 1px solid var(--line);
    z-index: 10;
  }
  .wrap {
    max-width: 1400px;
    margin: 0 auto;
    padding: 12px 16px;
  }
  h1 {
    margin: 0 0 8px;
    font-size: 16px;
    font-weight: 700;
  }
  .controls {
    display: grid;
    grid-template-columns: 1fr repeat(3, minmax(140px, 180px));
    gap: 8px;
    align-items: center;
  }
  .controls input, .controls select {
    border: 1px solid var(--line);
    border-radius: 6px;
    padding: 8px 10px;
    font-size: 13px;
    background: #fff;
  }
  table { width: 100%; border-collapse: collapse; }
  th, td { padding: 6px 8px; border-bottom: 1px solid var(--line); }
  th {
    background: #f9fafb;
    font-weight: 600;
    text-align: left;
    white-space: nowrap;
    cursor: pointer;
  }
  tr:hover { background: #f3f4f6; }
  .center { text-align: center; }
  .right { text-align: right; font-variant-numeric: tabular-nums; }
  .muted { color: var(--muted); font-size: 12px; }
</style>
</head>

<body>
<header>
  <div class="wrap">
    <h1>IRA STATE TAX WITHHOLDING SUBSYSTEM — STATE RATE TABLE</h1>
    <div class="controls">
      <input id="search" type="search" placeholder="Search state, code, or form..." />
      <select id="filterState"><option value="">State: All</option></select>
      <select id="filterRegType"><option value="">Reg Type: All</option></select>
      <select id="filterFollowFed">
        <option value="">Follow Fed: All</option>
        <option value="R">R</option>
        <option value="Y">Y</option>
        <option value="V">V</option>
      </select>
    </div>
    <div id="status" class="muted" style="margin-top:6px;">Loading data...</div>
  </div>
</header>

<div class="wrap">
  <div style="overflow:auto; border:1px solid var(--line); border-radius:8px;">
    <table id="grid">
      <thead>
        <tr>
          <th data-key="stateCode">STATE CODE-NAME</th>
          <th data-key="recType">REC TYP</th>
          <th data-key="effectiveDate">EFFECT DATE</th>
          <th data-key="stateRegType">REG TYP</th>
          <th data-key="minRate" class="right">MIN RATE</th>
          <th data-key="minAmt" class="right">MIN AMOUNT</th>
          <th data-key="dollarAmtReq" class="center">AMT REQD</th>
          <th data-key="wholeDollarAmt" class="center">WHOLE $ AMT</th>
          <th data-key="followFedWld" class="center">FOLLOW FED</th>
          <th data-key="appFedRate" class="center">RT APPL TO FED</th>
          <th data-key="mandPlanCls" class="center">REQD PL CLS</th>
          <th data-key="mandPremDist" class="center">REQD PRM DST</th>
          <th data-key="formReqWaive" class="center">FORM REQD</th>
          <th data-key="lastMaintDate" class="center">LAST MAINT DATE</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>
</div>

<script>
const ENV_VAR_NAME = "new_FlowURL_StateRateTable";

let STATE_RATE_TABLE = [];
let sortKey = "stateCode", sortDir = "asc";
const tbody = document.querySelector("#grid tbody");
const statusEl = document.getElementById("status");

/* Get Dynamics context safely */
function getXrmContext() {
  try {
    if (window.parent?.Xrm) return window.parent.Xrm;
    if (window.top?.Xrm) return window.top.Xrm;
  } catch {}
  return null;
}

/* Get environment variable (Flow URL) */
async function getEnvironmentVariable(schemaName) {
  const Xrm = getXrmContext();
  if (Xrm?.WebApi) {
    try {
      const result = await Xrm.WebApi.retrieveMultipleRecords(
        "environmentvariabledefinition",
        `?$select=defaultvalue&$expand=environmentvariablevalues($select=value)&$filter=schemaname eq '${schemaName}'`
      );
      if (!result.entities?.length) throw new Error("Variable not found");
      const entity = result.entities[0];
      const valEntity = entity.environmentvariablevalues?.[0];
      return valEntity?.value || entity.defaultvalue;
    } catch (err) {
      console.error("Error reading environment variable:", err);
    }
  }
  console.warn("⚠️ Not inside Dynamics — using fallback flow URL for testing.");
  return "https://your-fallback-flow-url.com";
}

/* Normalize Power Automate data */
function normalizeRecord(r) {
  return {
    stateCode: r.stateCode || r.StateCode || "",
    recType: r.recType || r.RecType || "",
    effectiveDate: r.effectiveDate || r.EffectDate || "",
    stateRegType: r.stateRegType || r.RegType || "",
    minRate: r.minRate || r.MinRate || "",
    minAmt: r.minAmt || r.MinAmt || "",
    dollarAmtReq: r.dollarAmtReq || r.AmtReqd || "",
    wholeDollarAmt: r.wholeDollarAmt || r.WholeDollarAmt || "",
    followFedWld: r.followFedWld || r.FollowFed || "",
    appFedRate: r.appFedRate || r.RtApplToFed || "",
    mandPlanCls: r.mandPlanCls || r.ReqdPlCls || "",
    mandPremDist: r.mandPremDist || r.ReqdPrmDst || "",
    formReqWaive: r.formReqWaive || r.FormReqd || "",
    lastMaintDate: r.lastMaintDate || r.LastMaintDate || "",
  };
}

/* Load data from Power Automate */
async function loadStateRateTable() {
  try {
    const flowUrl = await getEnvironmentVariable(ENV_VAR_NAME);
    if (!flowUrl) throw new Error("Flow URL not configured.");

    statusEl.textContent = "⏳ Loading from Power Automate...";
    const resp = await fetch(flowUrl, { headers: { "Accept": "application/json" } });
    if (!resp.ok) throw new Error(`HTTP ${resp.status}`);

    const data = await resp.json();
    STATE_RATE_TABLE = Array.isArray(data) ? data.map(normalizeRecord) : [];
    statusEl.textContent = `✅ Loaded ${STATE_RATE_TABLE.length} records`;

    populateFilters();
    applyFilters();
  } catch (err) {
    console.error("Error loading data:", err);
    statusEl.textContent = "❌ Failed to load data.";
  }
}

/* Populate filters */
const searchInput = document.getElementById("search");
const regSel = document.getElementById("filterRegType");
const fedSel = document.getElementById("filterFollowFed");
const stateSel = document.getElementById("filterState");

function populateFilters() {
  const states = [...new Set(STATE_RATE_TABLE.map(r => r.stateCode))].filter(Boolean).sort();
  const regTypes = [...new Set(STATE_RATE_TABLE.map(r => r.stateRegType))].filter(Boolean).sort();

  states.forEach(code => {
    const opt = document.createElement("option");
    opt.value = code; opt.textContent = code;
    stateSel.appendChild(opt);
  });

  regTypes.forEach(rt => {
    const opt = document.createElement("option");
    opt.value = rt; opt.textContent = rt;
    regSel.appendChild(opt);
  });
}

/* Filter + Sort */
function applyFilters() {
  const term = (searchInput.value || "").toLowerCase();
  const reg = regSel.value, fed = fedSel.value, st = stateSel.value;

  let filtered = STATE_RATE_TABLE.filter(r => {
    if (st && r.stateCode !== st) return false;
    if (reg && r.stateRegType !== reg) return false;
    if (fed && r.followFedWld !== fed) return false;
    if (!term) return true;
    return Object.values(r).join("|").toLowerCase().includes(term);
  });

  filtered.sort((a, b) => {
    const va = a[sortKey] ?? "", vb = b[sortKey] ?? "";
    return sortDir === "asc" ? va.localeCompare(vb) : vb.localeCompare(va);
  });

  tbody.innerHTML = filtered.map(r => `
    <tr>
      <td>${r.stateCode}</td>
      <td class="center">${r.recType}</td>
      <td class="center">${r.effectiveDate}</td>
      <td class="center">${r.stateRegType}</td>
      <td class="right">${r.minRate}</td>
      <td class="right">${r.minAmt}</td>
      <td class="center">${r.dollarAmtReq}</td>
      <td class="center">${r.wholeDollarAmt}</td>
      <td class="center">${r.followFedWld}</td>
      <td class="center">${r.appFedRate}</td>
      <td class="center">${r.mandPlanCls}</td>
      <td class="center">${r.mandPremDist}</td>
      <td class="center">${r.formReqWaive}</td>
      <td class="center">${r.lastMaintDate}</td>
    </tr>
  `).join("");

  statusEl.textContent = `Showing ${filtered.length} of ${STATE_RATE_TABLE.length}`;
}

document.querySelectorAll("thead th").forEach(th => {
  th.addEventListener("click", () => {
    const key = th.getAttribute("data-key");
    if (!key) return;
    sortDir = sortKey === key && sortDir === "asc" ? "desc" : "asc";
    sortKey = key;
    applyFilters();
  });
});

[searchInput, regSel, fedSel, stateSel].forEach(el => el.addEventListener("input", applyFilters));

/* Init */
document.addEventListener("DOMContentLoaded", loadStateRateTable);
</script>
</body>
</html>
