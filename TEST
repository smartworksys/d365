<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta http-equiv="x-ua-compatible" content="ie=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>State Rate Table</title>
<style>
  :root {
    --bg: #fff; --fg: #1f2937; --muted: #6b7280; --line: #e5e7eb;
    --accent: #2563eb; --accent-bg: #eef2ff;
  }
  body { margin: 0; font: 13px/1.45 system-ui, "Segoe UI", Roboto, "Helvetica Neue", Arial; color: var(--fg); background: var(--bg); }
  header { position: sticky; top: 0; background: var(--bg); border-bottom: 1px solid var(--line); z-index: 10; }
  .wrap { max-width: 1180px; margin: 0 auto; padding: 12px 16px; }
  h1 { margin: 0 0 8px; font-size: 16px; font-weight: 700; }
  .controls { display: grid; grid-template-columns: 1fr repeat(3, minmax(140px, 180px)); gap: 8px; align-items: center; }
  .controls input, .controls select {
    border: 1px solid var(--line); border-radius: 6px; padding: 8px 10px; font-size: 13px; background: #fff;
  }
  table { width: 100%; border-collapse: collapse; }
  th, td { padding: 8px; border-bottom: 1px solid var(--line); }
  th { text-align: left; background: #f9fafb; font-weight: 600; cursor: pointer; white-space: nowrap; }
  tr:hover { background: #f3f4f6; }
  .center { text-align: center; }
  .right { text-align: right; font-variant-numeric: tabular-nums; }
  .chip { background: var(--accent-bg); color: var(--accent); padding: 2px 6px; border-radius: 6px; font-size: 11px; }
  .muted { color: var(--muted); font-size: 12px; }
</style>
</head>

<body>
  <header>
    <div class="wrap">
      <h1>State Rate Table</h1>
      <div class="controls">
        <input id="search" type="search" placeholder="Search by state, code..." />
        <select id="filterRegType">
          <option value="">Reg Type: All</option>
          <option value="S">S</option>
          <option value="M">M</option>
          <option value="V">V</option>
        </select>
        <select id="filterFollowFed">
          <option value="">Follow Fed: All</option>
          <option value="R">R</option>
          <option value="Y">Y</option>
          <option value="V">V</option>
        </select>
        <select id="filterMode">
          <option value="">Mode: All</option>
          <option value="percent">Percent</option>
          <option value="dollar">Dollar</option>
        </select>
      </div>
      <div id="status" class="muted" style="margin-top:6px;">Loading data...</div>
    </div>
  </header>

  <div class="wrap">
    <div style="overflow:auto; border:1px solid var(--line); border-radius:8px;">
      <table id="grid">
        <thead>
          <tr>
            <th data-key="stateName">State</th>
            <th data-key="stateCode">Code</th>
            <th data-key="stateRegType">Reg</th>
            <th data-key="followFedWld">Follow Fed</th>
            <th data-key="dollarAmtReq">Mode</th>
            <th data-key="minValue" class="right">Min Value</th>
            <th data-key="wholeDollarAmt" class="center">Whole $</th>
            <th data-key="formReqWaive" class="center">Exempt?</th>
            <th data-key="appFedRate" class="center">App Fed</th>
            <th data-key="mandPlanCls" class="center">Plan Close</th>
            <th data-key="mandPremDist" class="center">Premature</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </div>

<script>
/* ----------------------------------------------------------------
   CONFIGURATION
---------------------------------------------------------------- */
const POWER_AUTOMATE_URL =
  "https://prod-XX.westus.logic.azure.com:443/workflows/XXXX/triggers/manual/paths/invoke?api-version=2016-10-01&sp=..."; 
// 🔸 Replace above with your real flow URL from Power Automate HTTP trigger

// In your environment, "N" = percent mode, "Y" = dollar mode:
const PERCENT_MODE_WHEN = "N";

/* ----------------------------------------------------------------
   DATA LOADING
---------------------------------------------------------------- */
let STATE_RATE_TABLE = [];
const tbody = document.querySelector("#grid tbody");
const statusEl = document.getElementById("status");
let sortKey = "stateName", sortDir = "asc";

async function loadStateRateTable() {
  try {
    statusEl.textContent = "⏳ Loading from Power Automate...";
    const resp = await fetch(POWER_AUTOMATE_URL, { headers: { "Accept": "application/json" } });
    if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
    const data = await resp.json();
    if (!Array.isArray(data)) throw new Error("Unexpected response format");

    STATE_RATE_TABLE = data;
    statusEl.textContent = `✅ Loaded ${data.length} states`;
    applyFilters();
  } catch (err) {
    console.error("Error loading Power Automate data:", err);
    statusEl.textContent = "❌ Failed to load data from Power Automate flow.";
  }
}

/* ----------------------------------------------------------------
   FILTERS + SORT
---------------------------------------------------------------- */
const searchInput = document.getElementById("search");
const regSel = document.getElementById("filterRegType");
const fedSel = document.getElementById("filterFollowFed");
const modeSel = document.getElementById("filterMode");

function isPercentMode(row) {
  return row.dollarAmtReq === PERCENT_MODE_WHEN;
}
function minValue(row) {
  const n = isPercentMode(row)
    ? Number(String(row.minRate || "").replace(/[%$,\s]/g, "")) || 0
    : Number(String(row.minAmt || "").replace(/[%$,\s]/g, "")) || 0;
  return n;
}
function formatMin(row) {
  const n = minValue(row).toFixed(2);
  return isPercentMode(row) ? `${n}%` : `$${n}`;
}

function applyFilters() {
  const term = (searchInput.value || "").toLowerCase();
  const reg = regSel.value, fed = fedSel.value, mode = modeSel.value;

  let filtered = STATE_RATE_TABLE.filter(r => {
    if (reg && r.stateRegType !== reg) return false;
    if (fed && r.followFedWld !== fed) return false;
    if (mode === "percent" && !isPercentMode(r)) return false;
    if (mode === "dollar" && isPercentMode(r)) return false;

    if (!term) return true;
    const hay = [
      r.stateName, r.stateCode, r.stateRegType, r.followFedWld,
      r.dollarAmtReq, r.formReqWaive, r.appFedRate,
      r.mandPlanCls, r.mandPremDist
    ].join("|").toLowerCase();
    return hay.includes(term);
  });

  filtered.sort((a, b) => {
    const va = sortKey === "minValue" ? minValue(a) : (a[sortKey] ?? "");
    const vb = sortKey === "minValue" ? minValue(b) : (b[sortKey] ?? "");
    if (typeof va === "number" && typeof vb === "number") {
      return sortDir === "asc" ? va - vb : vb - va;
    }
    return sortDir === "asc"
      ? String(va).localeCompare(String(vb))
      : String(vb).localeCompare(String(va));
  });

  tbody.innerHTML = filtered.map(r => `
    <tr>
      <td><strong>${r.stateName || ""}</strong></td>
      <td>${r.stateCode || ""}</td>
      <td class="center">${r.stateRegType || ""}</td>
      <td class="center">${r.followFedWld || ""}</td>
      <td class="center">${isPercentMode(r) ? "Percent" : "Dollar"}</td>
      <td class="right">${formatMin(r)}</td>
      <td class="center">${r.wholeDollarAmt || ""}</td>
      <td class="center">${r.formReqWaive || ""}</td>
      <td class="center">${r.appFedRate || ""}</td>
      <td class="center">${r.mandPlanCls || ""}</td>
      <td class="center">${r.mandPremDist || ""}</td>
    </tr>
  `).join("");

  statusEl.textContent = `Showing ${filtered.length} of ${STATE_RATE_TABLE.length} states`;
}

document.querySelectorAll("thead th").forEach(th => {
  th.addEventListener("click", () => {
    const key = th.getAttribute("data-key");
    if (!key) return;
    sortDir = sortKey === key ? (sortDir === "asc" ? "desc" : "asc") : "asc";
    sortKey = key;
    applyFilters();
  });
});

[searchInput, regSel, fedSel, modeSel].forEach(el => el.addEventListener("input", applyFilters));

document.addEventListener("DOMContentLoaded", loadStateRateTable);
</script>
</body>
</html>
