name: Infra_Deploy_$(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger: none

parameters:
  # Env checkboxes
  - name: deploy_dev
    displayName: 'Deploy to DEV'
    type: boolean
    default: false
  - name: deploy_test
    displayName: 'Deploy to TEST'
    type: boolean
    default: false
  - name: deploy_uat
    displayName: 'Deploy to UAT'
    type: boolean
    default: false
  - name: deploy_prod
    displayName: 'Deploy to PROD'
    type: boolean
    default: false

  # Veracode toggle
  - name: veracode_scan
    displayName: 'Run VeraCode Scan'
    type: boolean
    default: false

  # --- Service connection names (strings). EDIT THESE DEFAULTS ---
  - name: sc_dev
    displayName: 'Service Connection (DEV)'
    type: string
    default: 'AzureRM-DEV'
  - name: sc_test
    displayName: 'Service Connection (TEST)'
    type: string
    default: 'AzureRM-TEST'
  - name: sc_uat
    displayName: 'Service Connection (UAT)'
    type: string
    default: 'AzureRM-UAT'
  - name: sc_prod
    displayName: 'Service Connection (PROD)'
    type: string
    default: 'AzureRM-PROD'

variables:
  - name: vmImageName
    value: 'windows-latest'

stages:
  # ===================== BUILD =====================
  - stage: build_artifacts
    displayName: 'Build'
    jobs:
      - job: function_app_build
        displayName: 'Build and publish function app'
        pool:
          name: Azure Pipelines
          vmImage: $(vmImageName)
        steps:
          - checkout: self

          - task: DotNetCoreCLI@2
            displayName: Restore
            inputs:
              command: restore
              projects: '**/*.csproj'
              arguments: --output publish_output --configuration Release

          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              command: 'build'
              projects: '**/*.csproj'
              arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

          - task: ArchiveFiles@2
            displayName: 'Archive files'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true

          - task: Veracode.veracode-vsts-build-extension.veracode-scanner-task.Veracode@3
            condition: eq('${{ parameters.veracode_scan }}', true)
            displayName: 'Veracode Scan'
            inputs:
              AnalysisService: 'Veracode_Platform'
              veracodeAppProfile: OneMember365
              filepath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              optargs: '-criticality high -include **/*.dll -exclude **/*.exe -createsandbox true -sandboxname OneMember-FunctionApps-Scan -deleteIncompleteScan 1'
              sandboxName: 'OneMember-FunctionApps-Scan'
              createSandBox: true
              importResults: true
              failBuildOnPolicyFail: true
              maximumWaitTime: 30

          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            displayName: 'Publish Artifact'
            artifact: drop

  # ===================== DEPLOY (SEQUENTIAL) =====================
  - stage: Deploy
    displayName: 'Deploy'
    dependsOn: build_artifacts
    condition: succeeded()
    jobs:

      # DEV
      - deployment: Deploy_DEV
        displayName: 'Deploy to DEV'
        environment: dev
        condition: and(succeeded(), eq('${{ parameters.deploy_dev }}', true))
        variables:
          - template: kofc-functionapp-variables/pipeline-vars-dev.yml
        pool:
          name: Azure Pipelines
          vmImage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - task: AzureFunctionApp@1
                  displayName: 'Azure Functions App Deploy (DEV)'
                  inputs:
                    azureSubscription: ${{ parameters.sc_dev }}
                    appType: functionApp
                    appName: $(functionAppName)
                    package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

      # TEST (after DEV)
      - deployment: Deploy_TEST
        displayName: 'Deploy to TEST'
        environment: test
        dependsOn: Deploy_DEV
        condition: and(succeeded(), eq('${{ parameters.deploy_test }}', true))
        variables:
          - template: kofc-functionapp-variables/pipeline-vars-test.yml
        pool:
          name: Azure Pipelines
          vmImage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - task: AzureFunctionApp@1
                  displayName: 'Azure Functions App Deploy (TEST)'
                  inputs:
                    azureSubscription: ${{ parameters.sc_test }}
                    appType: functionApp
                    appName: $(functionAppName)
                    package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

      # UAT (after TEST)
      - deployment: Deploy_UAT
        displayName: 'Deploy to UAT'
        environment: uat
        dependsOn: Deploy_TEST
        condition: and(succeeded(), eq('${{ parameters.deploy_uat }}', true))
        variables:
          - template: kofc-functionapp-variables/pipeline-vars-uat.yml
        pool:
          name: Azure Pipelines
          vmImage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - task: AzureFunctionApp@1
                  displayName: 'Azure Functions App Deploy (UAT)'
                  inputs:
                    azureSubscription: ${{ parameters.sc_uat }}
                    appType: functionApp
                    appName: $(functionAppName)
                    package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

      # PROD (after UAT)
      - deployment: Deploy_PROD
        displayName: 'Deploy to PROD'
        environment: prod
        dependsOn: Deploy_UAT
        condition: and(succeeded(), eq('${{ parameters.deploy_prod }}', true))
        variables:
          - template: kofc-functionapp-variables/pipeline-vars-prod.yml
        pool:
          name: Azure Pipelines
          vmImage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - task: AzureFunctionApp@1
                  displayName: 'Azure Functions App Deploy (PROD)'
                  inputs:
                    azureSubscription: ${{ parameters.sc_prod }}
                    appType: functionApp
                    appName: $(functionAppName)
                    package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
