function validateTaxWithholding(formContext) {
  // Pull state config
  const {
    stateName,
    stateCode,
    minRate: MIN_RATE,
    minAmt: MIN_AMT,
    wholeDollarAmt,
    formReqWaive: formReq,
    stateRegType: regType,      // 'S' | 'M' | 'V'
    dollarAmtReq,               // 'Y' => % mode (use MIN_RATE); 'N' => $ mode (use MIN_AMT)
    followFedWld: followFed,    // 'R' | 'Y' | 'N'
    appFedRate,                 // 'Y' | 'N' (UI label cue only)
    mandPlanCls: reqdPlCls,     // 'R' | 'Y' | 'X'
    mandPremDist: reqdPrmDist   // 'R' | 'Y' | 'X'
  } = CONSTANTS.IRA_STATE_CODES;

  // Inputs from form
  const amountTo = formContext.getAttribute(CONSTANTS.ATTRIBUTE_NAMES.MATURITY_OPTIONS)?.getValue();
  const fedWh    = Number(formContext.getAttribute(CONSTANTS.ATTRIBUTE_NAMES.IRS_FEDERAL_TAX_PERCENTAGE)?.getValue() || 0);
  const stateWh  = Number(formContext.getAttribute(CONSTANTS.ATTRIBUTE_NAMES.IRS_STATE_TAX_PERCENTAGE)?.getValue() || 0);
  const raCode   = formContext.getAttribute(CONSTANTS.ATTRIBUTE_NAMES.RA_CODE)?.getValue();
  const iraPlanClosure = formContext.getAttribute(CONSTANTS.ATTRIBUTE_NAMES.IRA_Plan_Clouser)?.getValue();
  const exemptionReceived = formContext.getAttribute("nf1pbm_exceptionreceived")?.getValue();

  // Age (< 59.5)
  const age = getMemberAge(formContext, CONSTANTS.VARIABLES.MEMBER_DOB);
  const isUnder59_5 = (typeof age === "number") ? (age < 59.5) : false;

  // RA-code gating (keep your original rule)
  const isRACodeMatch = [582860001, 582860000].includes(raCode);

  // Normalize AmountTo compare
  const CLOSE_VALUE = (CONSTANTS.OPTION_SET_VALUES?.CLOSE ?? 'Close');
  const isClose = (amountTo === CLOSE_VALUE || (amountTo && amountTo.toString().toLowerCase() === 'close'));

  // % vs $ mode from config (per your flow)
  const isPercentMode = (dollarAmtReq === 'Y'); // Y => % (use MIN_RATE), N => $ (use MIN_AMT)

  // Build MIN_VALUE correctly (must be writable)
  let MIN_VALUE = isPercentMode ? Number(MIN_RATE || 0) : Number(MIN_AMT || 0);

  // Message formatter (inject XX.XX and 0.00 with correct units)
  function fmtMin(v) {
    return isPercentMode ? `${v.toFixed(2)}%` : `$${v.toFixed(2)}`;
  }
  function zeroDisplay() {
    return isPercentMode ? '0.00%' : '$0.00';
  }
  function m1() { return `State Withholding must be ${fmtMin(MIN_VALUE)} or higher. This state requires taxes to be withheld when Federal taxes are withheld.`; }
  function m2() { return `State Withholding must be ${fmtMin(MIN_VALUE)} or higher. State taxes are mandated for plan closures, without the ability to exempt out.`; }
  function m3() { return `State Withholding must be ${fmtMin(MIN_VALUE)} or higher. State taxes are mandated for premature distributions, without the ability to exempt out.`; }
  function m4() { return `State Withholding must be ${fmtMin(MIN_VALUE)} or higher. State taxes are mandated for when Federal taxes are withheld, or ${zeroDisplay()} must be entered and an exemption form or signature must be received.`; }
  function m5() { return `State Withholding must be ${fmtMin(MIN_VALUE)} or higher. State taxes are mandated for plan closures, or ${zeroDisplay()} must be entered and an exemption form or signature must be received.`; }
  function m6() { return `State Withholding must be ${fmtMin(MIN_VALUE)} or higher. State taxes are mandated for premature distributions, or ${zeroDisplay()} must be entered and an exemption form or signature must be received.`; }
  function m7() { return `State Withholding must be ${fmtMin(MIN_VALUE)} or higher. This state requires taxes to be withheld regardless if Federal taxes are withheld.`; }
  function m8() { return `State Withholding must be ${fmtMin(MIN_VALUE)} or higher. State taxes are mandated, or ${zeroDisplay()} must be entered and an exemption form or signature must be received.`; }

  function showDialog(message) {
    Xrm.Navigation.openAlertDialog({ text: message });
    return false;
  }

  function showExemptionRadio() {
    const control = formContext.getControl("nf1pbm_exceptionreceived");
    if (control) control.setVisible(true);
  }

  function hideStateWHTextBox() {
    const attr = formContext.getAttribute(CONSTANTS.ATTRIBUTE_NAMES.IRS_STATE_TAX_PERCENTAGE);
    const ctrl = formContext.getControl(CONSTANTS.ATTRIBUTE_NAMES.IRS_STATE_TAX_PERCENTAGE);
    if (attr) attr.setValue(null);
    if (ctrl) { ctrl.setDisabled(true); ctrl.setVisible(false); }
    return false;
  }

  function showStateWHTextBox() {
    const ctrl = formContext.getControl(CONSTANTS.ATTRIBUTE_NAMES.IRS_STATE_TAX_PERCENTAGE);
    if (ctrl) { ctrl.setDisabled(false); ctrl.setVisible(true); }
  }

  // 0% path with exemption requirement (for “…or 0 with exemption” branches)
  function handleExemptionFlow() {
    if (stateWh === 0) {
      showExemptionRadio();
      // accept TRUE / 'Y' / 1 as “received”
      const ok = (exemptionReceived === true || exemptionReceived === 'Y' || exemptionReceived === 1);
      return { handled: true, ok, error: ok ? null : "An exemption form or signature is required when entering 0." };
    }
    return { handled: false, ok: null, error: null };
  }

  function checkMinRateOrExemption(errorMsg) {
    const ex = handleExemptionFlow();
    if (ex.handled) {
      return ex.ok ? true : showDialog(errorMsg || ex.error);
    }
    return (stateWh >= MIN_VALUE) ? true : showDialog(errorMsg);
  }

  function checkMinRateOrErrorMsg(errorMsg) {
    return (stateWh >= MIN_VALUE) ? true : showDialog(errorMsg);
  }

  // Optional UI cue: “(of Federal Withholding)” when appFedRate === 'Y'
  (function toggleOfFederalLabel() {
    const ctrl = formContext.getControl(CONSTANTS.ATTRIBUTE_NAMES.IRS_STATE_TAX_PERCENTAGE);
    if (ctrl && ctrl.setLabel) {
      const base = "State Withholding";
      ctrl.setLabel(appFedRate === 'Y' ? `${base} (of Federal Withholding)` : base);
    }
  })();

  // Gate by RA code (keep your original)
  if (!isRACodeMatch) {
    return hideStateWHTextBox();
  }

  // Hide cases first (X branches)
  if (reqdPlCls === 'X' && isClose) {
    return hideStateWHTextBox();
  }
  if (reqdPrmDist === 'X' && isUnder59_5) {
    return hideStateWHTextBox();
  }

  // Otherwise, textbox is allowed
  showStateWHTextBox();

  // FOLLOW FED rules
  if (followFed === 'R') {
    // FED W/H > 0 → mandatory (no exemption) → MSG 1
    if (fedWh > 0) {
      if (!checkMinRateOrErrorMsg(m1())) return false;
    }
    // fedWh <= 0 → no constraint from this branch
  } else if (followFed === 'Y') {
    // FED W/H > 0 → min or 0 with exemption → MSG 4
    if (fedWh > 0) {
      if (!checkMinRateOrExemption(m4())) return false;
    }
  }
  // NOTE: followFed === 'V' was removed (not in the flow)

  // PLAN CLOSURE rules when AmountTo = Close
  if (isClose) {
    if (reqdPlCls === 'R') {
      if (!checkMinRateOrErrorMsg(m2())) return false;
    } else if (reqdPlCls === 'Y') {
      if (!checkMinRateOrExemption(m5())) return false;
    }
  }

  // PREMATURE DISTRIBUTION rules when under 59.5
  if (isUnder59_5) {
    if (reqdPrmDist === 'R') {
      if (!checkMinRateOrErrorMsg(m3())) return false;
    } else if (reqdPrmDist === 'Y') {
      if (!checkMinRateOrExemption(m6())) return false;
    }
  }

  // If you have a “mandated regardless of FED” flag, route to m7/m8 here (not present in your inputs)

  // Whole-dollar / decimals (applies in $ mode only; % mode allows two decimals)
  if (isPercentMode) {
    // allow at most 2 decimals
    if (!Number.isInteger(stateWh * 100)) {
      return showDialog("Percentage may have at most two decimal places.");
    }
  } else {
    // $ mode
    if (wholeDollarAmt === 'Y' && stateWh % 1 !== 0) {
      return showDialog("State Withholding must be a whole amount.");
    }
    if (!Number.isInteger(stateWh * 100)) {
      return showDialog("State Withholding may have at most two decimal places.");
    }
  }

  // If “waive form requirement = N”, ensure radio is visible (your original logic)
  if (formReq === 'N') {
    showExemptionRadio();
    // Don’t block save unless your business rule requires it here;
    // if you do, choose the most relevant message (m3 used in your original code)
    // return exemptionReceived ? true : showDialog(m3());
  }

  return true;
}


1. Decision Paths
A. Follow Federal Withholding
Follow FED = R

If FED W/H > 0 → Must be ≥ MIN VALUE (MSG 1) – no exemption allowed.

If FED W/H = 0 → No state withholding required (hide textbox).

Follow FED = Y

If FED W/H > 0 → Must be ≥ MIN VALUE OR 0 with exemption (MSG 4).

If FED W/H = 0 → No state withholding required (hide textbox).

B. Plan Closure
REQD PL CLS = R and Amount To = Close → Must be ≥ MIN VALUE (MSG 2).

REQD PL CLS = Y and Amount To = Close → Must be ≥ MIN VALUE OR 0 with exemption (MSG 5).

REQD PL CLS = X and Amount To = Close → State withholding not permitted (hide textbox).

C. Premature Distribution
REQD PRM DIST = R and Age < 59.5 → Must be ≥ MIN VALUE (MSG 3).

REQD PRM DIST = Y and Age < 59.5 → Must be ≥ MIN VALUE OR 0 with exemption (MSG 6).

REQD PRM DIST = X and Age < 59.5 → State withholding not permitted (hide textbox).

D. Always Mandated
State requires withholding regardless of FED W/H:

Without exemption → MSG 7.

With exemption option → MSG 8.

2. Supporting Rules
Amount Mode

If Dollar Amount Required = Y → MIN VALUE = MIN RATE, entry is in % mode.

If Dollar Amount Required = N → MIN VALUE = MIN AMOUNT, entry is in $ mode.

Whole Dollar Requirement

If Whole $ Amount = Y, withholding must be a whole dollar amount.

Otherwise, allow up to 2 decimal places.

Exemption Handling

When state W/H = 0 and exemption is required:

Show exemption radio field.

Block save unless exemption received.

Label Adjustment

If “Rate Applies to FED = Y” → show “(of Federal Withholding)” next to the state W/H field.

Textbox Visibility

Hide and disable when state withholding is not permitted (per X-branches in diagram).

