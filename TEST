
// Dynamics 365 Web Resource: State Tax Withholding Validator (control notifications only)
// - Implements updated flow (REG TYPE S vs M/V) per latest diagrams
// - Uses updated messages 1–11 (with XX.XX / 0.00 auto-formatted to % or $)
// - Shows/hides the Exemption radio only when needed; hides it again when value changes
// - Optional: does not clear values when hiding unless SETTINGS flags are enabled

function validateTaxWithholding(formContext) {
  // ========= Config (from constants) =========
  const {
    stateName,
    stateCode,
    minRate,
    minAmt,
    wholeDollarAmt,      // 'Y' => whole dollars (only in $ mode)
    formReqWaive,        // 'N' => exemption allowed
    stateRegType,        // 'S' | 'M' | 'V'
    dollarAmtReq,        // 'Y' => % mode (minRate), 'N' => $ mode (minAmt)
    followFedWld,        // 'R' | 'Y' | 'N' | 'V'
    appFedRate,          // 'Y' => show "(of Federal Withholding)"
    mandPlanCls,         // 'R' | 'Y' | 'X'
    mandPremDist         // 'R' | 'Y' | 'X'
  } = CONSTANTS.IRA_STATE_CODES;

  const A = CONSTANTS.ATTRIBUTE_NAMES;
  const SETTINGS = {
    CLEAR_ON_HIDE: CONSTANTS?.SETTINGS?.CLEAR_ON_HIDE ?? false,
    CLEAR_EXEMPTION_ON_HIDE: CONSTANTS?.SETTINGS?.CLEAR_EXEMPTION_ON_HIDE ?? false
  };

  // ========= Helpers =========
  const attr = (schema) => formContext.getAttribute(schema);
  const ctrl = (schema) => formContext.getControl(schema);
  const getVal = (schema, def=null) => attr(schema)?.getValue() ?? def;

  const stateAttr = attr(A.IRS_STATE_TAX_PERCENTAGE);
  const stateCtrl = ctrl(A.IRS_STATE_TAX_PERCENTAGE);
  const exAttr    = attr("nf1pbm_exceptionreceived");
  const exCtrl    = ctrl("nf1pbm_exceptionreceived");

  const amountTo = getVal(A.MATURITY_OPTIONS);
  const fedWh    = Number(getVal(A.IRS_FEDERAL_TAX_PERCENTAGE, 0)) || 0;
  const stateWh  = Number(getVal(A.IRS_STATE_TAX_PERCENTAGE, 0)) || 0;
  const raCode   = getVal(A.RA_CODE);
  const exemptionReceived = getVal("nf1pbm_exceptionreceived");

  // Fractional age; under 59.5 triggers "Premature"
  const age = getMemberAge(formContext, CONSTANTS.VARIABLES.MEMBER_DOB);
  const isUnder59_5 = typeof age === "number" ? (age < 59.5) : !!age; // supports old boolean helper

  const isRACodeMatch = [582860001, 582860000].includes(raCode);

  const CLOSE_VALUE = (CONSTANTS.OPTION_SET_VALUES?.CLOSE ?? "Close");
  const isClose = (amountTo === CLOSE_VALUE || (amountTo && String(amountTo).toLowerCase() === "close"));

  const isPercentMode = (dollarAmtReq === "Y"); // Y => % mode
  const MIN_VALUE = isPercentMode ? Number(minRate || 0) : Number(minAmt || 0);

  // ========= Label cue (caption only) =========
  if (stateCtrl?.setLabel) {
    const base = "State Withholding";
    stateCtrl.setLabel(appFedRate === "Y" ? `${base} (of Federal Withholding)` : base);
  }

  // Precision mask on control
  function setPrecisionForMode() {
    if (!stateCtrl?.setPrecision) return;
    if (isPercentMode) stateCtrl.setPrecision(2);
    else stateCtrl.setPrecision(wholeDollarAmt === "Y" ? 0 : 2);
  }
  setPrecisionForMode();

  // ========= Updated Messages (1–11) =========
  const M = {
    1:  "State Withholding must be XX.XX or higher. This state requires taxes to be withheld when Federal taxes are withheld.",
    2:  "State Withholding must be XX.XX or higher. State taxes are mandated for plan closures, without the ability to exempt out.",
    3:  "State Withholding must be XX.XX or higher. State taxes are mandated for premature distributions, without the ability to exempt out.",
    4:  "State Withholding must be XX.XX or higher. State taxes are mandated for when Federal taxes are withheld, or 0.00 must be entered and an exemption form or signature must be received.",
    5:  "State Withholding must be XX.XX or higher. State taxes are mandated for plan closures, or 0.00 must be entered and an exemption form or signature must be received.",
    6:  "State Withholding must be XX.XX or higher. State taxes are mandated for premature distributions, or 0.00 must be entered and an exemption form or signature must be received.",
    7:  "State Withholding must be XX.XX or higher. This state requires taxes to be withheld regardless if Federal taxes are withheld.",
    8:  "State Withholding must be XX.XX or higher. State taxes are mandated, or 0.00 must be entered and an exemption form or signature must be received.",
    9:  "This state only accepts whole numbers for Federal and State rates",
    10: "State Withholding must be XX.XX or higher.",
    11: "State Withholding must be XX.XX or higher, and a whole dollar amount"
  };

  function fmtMin()  { return isPercentMode ? `${MIN_VALUE.toFixed(2)}%` : `$${MIN_VALUE.toFixed(2)}`; }
  function fmtZero() { return isPercentMode ? `0.00%` : `$0.00`; }
  function fill(msg) { return msg.replaceAll("XX.XX", fmtMin()).replaceAll("0.00", fmtZero()); }

  // ========= Notifications (control-level) =========
  const NID = { RULE: "STATE_WHT_RULE", PREC: "STATE_WHT_PREC", EX: "STATE_WHT_EXEMPT" };

  function clearAllNotifs() {
    try { stateCtrl?.clearNotification(NID.RULE); } catch {}
    try { stateCtrl?.clearNotification(NID.PREC); } catch {}
    try { exCtrl?.clearNotification?.(NID.EX); } catch {}
  }

  function notifyRule(msgKey) {
    clearAllNotifs();
    stateCtrl?.setNotification(fill(M[msgKey]), NID.RULE);
    return false;
  }

  function showExemptionRadio() { exCtrl?.setVisible(true); }

  function hideExemptionRadio() {
    try { exCtrl?.clearNotification?.(NID.EX); } catch {}
    if (SETTINGS.CLEAR_EXEMPTION_ON_HIDE && exAttr) exAttr.setValue(null);
    exCtrl?.setVisible(false);
  }

  function notifyExemption(msgKey) {
    clearAllNotifs();
    stateCtrl?.setNotification(fill(M[msgKey]), NID.RULE);
    showExemptionRadio();
    exCtrl?.setNotification?.("Exemption required to continue.", NID.EX);
    return false;
  }

  function checkPrecision() {
    if (isPercentMode) {
      if (!Number.isInteger(stateWh * 100)) {
        stateCtrl?.setNotification("Percentage may have at most two decimal places.", NID.PREC);
        return false;
      }
    } else {
      if (wholeDollarAmt === "Y" && stateWh % 1 !== 0) {
        stateCtrl?.setNotification("Dollar amount must be a whole number.", NID.PREC);
        return false;
      }
      if (!Number.isInteger(stateWh * 100)) {
        stateCtrl?.setNotification("Dollar amount may have at most two decimal places.", NID.PREC);
        return false;
      }
    }
    try { stateCtrl?.clearNotification(NID.PREC); } catch {}
    return true;
  }

  function hideStateWH() {
    clearAllNotifs();
    hideExemptionRadio();
    if (stateCtrl) { stateCtrl.setDisabled(true); stateCtrl.setVisible(false); }
    if (SETTINGS.CLEAR_ON_HIDE && stateAttr) stateAttr.setValue(null);
    return false;
  }
  function showStateWH() { if (stateCtrl) { stateCtrl.setDisabled(false); stateCtrl.setVisible(true); } }

  // ===== RA code gating =====
  if (!([582860001, 582860000].includes(raCode))) return hideStateWH();
  showStateWH();

  // ===== Core rule helpers =====
  function enforceMinNoExemption(msgKey) {
    hideExemptionRadio();
    if (stateWh >= MIN_VALUE) { clearAllNotifs(); return true; }
    return notifyRule(msgKey);
  }

  function enforceMinOrZeroWithExemption(msgKey) {
    if (stateWh === 0) {
      const hasEx = (exemptionReceived === true || exemptionReceived === "Y" || exemptionReceived === 1);
      if (hasEx) { clearAllNotifs(); showExemptionRadio(); return true; }
      return notifyExemption(msgKey);
    }
    // non-zero → hide exemption radio
    hideExemptionRadio();
    return enforceMinNoExemption(msgKey);
  }

  // =========================================================
  // ================= REG TYPE: S (flow order) ===============
  // =========================================================
  if (stateRegType === "S") {
    // A) FOLLOW FED
    if (followFedWld === "R") {
      if (fedWh === 0) { return hideStateWH(); }
      if (!enforceMinNoExemption(1)) return false;
    } else if (followFedWld === "Y") {
      if (fedWh === 0) { return hideStateWH(); }
      if (!enforceMinOrZeroWithExemption(4)) return false;
    } else if (followFedWld === "V") {
      if (formReqWaive === "N") {
        if (!enforceMinOrZeroWithExemption(8)) return false;
      } else {
        if (!enforceMinNoExemption(7)) return false;
      }
    }

    // B) PLAN CLOSURE (Amount To = Close)
    if (isClose) {
      if (mandPlanCls === "R") {
        if (!enforceMinNoExemption(2)) return false;
      } else if (mandPlanCls === "Y") {
        if (!enforceMinOrZeroWithExemption(5)) return false;
      } else if (mandPlanCls === "X") {
        return hideStateWH();
      }
    }

    // C) PREMATURE DISTRIBUTION (Age < 59.5)
    if (isUnder59_5) {
      if (mandPremDist === "R") {
        if (!enforceMinNoExemption(3)) return false;
      } else if (mandPremDist === "Y") {
        if (!enforceMinOrZeroWithExemption(6)) return false;
      } else if (mandPremDist === "X") {
        return hideStateWH();
      }
    }

    // D) S fall-through → hide
    const sHit =
      (followFedWld === "R" && fedWh > 0) ||
      (followFedWld === "Y" && fedWh > 0) ||
      (followFedWld === "V") ||
      (isClose && ["R","Y","X"].includes(mandPlanCls)) ||
      (isUnder59_5 && ["R","Y","X"].includes(mandPremDist));
    if (!sHit) return hideStateWH();
  }

  // =========================================================
  // ========= REG TYPE: M or V (ordered per flow) ==========
  // =========================================================
  else if (stateRegType === "M" || stateRegType === "V") {
    // 0) Not permitted branches first
    if (isClose && mandPlanCls === "X") { return hideStateWH(); }
    if (isUnder59_5 && mandPremDist === "X") { return hideStateWH(); }

    // 1) RT APPL TO FED = Y → when FED>0 require ≥ MIN (no exemption)
    if (appFedRate === "Y" && fedWh > 0) {
      if (!enforceMinNoExemption(1)) return false;
    }

    // 2) FOLLOW FED
    if (followFedWld === "R") {
      if (fedWh === 0) { return hideStateWH(); }
      if (!enforceMinNoExemption(1)) return false;
    } else if (followFedWld === "Y") {
      if (fedWh === 0) { return hideStateWH(); }
      if (!enforceMinOrZeroWithExemption(4)) return false;
    } else if (followFedWld === "V") {
      if (formReqWaive === "N") {
        if (!enforceMinOrZeroWithExemption(8)) return false;
      } else {
        if (!enforceMinNoExemption(7)) return false;
      }
    }

    // 3) PLAN CLOSURE
    if (isClose) {
      if (mandPlanCls === "R") {
        if (!enforceMinNoExemption(2)) return false;
      } else if (mandPlanCls === "Y") {
        if (!enforceMinOrZeroWithExemption(5)) return false;
      }
      // X handled above
    }

    // 4) PREMATURE DISTRIBUTION
    if (isUnder59_5) {
      if (mandPremDist === "R") {
        if (!enforceMinNoExemption(3)) return false;
      } else if (mandPremDist === "Y") {
        if (!enforceMinOrZeroWithExemption(6)) return false;
      }
      // X handled above
    }

    // 5) Fall-through → hide
    const mvHit =
      (appFedRate === "Y" && fedWh > 0) ||
      (followFedWld === "V") ||
      ((followFedWld === "R" || followFedWld === "Y") && fedWh > 0) ||
      (isClose && ["R","Y"].includes(mandPlanCls)) ||
      (isUnder59_5 && ["R","Y"].includes(mandPremDist));
    if (!mvHit) return hideStateWH();
  }

  // Unknown reg type → hide
  else {
    return hideStateWH();
  }

  // ========= Precision last =========
  if (!checkPrecision()) return false;

  clearAllNotifs();
  return true;
}

// ===== Optional: lightweight onchange wiring (call at form OnLoad) =====
function wireTaxWithholdingRevalidate(executionContext) {
  const formContext = executionContext.getFormContext();
  const A = CONSTANTS.ATTRIBUTE_NAMES;
  const fields = [
    A.IRS_STATE_TAX_PERCENTAGE,
    A.IRS_FEDERAL_TAX_PERCENTAGE,
    A.MATURITY_OPTIONS,
    A.RA_CODE,
    "nf1pbm_exceptionreceived",
    CONSTANTS.VARIABLES.MEMBER_DOB
  ];
  fields.forEach((schema) => {
    const a = formContext.getAttribute(schema);
    if (a && typeof a.addOnChange === "function") {
      a.addOnChange(() => validateTaxWithholding(formContext));
    }
  });
  // initial run
  validateTaxWithholding(formContext);
}
