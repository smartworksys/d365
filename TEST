import os
import json

def search_in_json(data, search_text):
    """Recursively search for text in nested JSON."""
    if isinstance(data, dict):
        return any(search_in_json(v, search_text) for v in data.values())
    elif isinstance(data, list):
        return any(search_in_json(item, search_text) for item in data)
    else:
        return search_text.lower() in str(data).lower()

def search_in_text_file(file_path, search_text):
    """Search for text in plain text file line-by-line."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return any(search_text.lower() in line.lower() for line in f)
    except Exception as e:
        print(f"‚ö†Ô∏è Could not read text file: {file_path} ‚Äî {e}")
        return False

def find_matching_files(folder_path, search_text):
    matched_files = []

    for root, _, files in os.walk(folder_path):
        for file in files:
            full_path = os.path.join(root, file)

            try:
                with open(full_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                try:
                    json_data = json.loads(content)
                    if search_in_json(json_data, search_text):
                        matched_files.append(full_path)
                except json.JSONDecodeError:
                    if search_in_text_file(full_path, search_text):
                        matched_files.append(full_path)
            except Exception as e:
                print(f"‚ö†Ô∏è Skipped file {full_path}: {e}")

    return matched_files

# ---- CONFIG ----
search_root = "./your_folder_path_here"         # Replace with your folder path
search_term = "reporting expectations"          # Replace with your search term

# ---- RUN ----
matched = find_matching_files(search_root, search_term)

# ---- OUTPUT ----
if matched:
    print(f"\nüìÇ Found {len(matched)} file(s) containing '{search_term}':\n")
    for file_path in matched:
        print(file_path)
else:
    print(f"\n‚ùå No files found containing '{search_term}' in '{search_root}'")
