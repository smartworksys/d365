import os
import json

def search_json(data, search_text, path=""):
    results = []
    if isinstance(data, dict):
        for key, value in data.items():
            full_path = f"{path}.{key}" if path else key
            results.extend(search_json(value, search_text, full_path))
    elif isinstance(data, list):
        for index, item in enumerate(data):
            full_path = f"{path}[{index}]"
            results.extend(search_json(item, search_text, full_path))
    else:
        if search_text.lower() in str(data).lower():
            results.append((path, data))
    return results

def search_folder_for_text(folder_path, search_text):
    all_matches = {}
    for filename in os.listdir(folder_path):
        if filename.endswith('.json'):
            file_path = os.path.join(folder_path, filename)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    json_data = json.load(f)
                matches = search_json(json_data, search_text)
                if matches:
                    all_matches[filename] = matches
            except Exception as e:
                print(f"Error reading {filename}: {e}")
    return all_matches

# ---- CONFIGURATION ----
folder_to_search = "./your_folder_path_here"  # Replace with your folder path
search_term = "reporting expectations"        # Replace with your search term

# ---- RUN SEARCH ----
results = search_folder_for_text(folder_to_search, search_term)

# ---- DISPLAY RESULTS ----
if results:
    print(f"\nüîç Found matches for '{search_term}' in the following files:\n")
    for file, matches in results.items():
        print(f"üìÑ File: {file}")
        for path, value in matches:
            print(f"  ‚û§ Path: {path}")
            print(f"     Value: {value}\n")
else:
    print(f"\n‚ùå No matches found for '{search_term}' in folder '{folder_to_search}'")
