function validateTaxWithholding(formContext) {
  // ---- Config from state (per your constants) ----
  const {
    stateName,
    stateCode,
    minRate: MIN_RATE,
    minAmt: MIN_AMT,
    wholeDollarAmt,                 // 'Y' => whole dollars (only in $ mode)
    formReqWaive: formReq,          // 'N' => exemption allowed
    stateRegType: regType,          // 'S' | 'M' | 'V' (not used for branching here, but available)
    dollarAmtReq,                   // 'Y' => % mode (MIN_RATE), 'N' => $ mode (MIN_AMT)
    followFedWld: followFed,        // 'R' | 'Y' | 'N' | 'V' (V = always mandated)
    appFedRate,                     // 'Y' => label cue “(of Federal Withholding)”
    mandPlanCls: reqdPlCls,         // 'R' | 'Y' | 'X'
    mandPremDist: reqdPrmDist       // 'R' | 'Y' | 'X'
  } = CONSTANTS.IRA_STATE_CODES;

  // ---- Attributes / Controls ----
  const A = CONSTANTS.ATTRIBUTE_NAMES;
  const stateAttr = formContext.getAttribute(A.IRS_STATE_TAX_PERCENTAGE);
  const stateCtrl = formContext.getControl(A.IRS_STATE_TAX_PERCENTAGE);

  const getVal = (name, def = null) => formContext.getAttribute(name)?.getValue() ?? def;

  // Inputs
  const amountTo = getVal(A.MATURITY_OPTIONS);
  const fedWh    = Number(getVal(A.IRS_FEDERAL_TAX_PERCENTAGE, 0)) || 0;
  const stateWh  = Number(getVal(A.IRS_STATE_TAX_PERCENTAGE, 0)) || 0;
  const raCode   = getVal(A.RA_CODE);
  const exemptionReceived = getVal("nf1pbm_exceptionreceived");

  // Age < 59.5
  const age = getMemberAge(formContext, CONSTANTS.VARIABLES.MEMBER_DOB);
  const isUnder59_5 = typeof age === "number" ? age < 59.5 : !!age; // supports old boolean helper

  // RA-code gating (unchanged)
  const isRACodeMatch = [582860001, 582860000].includes(raCode);

  // Close normalization
  const CLOSE_VALUE = (CONSTANTS.OPTION_SET_VALUES?.CLOSE ?? 'Close');
  const isClose = (amountTo === CLOSE_VALUE || (amountTo && amountTo.toString().toLowerCase() === 'close'));

  // ---- Mode & MIN VALUE (Supporting Rules → Amount Mode) ----
  const isPercentMode = (dollarAmtReq === 'Y'); // Y → % mode using MIN_RATE; N → $ mode using MIN_AMT
  const MIN_VALUE = isPercentMode ? Number(MIN_RATE || 0) : Number(MIN_AMT || 0);

  // ---- UI helpers ----
  function showDialog(message) { Xrm.Navigation.openAlertDialog({ text: message }); return false; }
  function showExemptionRadio() { formContext.getControl("nf1pbm_exceptionreceived")?.setVisible(true); }
  function hideStateWH() {
    if (stateAttr) stateAttr.setValue(null);
    if (stateCtrl) { stateCtrl.setDisabled(true); stateCtrl.setVisible(false); }
    return false;
  }
  function showStateWH() {
    if (stateCtrl) { stateCtrl.setDisabled(false); stateCtrl.setVisible(true); }
  }

  // Label cue (Supporting Rules → Label Adjustment)
  if (stateCtrl?.setLabel) {
    const base = "State Withholding";
    stateCtrl.setLabel(appFedRate === 'Y' ? `${base} (of Federal Withholding)` : base);
  }

  // Messages
  const fmtMin = (v) => isPercentMode ? `${v.toFixed(2)}%` : `$${v.toFixed(2)}`;
  const zeroDisp = () => isPercentMode ? '0.00%' : '$0.00';
  const MSG = {
    1: `State Withholding must be ${fmtMin(MIN_VALUE)} or higher. This state requires taxes to be withheld when Federal taxes are withheld.`,
    2: `State Withholding must be ${fmtMin(MIN_VALUE)} or higher. State taxes are mandated for plan closures, without the ability to exempt out.`,
    3: `State Withholding must be ${fmtMin(MIN_VALUE)} or higher. State taxes are mandated for premature distributions, without the ability to exempt out.`,
    4: `State Withholding must be ${fmtMin(MIN_VALUE)} or higher. State taxes are mandated for when Federal taxes are withheld, or ${zeroDisp()} must be entered and an exemption form or signature must be received.`,
    5: `State Withholding must be ${fmtMin(MIN_VALUE)} or higher. State taxes are mandated for plan closures, or ${zeroDisp()} must be entered and an exemption form or signature must be received.`,
    6: `State Withholding must be ${fmtMin(MIN_VALUE)} or higher. State taxes are mandated for premature distributions, or ${zeroDisp()} must be entered and an exemption form or signature must be received.`,
    7: `State Withholding must be ${fmtMin(MIN_VALUE)} or higher. This state requires taxes to be withheld regardless if Federal taxes are withheld.`,
    8: `State Withholding must be ${fmtMin(MIN_VALUE)} or higher. State taxes are mandated, or ${zeroDisp()} must be entered and an exemption form or signature must be received.`
  };

  // ---- Core helpers (Supporting Rules → Exemption Handling) ----
  function enforceMinNoExemption(msg) {
    return (stateWh >= MIN_VALUE) ? true : showDialog(msg);
  }

  function enforceMinOrZeroWithExemption(msg) {
    if (stateWh === 0) {
      showExemptionRadio();
      const ok = (exemptionReceived === true || exemptionReceived === 'Y' || exemptionReceived === 1);
      return ok ? true : showDialog(msg);
    }
    return (stateWh >= MIN_VALUE) ? true : showDialog(msg);
  }

  // Precision (Supporting Rules → Whole Dollar Requirement)
  function checkPrecision() {
    if (isPercentMode) {
      // %: up to two decimals
      if (!Number.isInteger(stateWh * 100)) return showDialog("Percentage may have at most two decimal places.");
    } else {
      // $: whole dollar if required; else up to two decimals
      if (wholeDollarAmt === 'Y' && stateWh % 1 !== 0) return showDialog("State Withholding must be a whole amount.");
      if (!Number.isInteger(stateWh * 100)) return showDialog("State Withholding may have at most two decimal places.");
    }
    return true;
  }

  // If RA code does not match, the field is not applicable
  if (!isRACodeMatch) return hideStateWH();

  // Default to visible when applicable; individual branches may hide
  showStateWH();

  // =========================================================
  // 1. Decision Paths
  // A. Follow Federal Withholding
  // =========================================================
  if (followFed === 'R') {
    if (fedWh > 0) { if (!enforceMinNoExemption(MSG[1])) return false; }
    else { return hideStateWH(); } // FED W/H = 0 → hide
  } else if (followFed === 'Y') {
    if (fedWh > 0) { if (!enforceMinOrZeroWithExemption(MSG[4])) return false; }
    else { return hideStateWH(); } // FED W/H = 0 → hide
  } else if (followFed === 'V') {
    // D. Always Mandated (no FED dependency)
    if (formReq === 'N') {
      if (!enforceMinOrZeroWithExemption(MSG[8])) return false; // with exemption option
    } else {
      if (!enforceMinNoExemption(MSG[7])) return false;         // without exemption
    }
  }

  // =========================================================
  // B. Plan Closure (Amount To = Close)
  // =========================================================
  if (isClose) {
    if (reqdPlCls === 'R') {
      if (!enforceMinNoExemption(MSG[2])) return false;
    } else if (reqdPlCls === 'Y') {
      if (!enforceMinOrZeroWithExemption(MSG[5])) return false;
    } else if (reqdPlCls === 'X') {
      return hideStateWH();
    }
  }

  // =========================================================
  // C. Premature Distribution (Age < 59.5)
  // =========================================================
  if (isUnder59_5) {
    if (reqdPrmDist === 'R') {
      if (!enforceMinNoExemption(MSG[3])) return false;
    } else if (reqdPrmDist === 'Y') {
      if (!enforceMinOrZeroWithExemption(MSG[6])) return false;
    } else if (reqdPrmDist === 'X') {
      return hideStateWH();
    }
  }

  // =========================================================
  // D. Always Mandated (already handled via followFed === 'V')
  // =========================================================

  // Supporting Rules: precision last so users see rule-specific errors first
  if (!checkPrecision()) return false;

  return true;
}

Decision Paths
A. Follow Federal Withholding

R:
• If FED W/H > 0 → require ≥ MIN (Msg 1) – no exemption.
• If FED W/H = 0 → state W/H not permitted → hide.
✔ Covered by followFed === 'R' block (enforceMinNoExemption / hide).


Y:
• If FED W/H > 0 → ≥ MIN or 0 with exemption (Msg 4).
• If FED W/H = 0 → hide.
✔ Covered by followFed === 'Y' block (enforceMinOrZeroWithExemption / hide).


B. Plan Closure

REQD PL CLS = R and Amount To = Close → ≥ MIN (Msg 2). ✔

REQD PL CLS = Y and Close → ≥ MIN or 0 with exemption (Msg 5). ✔

REQD PL CLS = X and Close → not permitted → hide. ✔
All three handled in the isClose section (R → enforceMinNoExemption, Y → enforceMinOrZeroWithExemption, X → hide).


C. Premature Distribution

REQD PRM DIST = R and Age < 59.5 → ≥ MIN (Msg 3). ✔

REQD PRM DIST = Y and Age < 59.5 → ≥ MIN or 0 with exemption (Msg 6). ✔

REQD PRM DIST = X and Age < 59.5 → not permitted → hide. ✔
Handled in the isUnder59_5 section (R → enforceMinNoExemption, Y → enforceMinOrZeroWithExemption, X → hide).


D. Always Mandated

“State requires withholding regardless of FED W/H”:
• Without exemption → Msg 7.
• With exemption option → Msg 8.
✔ Implemented via followFed === 'V':

if formReq !== 'N' ⇒ Msg 7 (no exemption)

if formReq === 'N' ⇒ Msg 8 (0 requires exemption)


Supporting Rules
Amount Mode
• If Dollar Amount Required = Y → MIN = MIN RATE, entry % mode.
• If Dollar Amount Required = N → MIN = MIN AMOUNT, entry $ mode.
✔ Implemented by isPercentMode = (dollarAmtReq === 'Y') and MIN_VALUE selection.
(Matches the AMT REQD box on page 1.) 

Whole Dollar Requirement
• If Whole $ Amount = Y, must be whole dollars; else up to 2 decimals.
✔ Checked in checkPrecision(); % also limited to 2 decimals. 

Exemption Handling
• When state W/H = 0 and exemption path applies: show radio and block save unless received.
✔ enforceMinOrZeroWithExemption() shows the radio and blocks without exemption. 

Label Adjustment
• If Rate Applies to FED = Y → show “(of Federal Withholding)”.
✔ Label toggle added at load each validation call. 

Textbox Visibility
• Hide/disable when not permitted (X-branches, Follow Fed = R/Y with FED W/H = 0, and S-type fall-throughs).
✔ All “not permitted” nodes call hideStateWH(); field is disabled & hidden consistently. 

Edge cases & notes (all covered)
RT APPL TO FED = Y (M/V) with FED W/H > 0 → Msg 1 (≥ MIN, no exemption). ✔ 

Message text uses the diagram’s wording; placeholders XX.XX/0.00 render as % or $ based on mode. ✔ (See page 2’s message list and note.) 

RA code gating preserved: if RA code not in allowed set, field is hidden. ✔

function getMemberAge(formContext, dateOfBirth) {
    // 1. Parse DOB from string or Date object
    const dob = new Date(dateOfBirth);
    if (isNaN(dob.getTime())) {
        console.error("Invalid dateOfBirth:", dateOfBirth);
        return null; // return null if invalid
    }

    // 2. Today's date (date-only)
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());

    // 3. Calculate age in full years
    let age = today.getFullYear() - dob.getFullYear();
    const m = today.getMonth() - dob.getMonth();
    if (m < 0 || (m === 0 && today.getDate() < dob.getDate())) {
        age--; // adjust if birthday not reached yet this year
    }

    // 4. Add fractional year for months/days
    const monthDiff = (today.getMonth() + 12 * today.getFullYear()) -
                      (dob.getMonth() + 12 * dob.getFullYear());
    const totalMonths = monthDiff;
    const fractionalAge = totalMonths / 12;

    return fractionalAge; // e.g., 59.5 means 59 years 6 months
}

const confirmStrings = {
    text: formatString(CONSTANTS.MESSAGES.DUPLICATE_RECORD, recordTitle),
    title: "Duplicate Maturity Instruction",
    confirmButtonLabel: "Yes",
    cancelButtonLabel: "Cancel"
};

const confirmOptions = {
    height: 200,
    width: 450
};

Xrm.Navigation.openConfirmDialog(confirmStrings, confirmOptions)
    .then(function (success) {
        if (success.confirmed) {
            // Prevent saving changes from current form
            formContext.data.entity.attributes.get().forEach(attr => attr.setSubmitMode("never"));

            // Open the maturity instruction record
            Xrm.Navigation.openForm({
                entityName: CONSTANTS.ENTITY_NAMES.MATURITY_INSTRUCTIONS,
                entityId: recordId
            })
            .then(() => window.location.reload())
            .catch(err => console.error("openForm error", err));
        } else {
            console.log("User canceled the action.");
        }
    })
    .catch(err => console.error("Dialog error", err));

// ===== Wire-up for instant revalidation/show-hide =====
// Call `PBM_WHT_Init.onLoad(executionContext)` from your Form OnLoad.
// (Optional) Call `PBM_WHT_Init.onSave(executionContext)` from OnSave to block save.

var PBM_WHT_Init = (function () {
  const SHARED_FLAG = "wh_handlers_registered";

  function getFormContext(executionContext) {
    return executionContext.getFormContext
      ? executionContext.getFormContext()
      : executionContext; // fallback
  }

  function tryGetAttr(formContext, schema) {
    if (!schema) return null;
    try { return formContext.getAttribute(schema) || null; }
    catch { return null; }
  }

  function safeAddOnChange(formContext, schema, handler) {
    const attr = tryGetAttr(formContext, schema);
    if (attr) attr.addOnChange(handler);
  }

  function revalidate(executionContext) {
    const formContext = getFormContext(executionContext);
    // Re-run your validator. If it returns false, we’re just toggling UI; we don’t block typing.
    try { validateTaxWithholding(formContext); } catch (e) { console.error(e); }
  }

  // Public: OnLoad
  function onLoad(executionContext) {
    const formContext = getFormContext(executionContext);

    // Prevent duplicate registrations (OnLoad can fire multiple times with quick create / navigate)
    if (formContext.ui.getFormType && formContext.getFormContext) {
      if (formContext.getFormContext?.()[SHARED_FLAG] || formContext.getSharedVariable?.(SHARED_FLAG)) {
        return; // already wired
      }
    }
    formContext.setSharedVariable && formContext.setSharedVariable(SHARED_FLAG, true);

    const A = CONSTANTS.ATTRIBUTE_NAMES;
    const V = CONSTANTS.VARIABLES;

    // Hook the fields that influence the flow:
    safeAddOnChange(formContext, A.IRS_FEDERAL_TAX_PERCENTAGE, revalidate);
    safeAddOnChange(formContext, A.MATURITY_OPTIONS,             revalidate);
    safeAddOnChange(formContext, A.RA_CODE,                      revalidate);
    safeAddOnChange(formContext, "nf1pbm_exceptionreceived",     revalidate);

    // DOB (your helper uses CONSTANTS.VARIABLES.MEMBER_DOB)
    safeAddOnChange(formContext, V.MEMBER_DOB,                   revalidate);

    // Optional: also revalidate if the state withholding itself changes (precision/min checks)
    safeAddOnChange(formContext, A.IRS_STATE_TAX_PERCENTAGE,     revalidate);

    // Optional: if you have a “state selector” attribute that changes CONSTANTS.IRA_STATE_CODES context,
    // hook it here too (replace A.STATE or similar with your actual schema name):
    // safeAddOnChange(formContext, A.STATE, revalidate);

    // Run once on load to set correct visibility/label/precision immediately
    revalidate(executionContext);
  }

  // Public: OnSave (optional) — blocks save when validator returns false
  function onSave(executionContext) {
    const formContext = getFormContext(executionContext);
    try {
      const ok = validateTaxWithholding(formContext);
      if (!ok) {
        const evt = executionContext.getEventArgs?.();
        evt && evt.preventDefault && evt.preventDefault();
      }
    } catch (e) {
      console.error(e);
    }
  }

  return { onLoad, onSave };
})();
