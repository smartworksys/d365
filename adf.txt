// 1) Make sure this is declared async in your library:
async function getMaturityInstructions(executionContext, accessNumber, accountTypeId, accountNumber, affiliateAccountNumber) {
    const fetchXml = `
      <fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="false">
        <entity name="${CONSTANTS.ENTITY_NAMES.MATURITY_INSTRUCTIONS}">
          <attribute name="nf1pbm_maturityinstructionsid" />
          <attribute name="nf1pbm_maturityinstructionid" />
          <attribute name="createdon" />
          <order attribute="nf1pbm_maturityinstructionid" descending="false" />
          <filter type="and">
            <condition attribute="nf1pbm_accessnumberint" operator="eq" value="${accessNumber}" />
            <condition attribute="${CONSTANTS.ATTRIBUTE_NAMES.ACCOUNT_TYPE}" operator="eq"
                       uiname="Share Certificate" uitype="nf1pbm_certificateaccounttype"
                       value="${accountTypeId}" />
            <condition attribute="${CONSTANTS.ATTRIBUTE_NAMES.CERTIFICATE_ACCOUNT_NUMBER}"
                       operator="eq" value="${accountNumber}" />
            <condition attribute="${CONSTANTS.ATTRIBUTE_NAMES.AFFILIATE_ACCOUNT_NUMBER}"
                       operator="eq" value="${affiliateAccountNumber}" />
            <condition attribute="nf1pbm_instructionstatus" operator="not-in">
              <value>582860001</value>
              <value>582860000</value>
              <value>582860003</value>
            </condition>
          </filter>
        </entity>
      </fetch>`;

    try {
        const result = await Xrm.WebApi.retrieveMultipleRecords(
          CONSTANTS.ENTITY_NAMES.MATURITY_INSTRUCTIONS,
          `?fetchXml=${encodeURIComponent(fetchXml)}`
        );

        if (result.entities.length > 0) {
            const existingRecordId = result.entities[0].nf1pbm_maturityinstructionid;
            const message = formatString(
              CONSTANTS.MESSAGES.DUPLICATE_RECORD,
              existingRecordId
            );
            showFormNotification(executionContext, message, "ERROR", "duplicateRecordError");
            makeFormReadOnly(executionContext);
            return []; // return an empty array so downstream logic can still run
        }

        console.log("Maturity instructions retrieved successfully:", result.entities);
        return result.entities;
    }
    catch (error) {
        console.error("Error retrieving maturity instructions:", error.message);
        throw error;
    }
}


// 2) Your OnChange handler:
function onAffiliateAccountNumberChange(executionContext) {
    const formContext = executionContext.getFormContext();

    // — pull all your form values before the async call —
    const affiliateAccountNumber = formContext
      .getAttribute(CONSTANTS.ATTRIBUTE_NAMES.AFFILIATE_ACCOUNT_NUMBER)
      .getValue();
    const certAccountNumber = formContext
      .getAttribute(CONSTANTS.ATTRIBUTE_NAMES.CERTIFICATE_ACCOUNT_NUMBER)
      .getValue();
    const accNumber = formContext
      .getAttribute("nf1pbm_accessnumberint")
      .getValue();
    const accountTypeId = formContext
      .getAttribute(CONSTANTS.ATTRIBUTE_NAMES.ACCOUNT_TYPE)
      .getValue();  // <— you need this!

    // — now wrap in an IIFE so you can await —
    (async () => {
      try {
        // 3) await your async call
        const instructions = await getMaturityInstructions(
          executionContext,
          accNumber,
          accountTypeId,
          certAccountNumber,
          affiliateAccountNumber
        );
        console.log("Maturity Instructions:", instructions);

        // 4) proceed with your affiliate-balance logic
        if (affiliateAccountNumber && affiliateAccountNumber !== "--Select--") {
          apiaccountsData.forEach(item => {
            if (affiliateAccountNumber === item.accountNumber) {
              formContext
                .getAttribute(CONSTANTS.ATTRIBUTE_NAMES.AFFILIATE_BALANCE_AMOUNT)
                .setValue(parseFloat(item.availableBalance));
              CONSTANTS.ACCOUNT_DETAILS.AFFILIATE_ACCOUNT_TYPE = item.accountType;

              // make sure this helper name matches exactly:
              if (item.subType === "IR" || item.subType === "EDN") {
                setAffiliateAccountTypeOptionSetValue(
                  formContext,
                  item.iraPlanSequenceNumber
                );
              } else {
                setAffiliateAccountTypeOptionSetValue(
                  formContext,
                  item.subType
                );
              }
            }
          });
        } else {
          formContext
            .getAttribute(CONSTANTS.ATTRIBUTE_NAMES.AFFILIATE_BALANCE_AMOUNT)
            .setValue(null);
        }

        // 5) fire your dependent routines
        amountChange(executionContext);
        initializeRAOptions(executionContext);
        initializeMaturityOptions(executionContext);
        enableDisableAmount(executionContext);
      }
      catch (err) {
        console.error("Error in onAffiliateAccountNumberChange:", err);
      }
    })();
}


