import os
import json
import csv
import xml.etree.ElementTree as ET

# ----------------------------
# Helper Utilities
# ----------------------------
def search_json(data, search_terms, path=""):
    matches = []
    if isinstance(data, dict):
        for key, value in data.items():
            full_path = f"{path}.{key}" if path else key
            matches.extend(search_json(value, search_terms, full_path))
    elif isinstance(data, list):
        for index, item in enumerate(data):
            full_path = f"{path}[{index}]"
            matches.extend(search_json(item, search_terms, full_path))
    else:
        for term in search_terms:
            if term.lower() in str(data).lower():
                matches.append((path, data, term))
    return matches

def get_artifact_type(file_path):
    file = os.path.basename(file_path).lower()
    path = file_path.lower()
    if file == "form.json": return "Form"
    if file.endswith(".fetchxml"): return "View"
    if file.endswith(".definition.json"): return "Power Automate"
    if file.endswith(".workflow.json"): return "Workflow"
    if "businessrules" in path and file.endswith(".json"): return "Business Rule"
    if "formulas" in path and file.endswith(".json"): return "Formula"
    if "appactions" in path and file.endswith(".json"): return "App Action"
    if "duplicaterules" in path and file.endswith(".json"): return "Duplicate Rule"
    if "environmentvariabledefinitions" in path and file.endswith(".json"): return "Environment Variable"
    if file.endswith(".js") or file.endswith(".ts"): return "Web Resource"
    if file.endswith(".cs"): return "Plugin Assembly"
    if file.endswith(".xml"): return "XML"
    return "Unknown"

# ----------------------------
# Scanner
# ----------------------------
def scan_all_files(root_folder, search_terms):
    results = []
    for dirpath, _, files in os.walk(root_folder):
        for file in files:
            full_path = os.path.join(dirpath, file)
            artifact_type = get_artifact_type(full_path)
            if file.lower().endswith(".json"):
                try:
                    with open(full_path, encoding='utf-8') as f:
                        data = json.load(f)
                    matches = search_json(data, search_terms)
                    for path, value, term in matches:
                        results.append({
                            "Field": term,
                            "Type": artifact_type,
                            "Entity": "N/A",
                            "Context": f"Path: {path} ‚Üí Value: {str(value)[:100]}",
                            "File": full_path
                        })
                except Exception as e:
                    print(f"‚ö†Ô∏è JSON error: {full_path} ‚Äî {e}")
            elif file.lower().endswith((".js", ".ts", ".cs", ".xml")):
                try:
                    with open(full_path, encoding='utf-8') as f:
                        for i, line in enumerate(f, 1):
                            for term in search_terms:
                                if term.lower() in line.lower():
                                    results.append({
                                        "Field": term,
                                        "Type": artifact_type,
                                        "Entity": "N/A",
                                        "Context": f"Line {i}: {line.strip()[:100]}",
                                        "File": full_path
                                    })
                except Exception as e:
                    print(f"‚ö†Ô∏è Text error: {full_path} ‚Äî {e}")
    return results

# ----------------------------
# Writers
# ----------------------------
def write_csv(results, filename="field_usage_report.csv"):
    keys = ["Field", "Type", "Entity", "Context", "File"]
    with open(filename, "w", newline="", encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=keys)
        writer.writeheader()
        writer.writerows(results)

def write_markdown(results, filename="field_usage_report.md"):
    with open(filename, "w", encoding="utf-8") as f:
        f.write("# üìã Dynamics 365 Loose Text Usage Report\n\n")
        fields = sorted(set(r["Field"] for r in results))
        for field in fields:
            f.write(f"## üîé Term: `{field}`\n\n")
            for r in [r for r in results if r["Field"] == field]:
                f.write(f"### [{r['Type']}]\n")
                f.write(f"- üìÅ `{r['File']}`\n")
                f.write(f"- üß© **Context**: {r['Context']}\n\n")

# ----------------------------
# Configure & Run
# ----------------------------
if __name__ == "__main__":
    solution_folder = "./your_unmanaged_solution_folder"  # üîÅ Replace with actual path
    search_terms = ["reporting expectations", "new_contactref"]  # üîç Add more terms as needed

    print(f"\nüîç Scanning all files for terms: {', '.join(search_terms)}\n")
    results = scan_all_files(solution_folder, search_terms)

    if results:
        print(f"‚úÖ Found {len(results)} usage(s).")
        for r in results:
            print(f"[{r['Type']}] {r['Field']} ‚Äî {r['Context']} ‚û§ {r['File']}")
        write_csv(results)
        write_markdown(results)
        print("\nüìÅ CSV saved as: field_usage_report.csv")
        print("üìù Markdown saved as: field_usage_report.md\n")
    else:
        print("‚ùå No matching content found.")
