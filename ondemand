using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

namespace KOFC_Navigator_Integration
{
    public class InforcePolicyData
    {
        public string getNavInforcePolicyData(string responseJsonObj)
        {
            // Replace empty arrays with empty strings
            string jsonData = responseJsonObj.Replace(":[]", ": \"\"");

            try
            {
                // Deserialize JSON into Root object
                var root = JsonConvert.DeserializeObject<Root>(jsonData);

                // Create XML
                var xmlDoc = new XDocument(
                    new XDeclaration("1.0", "UTF-8", "yes"),
                    new XElement("FIPSCOLINKFILE",
                        new XAttribute("VERSION", "1.00"),
                        CreateDataElement(root.Data)
                    )
                );

                // Output XML
                Console.WriteLine(xmlDoc.ToString(SaveOptions.None));
                return xmlDoc.ToString();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred during JSON to XML conversion: {ex.Message}");
            }
            return null;
        }

        static XElement CreateDataElement(Data data)
        {
            var elements = new List<object>();

            if (!string.IsNullOrEmpty(data.IllustrationSystem))
                elements.Add(new XElement("Illustration_System", data.IllustrationSystem));

            if (data.AgentInformation != null)
                elements.Add(CreateElementFromObject("AGENTINFORMATION", data.AgentInformation));

            if (data.Persons != null)
            {
                // Sort Persons by PERSONID
                var sortedPersons = data.Persons.OrderBy(p => p.PERSONID);
                elements.AddRange(sortedPersons.Select(p => CreatePersonElement(p)));
            }

            if (data.Relations != null)
            {
                // Sort Relations by ORIGINATINGPERSONID
                var sortedRelations = data.Relations.OrderBy(r => r.ORIGINATINGPERSONID);
                elements.AddRange(sortedRelations.Select(r => CreateRelationElement(r)));
            }

            if (data.CaseData != null)
                elements.Add(CreateCaseDataElement(data.CaseData));

            return new XElement("DATA", elements);
        }

        // Create XElement for PERSON element
        static XElement CreatePersonElement(Person person)
        {
            var elements = new List<XElement>();

            elements.Add(new XElement("PERSONID", person.PERSONID));
            elements.Add(new XElement("FIRSTNAME", person.FIRSTNAME ?? string.Empty));
            elements.Add(new XElement("MIDDLEINITIAL", person.MIDDLEINITIAL ?? string.Empty));
            elements.Add(new XElement("LASTNAME", person.LASTNAME ?? string.Empty));
            elements.Add(new XElement("CLIENTID", person.CLIENTID ?? string.Empty));
            elements.Add(new XElement("DATEOFBIRTH", person.DATEOFBIRTH ?? string.Empty));
            elements.Add(new XElement("ISSUEAGE", person.ISSUEAGE?.ToString() ?? string.Empty));
            elements.Add(new XElement("SEX", person.SEX ?? string.Empty));

            // Optional fields for PERSON 1
            if (person.PERSONID == "1")
            {
                elements.Add(new XElement("MEMBERCOUNCIL", person.MEMBERCOUNCIL ?? string.Empty));
                elements.Add(new XElement("MEMBERSTATUS", person.MEMBERSTATUS ?? string.Empty));
                elements.Add(new XElement("INACTIVEFEEIND", person.INACTIVEFEEIND?.ToString() ?? string.Empty));
                elements.Add(new XElement("ADDRESS1", person.ADDRESS1 ?? string.Empty));
                elements.Add(new XElement("ADDRESS2", person.ADDRESS2 ?? string.Empty));
                elements.Add(new XElement("CITY", person.CITY ?? string.Empty));
                elements.Add(new XElement("STATE", person.STATE ?? string.Empty));
                elements.Add(new XElement("ZIP", person.ZIP ?? string.Empty));
                elements.Add(new XElement("PHONE", person.PHONE ?? string.Empty));
                elements.Add(new XElement("EMAILID", person.EMAILID ?? string.Empty));
                elements.Add(new XElement("STATEOFISSUE", person.STATEOFISSUE ?? string.Empty));
            }

            return new XElement("PERSON", elements);
        }

        // Create XElement for RELATION element
        static XElement CreateRelationElement(Relation relation)
        {
            return new XElement("RELATION",
                new XElement("ORIGINATINGPERSONID", relation.ORIGINATINGPERSONID),
                new XElement("RELATEDPERSONID", relation.RELATEDPERSONID),
                new XElement("ROLECODE", relation.ROLECODE)
            );
        }

        static XElement CreateCaseDataElement(CaseData caseData)
        {
            return CreateElementFromObject("CASEDATA", caseData);
        }

        static XElement CreateElementFromObject(string elementName, object obj)
        {
            var properties = obj.GetType().GetProperties().Where(p => p.GetIndexParameters().Length == 0);
            var elements = new List<object>();
            var attributes = new List<XAttribute>();

            // List of property names that should be treated as attributes
            var attributeNames = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
            {
                "PERSONID",
                "VERSION",
                "TYPE"
            };

            foreach (var prop in properties)
            {
                var value = prop.GetValue(obj) ?? string.Empty;
                var jsonProperty = prop.GetCustomAttributes(typeof(JsonPropertyAttribute), false)
                                        .FirstOrDefault() as JsonPropertyAttribute;
                var name = jsonProperty != null ? jsonProperty.PropertyName.TrimStart('@') : prop.Name;

                if (attributeNames.Contains(name) || (jsonProperty != null && jsonProperty.PropertyName.StartsWith("@")))
                {
                    // Handle attributes
                    attributes.Add(new XAttribute(name, value));
                }
                else if (typeof(IEnumerable<object>).IsAssignableFrom(prop.PropertyType) && prop.PropertyType != typeof(string))
                {
                    // Handle lists
                    var items = value as IEnumerable<object>;
                    if (items != null)
                    {
                        elements.AddRange(items.Select(item => CreateElementFromObject(name, item)));
                    }
                    else
                    {
                        elements.Add(new XElement(name));
                    }
                }
                else if (prop.PropertyType.IsClass && prop.PropertyType != typeof(string))
                {
                    // Handle nested objects
                    if (value != null)
                        elements.Add(CreateElementFromObject(name, value));
                    else
                        elements.Add(new XElement(name));
                }
                else
                {
                    var valueString = value.ToString().Trim();

                    if (!string.IsNullOrEmpty(valueString))
                    {
                        elements.Add(new XElement(name, valueString));
                    }
                    else
                    {
                        elements.Add(new XElement(name));
                    }
                }
            }

            return new XElement(elementName, attributes, elements);
        }
    }

    // Models
    public class Root
    {
        [JsonProperty("DATA")]
        public Data Data { get; set; }
    }

    public class Data
    {
        [JsonProperty("Illustration_System")]
        public string IllustrationSystem { get; set; }

        [JsonProperty("AGENTINFORMATION")]
        public AgentInformation AgentInformation { get; set; }

        [JsonProperty("PERSON")]
        public List<Person> Persons { get; set; }

        [JsonProperty("RELATION")]
        public List<Relation> Relations { get; set; }

        [JsonProperty("CASEDATA")]
        public CaseData CaseData { get; set; }
    }

    public class AgentInformation
    {
        public string FIRSTNAME { get; set; }
        public string MIDDLENAME { get; set; }
        public string LASTNAME { get; set; }
    }

    public class Person
    {
        public string PERSONID { get; set; }
        public string FIRSTNAME { get; set; }
        public string MIDDLEINITIAL { get; set; }
        public string LASTNAME { get; set; }
        public string CLIENTID { get; set; }
        public string DATEOFBIRTH { get; set; }
        public int? ISSUEAGE { get; set; }
        public string SEX { get; set; }
        public string MEMBERCOUNCIL { get; set; }
        public string MEMBERSTATUS { get; set; }
        public int? INACTIVEFEEIND { get; set; }
        public string ADDRESS1 { get; set; }
        public string ADDRESS2 { get; set; }
        public string CITY { get; set; }
        public string STATE { get; set; }
        public string ZIP { get; set; }
        public string PHONE { get; set; }
        public string EMAILID { get; set; }
        public string STATEOFISSUE { get; set; }
    }

    public class Relation
    {
        public int ORIGINATINGPERSONID { get; set; }
        public int RELATEDPERSONID { get; set; }
        public int ROLECODE { get; set; }
    }

    public class CaseData
    {
        public string POLICYNUMBER { get; set; }
        public string PRODUCT { get; set; }
        public string CLASS { get; set; }
        public string STATUS { get; set; }
    }
}
