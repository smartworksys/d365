using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

namespace KOFC_Navigator_Integration
{
    public class InforcePolicyData
    {
        public string GetNavInforcePolicyData(string responseJsonObj)
        {
            // Replace empty arrays with empty strings
            string jsonData = responseJsonObj.Replace(":[]", ": \"\"");

            try
            {
                // Deserialize JSON into Root object
                var root = JsonConvert.DeserializeObject<Root>(jsonData);

                // Create XML
                var xmlDoc = new XDocument(
                    new XDeclaration("1.0", "UTF-8", "yes"),
                    new XElement("FIPSCOLINKFILE",
                        new XAttribute("VERSION", "1.00"),
                        CreateDataElement(root.Data)
                    )
                );

                // Return XML as string
                return xmlDoc.ToString();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred during JSON to XML conversion: {ex.Message}");
                return null;
            }
        }

        static XElement CreateDataElement(Data data)
        {
            var elements = new List<object>();

            if (!string.IsNullOrEmpty(data.IllustrationSystem))
                elements.Add(new XElement("Illustration_System", data.IllustrationSystem));

            if (data.AgentInformation != null)
                elements.Add(CreateAgentInformationElement(data.AgentInformation));

            if (data.Persons != null)
            {
                // Sort Persons by PERSONID with PERSONID = 1 first
                var sortedPersons = data.Persons.OrderBy(p => p.PERSONID == "1" ? 0 : 1).ThenBy(p => p.PERSONID);
                elements.AddRange(sortedPersons.Select(p => CreatePersonElement("PERSON", p)));
            }

            if (data.Relations != null)
            {
                // Sort Relations by ORIGINATINGPERSONID, with ORIGINATINGPERSONID = 1 first
                var sortedRelations = data.Relations.OrderBy(r => r.ORIGINATINGPERSONID == 1 ? 0 : 1).ThenBy(r => r.ORIGINATINGPERSONID);
                elements.AddRange(sortedRelations.Select((r, index) => CreateRelationElement("RELATION", r, index + 1)));
            }

            if (data.CaseData != null)
                elements.Add(CreateCaseDataElement(data.CaseData));

            return new XElement("DATA", elements);
        }

        // Handles specific properties for AGENTINFORMATION
        static XElement CreateAgentInformationElement(AgentInformation agentInfo)
        {
            return new XElement("AGENTINFORMATION",
                CreateElement("FIRSTNAME", agentInfo.FIRSTNAME),
                CreateElement("MIDDLENAME", agentInfo.MIDDLENAME),
                CreateElement("LASTNAME", agentInfo.LASTNAME),
                CreateElement("ADDRESS1", agentInfo.ADDRESS1),
                CreateElement("ADDRESS2", agentInfo.ADDRESS2),
                CreateElement("CITY", agentInfo.CITY),
                CreateElement("STATE", agentInfo.STATE),
                CreateElement("ZIP", agentInfo.ZIP),
                CreateElement("COUNTRY", agentInfo.COUNTRY),
                CreateElement("AGENTID", agentInfo.AGENTID),
                CreateElement("AGENCY", agentInfo.AGENCY),
                CreateElement("GA", agentInfo.GA),
                CreateElement("AITXT1", agentInfo.AITXT1),
                CreateElement("AITXT2", agentInfo.AITXT2),
                CreateElement("AITXT3", agentInfo.AITXT3),
                CreateElement("AINUM1", agentInfo.AINUM1),
                CreateElement("AINUM2", agentInfo.AINUM2),
                CreateElement("AINUM3", agentInfo.AINUM3),
                CreateElement("AIDT1", agentInfo.AIDT1),
                CreateElement("AIDT2", agentInfo.AIDT2),
                CreateElement("AIDT3", agentInfo.AIDT3)
            );
        }

        // Handles specific properties for PERSON
        static XElement CreatePersonElement(string elementName, Person person)
        {
            if (person.PERSONID == "1")
            {
                // Full set of properties for PERSONID == 1
                return new XElement(elementName,
                    CreateElement("PERSONID", person.PERSONID),
                    CreateElement("FIRSTNAME", person.FIRSTNAME),
                    CreateElement("MIDDLEINITIAL", person.MIDDLEINITIAL),
                    CreateElement("SUFFIX", person.SUFFIX),
                    CreateElement("LASTNAME", person.LASTNAME),
                    CreateElement("CLIENTID", person.CLIENTID),
                    CreateElement("MEMBERCOUNCIL", person.MEMBERCOUNCIL),
                    CreateElement("MEMBERSTATUS", person.MEMBERSTATUS),
                    CreateElement("INACTIVEFEEIND", person.INACTIVEFEEIND?.ToString()),
                    CreateElement("ADDRESS1", person.ADDRESS1),
                    CreateElement("ADDRESS2", person.ADDRESS2),
                    CreateElement("CITY", person.CITY),
                    CreateElement("STATE", person.STATE),
                    CreateElement("ZIP", person.ZIP),
                    CreateElement("STATEOFISSUE", person.STATEOFISSUE),
                    CreateElement("DATEOFBIRTH", person.DATEOFBIRTH),
                    CreateElement("ISSUEAGE", person.ISSUEAGE?.ToString()),
                    CreateElement("SEX", person.SEX),
                    CreateElement("PTXT1", person.PTXT1),
                    CreateElement("PTXT2", person.PTXT2),
                    CreateElement("PTXT3", person.PTXT3),
                    CreateElement("PNUM1", person.PNUM1),
                    CreateElement("PNUM2", person.PNUM2),
                    CreateElement("PNUM3", person.PNUM3),
                    CreateElement("PDT1", person.PDT1),
                    CreateElement("PDT2", person.PDT2),
                    CreateElement("PDT3", person.PDT3)
                );
            }
            else
            {
                // Limited properties for PERSONID != 1
                return new XElement(elementName,
                    CreateElement("PERSONID", person.PERSONID),
                    CreateElement("FIRSTNAME", person.FIRSTNAME),
                    CreateElement("MIDDLEINITIAL", person.MIDDLEINITIAL),
                    CreateElement("LASTNAME", person.LASTNAME),
                    CreateElement("CLIENTID", person.CLIENTID),
                    CreateElement("DATEOFBIRTH", person.DATEOFBIRTH),
                    CreateElement("ISSUEAGE", person.ISSUEAGE?.ToString()),
                    CreateElement("SEX", person.SEX)
                );
            }
        }

        static XElement CreateCaseDataElement(CaseData caseData)
        {
            var caseDataElement = new XElement("CASEDATA",
                new XAttribute("PERSONID", caseData.PERSONID ?? string.Empty),
                CreateElement("POLICYNUMBER", caseData.POLICYNUMBER),
                CreateElement("PRODUCT", caseData.PRODUCT),
                CreateElement("CLASS", caseData.CLASS),
                CreateElement("STATUS", caseData.STATUS),
                CreateRatingElement(caseData.RATING),  // Nested RATING section
                CreateElement("WLFACEOPTION", caseData.WLFACEOPTION),
                CreateElement("WLFACEPREMAMT", caseData.WLFACEPREMAMT.ToString()),
                CreateElement("WLPREMMODE", caseData.WLPREMMODE),
                CreateElement("WLPAYFORM", caseData.WLPAYFORM),
                CreateElement("TERMCONVERSION", caseData.TERMCONVERSION),
                CreateElement("GPOEXERCISE", caseData.GPOEXERCISE),
                CreateElement("PRINT", caseData.PRINT),
                CreateElement("ADDLOANINTTOBAL", caseData.ADDLOANINTTOBAL),
                CreateElement("WDRLTOLOANATCOSTBASIS", caseData.WDRLTOLOANATCOSTBASIS),
                CreateElement("ISSUEDATE", caseData.ISSUEDATE),
                CreateElement("PLANVERSIONID", caseData.PLANVERSIONID),
                CreateElement("PAYMENTYEARS", caseData.PAYMENTYEARS),
                CreateElement("CTXT3", caseData.CTXT3),
                CreateElement("CNUM1", caseData.CNUM1),
                CreateElement("CNUM2", caseData.CNUM2),
                CreateElement("CNUM3", caseData.CNUM3),
                CreateElement("CDT1", caseData.CDT1),
                CreateElement("CDT2", caseData.CDT2),
                CreateElement("CDT3", caseData.CDT3),
                CreatePolicyElement(caseData.POLICY),  // Nested POLICY section
                CreateInforceElement(caseData.INFORCE)  // Nested INFORCE section
            );

            // Handle the RIDER as an array or object
            if (caseData.RIDER != null)
            {
                foreach (var rider in caseData.RIDER)
                {
                    caseDataElement.Add(CreateRiderElement(rider));
                }
            }

            return caseDataElement;
        }

        static XElement CreateRatingElement(Rating rating)
        {
            return new XElement("RATING",
                CreateElement("TABLE1", rating.TABLE1),
                CreateElement("FLATEXTRA1", rating.FLATEXTRA1),
                CreateElement("FLATEXTRA1TOAGE", rating.FLATEXTRA1TOAGE),
                CreateElement("PERMANENTFLATEXTRA1", rating.PERMANENTFLATEXTRA1),
                CreateElement("TABLE2", rating.TABLE2),
                CreateElement("FLATEXTRA2", rating.FLATEXTRA2),
                CreateElement("FLATEXTRA2TOAGE", rating.FLATEXTRA2TOAGE),
                CreateElement("PERMANENTFLATEXTRA2", rating.PERMANENTFLATEXTRA2?.ToString())
            );
        }

        static XElement CreatePolicyElement(Policy policy)
        {
            return new XElement("POLICY",
                CreateElement("CODE", policy.CODE)
            );
        }

        static XElement CreateInforceElement(Inforce inforce)
        {
            return new XElement("INFORCE",
                CreateElement("APBCURRENTDEATHBENEFIT", inforce.APBCURRENTDEATHBENEFIT.ToString()),
                CreateElement("ANNUALINCREASEAMT", inforce.ANNUALINCREASEAMT.ToString()),
                CreateElement("ADDAVAILABLECONV", inforce.ADDAVAILABLECONV.ToString()),
                CreateElement("AMTAVAILABLECONV", inforce.AMTAVAILABLECONV.ToString()),
                CreateElement("PUADEATHBENEFIT", inforce.PUADEATHBENEFIT.ToString()),
                CreateElement("BASELTDPUADEPOSIT", inforce.BASELTDPUADEPOSIT.ToString()),
                CreateElement("BASEYTDPUADEPOSIT", inforce.BASEYTDPUADEPOSIT.ToString()),
                CreateElement("SDPUALTDPUADEPOSIT", inforce.SDPUALTDPUADEPOSIT.ToString()),
                CreateElement("SDPUAYTDPUADEPOSIT", inforce.SDPUAYTDPUADEPOSIT.ToString()),
                CreateElement("MADPUALTDPUADEPOSIT", inforce.MADPUALTDPUADEPOSIT.ToString()),
                CreateElement("MADPUAYTDPUADEPOSIT", inforce.MADPUAYTDPUADEPOSIT.ToString()),
                CreateElement("DATAASOFDATE", inforce.DATAASOFDATE),
                CreateElement("ISSUECLASS", inforce.ISSUECLASS),
                CreateElement("ACCOUNTVALUE", inforce.ACCOUNTVALUE.ToString()),
                CreateElement("PAIDTODATE", inforce.PAIDTODATE),
                CreateElement("CUMULATIVEPREMIUM", inforce.CUMULATIVEPREMIUM),
                CreateElement("CUMULATIVEWTHDRL", inforce.CUMULATIVEWTHDRL),
                CreateElement("PUACASHVALUE", inforce.PUACASHVALUE.ToString()),
                CreateElement("DIVACCUMS", inforce.DIVACCUMS.ToString()),
                CreateElement("POLICYNUMBER", inforce.POLICYNUMBER),
                CreateElement("STANDARDLOAN", inforce.STANDARDLOAN.ToString()),
                CreateElement("TEN35AMT", inforce.TEN35AMT.ToString()),
                CreateElement("SLIPUADEATHBENEFIT", inforce.SLIPUADEATHBENEFIT),
                CreateElement("SDPUADEATHBENEFIT", inforce.SDPUADEATHBENEFIT),
                CreateElement("APBPUADEATHBENEFIT", inforce.APBPUADEATHBENEFIT.ToString()),
                CreateElement("ADPUADEATHBENEFIT", inforce.ADPUADEATHBENEFIT),
                CreateElement("MADPUADEATHBENEFIT", inforce.MADPUADEATHBENEFIT),
                CreateElement("PUADEPOSITLIMIT", inforce.PUADEPOSITLIMIT),
                CreateElement("LIFETODATEPUADEPOSIT", inforce.LIFETODATEPUADEPOSIT),
                CreateElement("DBPURCHASEBYPUARIDERDIVS", inforce.DBPURCHASEBYPUARIDERDIVS),
                CreateElement("G7PAYSTARTDATE", inforce.G7PAYSTARTDATE),
                CreateElement("G7PAYANNUALPREMIUM", inforce.G7PAYANNUALPREMIUM.ToString()),
                CreateElement("G7PAYPREMIUMPAID", inforce.G7PAYPREMIUMPAID),
                CreateElement("CVASOFLASTMATCHANGE", inforce.CVASOFLASTMATCHANGE),
                CreateElement("MEC", inforce.MEC),
                CreateElement("EXEMPT", inforce.EXEMPT),
                CreateElement("ITXT1", inforce.ITXT1),
                CreateElement("ITXT2", inforce.ITXT2),
                CreateElement("ITXT3", inforce.ITXT3),
                CreateElement("INUM1", inforce.INUM1),
                CreateElement("INUM2", inforce.INUM2),
                CreateElement("INUM3", inforce.INUM3),
                CreateElement("IDT1", inforce.IDT1),
                CreateElement("IDT2", inforce.IDT2),
                CreateElement("IDT3", inforce.IDT3)
            );
        }

        static XElement CreateRiderElement(Rider rider)
        {
            return new XElement("RIDER",
                new XAttribute("PERSONID", rider.PERSONID ?? string.Empty),
                CreateElement("CODE", rider.CODE),
                CreateElement("SEX", rider.SEX),
                CreateElement("AMOUNT", rider.AMOUNT.ToString()),
                CreateElement("ISSAGE", rider.ISSAGE.ToString()),
                CreateRatingElement(rider.RATING)  // Nested Rating inside Rider
            );
        }

        static XElement CreateRelationElement(string elementName, Relation relation, int relationIndex)
        {
            if (relationIndex == 1)
            {
                // Full set of properties for the first relation
                return new XElement(elementName,
                    CreateElement("ORIGINATINGPERSONID", relation.ORIGINATINGPERSONID.ToString()),
                    CreateElement("RELATEDPERSONID", relation.RELATEDPERSONID.ToString()),
                    CreateElement("ROLECODE", relation.ROLECODE.ToString()),
                    CreateElement("RTXT1", relation.RTXT1),
                    CreateElement("RTXT2", relation.RTXT2),
                    CreateElement("RTXT3", relation.RTXT3),
                    CreateElement("RNUM1", relation.RNUM1),
                    CreateElement("RNUM2", relation.RNUM2),
                    CreateElement("RNUM3", relation.RNUM3),
                    CreateElement("RDT1", relation.RDT1),
                    CreateElement("RDT2", relation.RDT2),
                    CreateElement("RDT3", relation.RDT3)
                );
            }
            else
            {
                // Limited properties for subsequent relations
                return new XElement(elementName,
                    CreateElement("ORIGINATINGPERSONID", relation.ORIGINATINGPERSONID.ToString()),
                    CreateElement("RELATEDPERSONID", relation.RELATEDPERSONID.ToString()),
                    CreateElement("ROLECODE", relation.ROLECODE.ToString())
                );
            }
        }

        // Helper method to create elements with self-closed tags if the value is empty
        static XElement CreateElement(string elementName, string value)
        {
            // If the value is null or empty, return a self-closed tag
            return string.IsNullOrWhiteSpace(value) ? new XElement(elementName) : new XElement(elementName, value);
        }
    }

    // Root class and other supporting classes remain the same
    public class Root
    {
        [JsonProperty("DATA")]
        public Data Data { get; set; }
    }

    public class Data
    {
        [JsonProperty("Illustration_System")]
        public string IllustrationSystem { get; set; }

        [JsonProperty("AGENTINFORMATION")]
        public AgentInformation AgentInformation { get; set; }

        [JsonProperty("PERSON")]
        public List<Person> Persons { get; set; }

        [JsonProperty("RELATION")]
        public List<Relation> Relations { get; set; }

        [JsonProperty("CASEDATA")]
        public CaseData CaseData { get; set; }
    }

    public class AgentInformation
    {
        public string FIRSTNAME { get; set; }
        public string MIDDLENAME { get; set; }
        public string LASTNAME { get; set; }
        public string ADDRESS1 { get; set; }
        public string ADDRESS2 { get; set; }
        public string CITY { get; set; }
        public string STATE { get; set; }
        public string ZIP { get; set; }
        public string COUNTRY { get; set; }
        public string AGENTID { get; set; }
        public string AGENCY { get; set; }
        public string GA { get; set; }
        public string AITXT1 { get; set; }
        public string AITXT2 { get; set; }
        public string AITXT3 { get; set; }
        public string AINUM1 { get; set; }
        public string AINUM2 { get; set; }
        public string AINUM3 { get; set; }
        public string AIDT1 { get; set; }
        public string AIDT2 { get; set; }
        public string AIDT3 { get; set; }
    }

    public class Person
    {
        [JsonProperty("@PERSONID")]
        public string PERSONID { get; set; }

        public string FIRSTNAME { get; set; }
        public string MIDDLEINITIAL { get; set; }
        public string SUFFIX { get; set; }
        public string LASTNAME { get; set; }
        public string CLIENTID { get; set; }
        public string MEMBERCOUNCIL { get; set; }
        public string MEMBERSTATUS { get; set; }
        public int? INACTIVEFEEIND { get; set; }
        public string ADDRESS1 { get; set; }
        public string ADDRESS2 { get; set; }
        public string CITY { get; set; }
        public string STATE { get; set; }
        public string ZIP { get; set; }
        public string STATEOFISSUE { get; set; }
        public string DATEOFBIRTH { get; set; }
        public int? ISSUEAGE { get; set; }
        public string SEX { get; set; }
        public string PTXT1 { get; set; }
        public string PTXT2 { get; set; }
        public string PTXT3 { get; set; }
        public string PNUM1 { get; set; }
        public string PNUM2 { get; set; }
        public string PNUM3 { get; set; }
        public string PDT1 { get; set; }
        public string PDT2 { get; set; }
        public string PDT3 { get; set; }
    }

    public class Relation
    {
        public int ORIGINATINGPERSONID { get; set; }
        public int RELATEDPERSONID { get; set; }
        public int ROLECODE { get; set; }
        public string RTXT1 { get; set; }
        public string RTXT2 { get; set; }
        public string RTXT3 { get; set; }
        public string RNUM1 { get; set; }
        public string RNUM2 { get; set; }
        public string RNUM3 { get; set; }
        public string RDT1 { get; set; }
        public string RDT2 { get; set; }
        public string RDT3 { get; set; }
    }

    public class CaseData
    {
        [JsonProperty("@PERSONID")]
        public string PERSONID { get; set; }

        public string POLICYNUMBER { get; set; }
        public string PRODUCT { get; set; }
        public string CLASS { get; set; }
        public string STATUS { get; set; }
        public Rating RATING { get; set; }
        public string WLFACEOPTION { get; set; }
        public decimal WLFACEPREMAMT { get; set; }
        public string WLPREMMODE { get; set; }
        public string WLPAYFORM { get; set; }
        public string TERMCONVERSION { get; set; }
        public string GPOEXERCISE { get; set; }
        public string PRINT { get; set; }
        public string ADDLOANINTTOBAL { get; set; }
        public string WDRLTOLOANATCOSTBASIS { get; set; }
        public string ISSUEDATE { get; set; }
        public string PLANVERSIONID { get; set; }
        public string PAYMENTYEARS { get; set; }
        public string CTXT3 { get; set; }
        public string CNUM1 { get; set; }
        public string CNUM2 { get; set; }
        public string CNUM3 { get; set; }
        public string CDT1 { get; set; }
        public string CDT2 { get; set; }
        public string CDT3 { get; set; }
        public Policy POLICY { get; set; }
        public Inforce INFORCE { get; set; }

        // Handles multiple or single RIDER objects
        [JsonProperty("RIDER")]
        [JsonConverter(typeof(RiderConverter))]
        public List<Rider> RIDER { get; set; }
    }

    public class Rating
    {
        public string TABLE1 { get; set; }
        public string FLATEXTRA1 { get; set; }
        public string FLATEXTRA1TOAGE { get; set; }
        public string PERMANENTFLATEXTRA1 { get; set; }
        public string TABLE2 { get; set; }
        public string FLATEXTRA2 { get; set; }
        public string FLATEXTRA2TOAGE { get; set; }
        public decimal? PERMANENTFLATEXTRA2 { get; set; }
    }

    public class Policy
    {
        public string CODE { get; set; }
    }

    public class Inforce
    {
        public decimal APBCURRENTDEATHBENEFIT { get; set; }
        public decimal ANNUALINCREASEAMT { get; set; }
        public decimal ADDAVAILABLECONV { get; set; }
        public decimal AMTAVAILABLECONV { get; set; }
        public decimal PUADEATHBENEFIT { get; set; }
        public decimal BASELTDPUADEPOSIT { get; set; }
        public decimal BASEYTDPUADEPOSIT { get; set; }
        public decimal SDPUALTDPUADEPOSIT { get; set; }
        public decimal SDPUAYTDPUADEPOSIT { get; set; }
        public decimal MADPUALTDPUADEPOSIT { get; set; }
        public decimal MADPUAYTDPUADEPOSIT { get; set; }
        public string DATAASOFDATE { get; set; }
        public string ISSUECLASS { get; set; }
        public decimal ACCOUNTVALUE { get; set; }
        public string PAIDTODATE { get; set; }
        public string CUMULATIVEPREMIUM { get; set; }
        public string CUMULATIVEWTHDRL { get; set; }
        public decimal PUACASHVALUE { get; set; }
        public decimal DIVACCUMS { get; set; }
        public string POLICYNUMBER { get; set; }
        public decimal STANDARDLOAN { get; set; }
        public decimal TEN35AMT { get; set; }
        public string SLIPUADEATHBENEFIT { get; set; }
        public string SDPUADEATHBENEFIT { get; set; }
        public decimal APBPUADEATHBENEFIT { get; set; }
        public string ADPUADEATHBENEFIT { get; set; }
        public string MADPUADEATHBENEFIT { get; set; }
        public string PUADEPOSITLIMIT { get; set; }
        public string LIFETODATEPUADEPOSIT { get; set; }
        public string DBPURCHASEBYPUARIDERDIVS { get; set; }
        public string G7PAYSTARTDATE { get; set; }
        public decimal G7PAYANNUALPREMIUM { get; set; }
        public string G7PAYPREMIUMPAID { get; set; }
        public string CVASOFLASTMATCHANGE { get; set; }
        public string MEC { get; set; }
        public string EXEMPT { get; set; }
        public string ITXT1 { get; set; }
        public string ITXT2 { get; set; }
        public string ITXT3 { get; set; }
        public string INUM1 { get; set; }
        public string INUM2 { get; set; }
        public string INUM3 { get; set; }
        public string IDT1 { get; set; }
        public string IDT2 { get; set; }
        public string IDT3 { get; set; }
    }

    public class Rider
    {
        [JsonProperty("@PERSONID")]
        public string PERSONID { get; set; }

        public string CODE { get; set; }
        public string SEX { get; set; }
        public decimal AMOUNT { get; set; }
        public int ISSAGE { get; set; }
        public Rating RATING { get; set; }
    }

    public class RiderConverter : JsonConverter
    {
        public override bool CanConvert(Type objectType)
        {
            return (objectType == typeof(List<Rider>));
        }

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            var riders = new List<Rider>();

            if (reader.TokenType == JsonToken.StartArray)
            {
                riders = serializer.Deserialize<List<Rider>>(reader);
            }
            else if (reader.TokenType == JsonToken.StartObject)
            {
                var singleRider = serializer.Deserialize<Rider>(reader);
                riders.Add(singleRider);
            }

            return riders;
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            var riders = value as List<Rider>;
            if (riders.Count == 1)
            {
                serializer.Serialize(writer, riders[0]);
            }
            else
            {
                serializer.Serialize(writer, riders);
            }
        }
    }
}
