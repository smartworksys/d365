using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

namespace KOFC_Navigator_Integration
{
    public class InforcePolicyData
    {
        public string GetNavInforcePolicyData(string responseJsonObj)
        {
            // Replace empty arrays with empty strings
            string jsonData = responseJsonObj.Replace(":[]", ": \"\"");

            try
            {
                // Deserialize JSON into Root object
                var root = JsonConvert.DeserializeObject<Root>(jsonData);

                // Create XML
                var xmlDoc = new XDocument(
                    new XDeclaration("1.0", "UTF-8", "yes"),
                    new XElement("FIPSCOLINKFILE",
                        new XAttribute("VERSION", "1.00"),
                        CreateDataElement(root.Data)
                    )
                );

                // Return XML as string
                return xmlDoc.ToString();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred during JSON to XML conversion: {ex.Message}");
                return null;
            }
        }

        static XElement CreateDataElement(Data data)
        {
            var elements = new List<object>();

            if (!string.IsNullOrEmpty(data.IllustrationSystem))
                elements.Add(new XElement("Illustration_System", data.IllustrationSystem));

            if (data.AgentInformation != null)
                elements.Add(CreateAgentInformationElement(data.AgentInformation));

            if (data.Persons != null)
            {
                // Sort Persons by PERSONID with PERSONID = 1 first
                var sortedPersons = data.Persons.OrderBy(p => p.PERSONID == "1" ? 0 : 1).ThenBy(p => p.PERSONID);
                elements.AddRange(sortedPersons.Select(p => CreatePersonElement("PERSON", p)));
            }

            if (data.Relations != null)
            {
                // Sort Relations by ORIGINATINGPERSONID, with ORIGINATINGPERSONID = 1 first
                var sortedRelations = data.Relations.OrderBy(r => r.ORIGINATINGPERSONID == 1 ? 0 : 1).ThenBy(r => r.ORIGINATINGPERSONID);
                elements.AddRange(sortedRelations.Select((r, index) => CreateRelationElement("RELATION", r, index + 1)));
            }

            if (data.CaseData != null)
                elements.Add(CreateCaseDataElement(data.CaseData));

            return new XElement("DATA", elements);
        }

        // Handles specific properties for AGENTINFORMATION
        static XElement CreateAgentInformationElement(AgentInformation agentInfo)
        {
            return new XElement("AGENTINFORMATION",
                new XElement("FIRSTNAME", agentInfo.FIRSTNAME ?? string.Empty),
                new XElement("MIDDLENAME", agentInfo.MIDDLENAME ?? string.Empty),
                new XElement("LASTNAME", agentInfo.LASTNAME ?? string.Empty),
                new XElement("ADDRESS1", agentInfo.ADDRESS1 ?? string.Empty),
                new XElement("ADDRESS2", agentInfo.ADDRESS2 ?? string.Empty),
                new XElement("CITY", agentInfo.CITY ?? string.Empty),
                new XElement("STATE", agentInfo.STATE ?? string.Empty),
                new XElement("ZIP", agentInfo.ZIP ?? string.Empty),
                new XElement("COUNTRY", agentInfo.COUNTRY ?? string.Empty),
                new XElement("AGENTID", agentInfo.AGENTID ?? string.Empty),
                new XElement("AGENCY", agentInfo.AGENCY ?? string.Empty),
                new XElement("GA", agentInfo.GA ?? string.Empty),
                new XElement("AITXT1", agentInfo.AITXT1 ?? string.Empty),
                new XElement("AITXT2", agentInfo.AITXT2 ?? string.Empty),
                new XElement("AITXT3", agentInfo.AITXT3 ?? string.Empty),
                new XElement("AINUM1", agentInfo.AINUM1 ?? string.Empty),
                new XElement("AINUM2", agentInfo.AINUM2 ?? string.Empty),
                new XElement("AINUM3", agentInfo.AINUM3 ?? string.Empty),
                new XElement("AIDT1", agentInfo.AIDT1 ?? string.Empty),
                new XElement("AIDT2", agentInfo.AIDT2 ?? string.Empty),
                new XElement("AIDT3", agentInfo.AIDT3 ?? string.Empty)
            );
        }

        // Handles specific properties for PERSON
        static XElement CreatePersonElement(string elementName, Person person)
        {
            if (person.PERSONID == "1")
            {
                // Full set of properties for Person 1
                return new XElement(elementName,
                    new XElement("PERSONID", person.PERSONID ?? string.Empty),
                    new XElement("FIRSTNAME", person.FIRSTNAME ?? string.Empty),
                    new XElement("MIDDLEINITIAL", person.MIDDLEINITIAL ?? string.Empty),
                    new XElement("SUFFIX", person.SUFFIX ?? string.Empty),
                    new XElement("LASTNAME", person.LASTNAME ?? string.Empty),
                    new XElement("CLIENTID", person.CLIENTID ?? string.Empty),
                    new XElement("MEMBERCOUNCIL", person.MEMBERCOUNCIL ?? string.Empty),
                    new XElement("MEMBERSTATUS", person.MEMBERSTATUS ?? string.Empty),
                    new XElement("INACTIVEFEEIND", person.INACTIVEFEEIND ?? string.Empty),
                    new XElement("ADDRESS1", person.ADDRESS1 ?? string.Empty),
                    new XElement("ADDRESS2", person.ADDRESS2 ?? string.Empty),
                    new XElement("CITY", person.CITY ?? string.Empty),
                    new XElement("STATE", person.STATE ?? string.Empty),
                    new XElement("ZIP", person.ZIP ?? string.Empty),
                    new XElement("STATEOFISSUE", person.STATEOFISSUE ?? string.Empty),
                    new XElement("DATEOFBIRTH", person.DATEOFBIRTH ?? string.Empty),
                    new XElement("ISSUE_AGE", person.ISSUE_AGE ?? string.Empty),
                    new XElement("SEX", person.SEX ?? string.Empty),
                    new XElement("PTXT1", person.PTXT1 ?? string.Empty),
                    new XElement("PTXT2", person.PTXT2 ?? string.Empty),
                    new XElement("PTXT3", person.PTXT3 ?? string.Empty),
                    new XElement("PNUM1", person.PNUM1 ?? string.Empty),
                    new XElement("PNUM2", person.PNUM2 ?? string.Empty),
                    new XElement("PNUM3", person.PNUM3 ?? string.Empty),
                    new XElement("PDT1", person.PDT1 ?? string.Empty),
                    new XElement("PDT2", person.PDT2 ?? string.Empty),
                    new XElement("PDT3", person.PDT3 ?? string.Empty)
                );
            }
            else
            {
                // Limited properties for Person 2, 3, 4, etc.
                return new XElement(elementName,
                    new XElement("PERSONID", person.PERSONID ?? string.Empty),
                    new XElement("FIRSTNAME", person.FIRSTNAME ?? string.Empty),
                    new XElement("MIDDLEINITIAL", person.MIDDLEINITIAL ?? string.Empty),
                    new XElement("LASTNAME", person.LASTNAME ?? string.Empty),
                    new XElement("CLIENTID", person.CLIENTID ?? string.Empty),
                    new XElement("DATEOFBIRTH", person.DATEOFBIRTH ?? string.Empty),
                    new XElement("ISSUEAGE", person.ISSUEAGE ?? string.Empty),
                    new XElement("SEX", person.SEX ?? string.Empty)
                );
            }
        }

        // Handles specific properties for CASEDATA including nested objects like RATING, POLICY, and INFORCE
        static XElement CreateCaseDataElement(CaseData caseData)
        {
            return new XElement("CASEDATA",
                new XAttribute("PERSONID", caseData.PERSONID ?? string.Empty),
                new XElement("POLICYNUMBER", caseData.POLICYNUMBER ?? string.Empty),
                new XElement("PRODUCT", caseData.PRODUCT ?? string.Empty),
                new XElement("CLASS", caseData.CLASS ?? string.Empty),
                new XElement("STATUS", caseData.STATUS ?? string.Empty),
                CreateRatingElement(caseData.RATING),  // Nested RATING section
                new XElement("WLFACEOPTION", caseData.WLFACEOPTION ?? string.Empty),
                new XElement("WLFACEPREMAMT", caseData.WLFACEPREMAMT),
                new XElement("WLPREMMODE", caseData.WLPREMMODE ?? string.Empty),
                new XElement("WLPAYFORM", caseData.WLPAYFORM ?? string.Empty),
                new XElement("TERMCONVERSION", caseData.TERMCONVERSION ?? string.Empty),
                new XElement("GPOEXERCISE", caseData.GPOEXERCISE ?? string.Empty),
                new XElement("PRINT", caseData.PRINT ?? string.Empty),
                new XElement("ADDLOANINTTOBAL", caseData.ADDLOANINTTOBAL ?? string.Empty),
                new XElement("WDRLTOLOANATCOSTBASIS", caseData.WDRLTOLOANATCOSTBASIS ?? string.Empty),
                new XElement("ISSUEDATE", caseData.ISSUEDATE ?? string.Empty),
                new XElement("PLANVERSIONID", caseData.PLANVERSIONID ?? string.Empty),
                new XElement("PAYMENTYEARS", caseData.PAYMENTYEARS ?? string.Empty),
                new XElement("CTXT3", caseData.CTXT3 ?? string.Empty),
                new XElement("CNUM1", caseData.CNUM1 ?? string.Empty),
                new XElement("CNUM2", caseData.CNUM2 ?? string.Empty),
                new XElement("CNUM3", caseData.CNUM3 ?? string.Empty),
                new XElement("CDT1", caseData.CDT1 ?? string.Empty),
                new XElement("CDT2", caseData.CDT2 ?? string.Empty),
                new XElement("CDT3", caseData.CDT3 ?? string.Empty),
                CreatePolicyElement(caseData.POLICY),  // Nested POLICY section
                CreateInforceElement(caseData.INFORCE),  // Nested INFORCE section
                CreateRiderElement(caseData.RIDER)  // Nested RIDER section
            );
        }

        static XElement CreateRatingElement(Rating rating)
        {
            return new XElement("RATING",
                new XElement("TABLE1", rating.TABLE1 ?? string.Empty),
                new XElement("FLATEXTRA1", rating.FLATEXTRA1 ?? string.Empty),
                new XElement("FLATEXTRA1TOAGE", rating.FLATEXTRA1TOAGE ?? string.Empty),
                new XElement("PERMANENTFLATEXTRA1", rating.PERMANENTFLATEXTRA1 ?? string.Empty),
                new XElement("TABLE2", rating.TABLE2 ?? string.Empty),
                new XElement("FLATEXTRA2", rating.FLATEXTRA2 ?? string.Empty),
                new XElement("FLATEXTRA2TOAGE", rating.FLATEXTRA2TOAGE ?? string.Empty),
                new XElement("PERMANENTFLATEXTRA2", rating.PERMANENTFLATEXTRA2)
            );
        }

        static XElement CreatePolicyElement(Policy policy)
        {
            return new XElement("POLICY",
                new XElement("CODE", policy.CODE ?? string.Empty)
            );
        }

        static XElement CreateInforceElement(Inforce inforce)
        {
            return new XElement("INFORCE",
                new XElement("APBCURRENTDEATHBENEFIT", inforce.APBCURRENTDEATHBENEFIT),
                new XElement("ANNUALINCREASEAMT", inforce.ANNUALINCREASEAMT),
                new XElement("ADDAVAILABLECONV", inforce.ADDAVAILABLECONV),
                new XElement("AMTAVAILABLECONV", inforce.AMTAVAILABLECONV),
                new XElement("PUADEATHBENEFIT", inforce.PUADEATHBENEFIT),
                new XElement("BASELTDPUADEPOSIT", inforce.BASELTDPUADEPOSIT),
                new XElement("BASEYTDPUADEPOSIT", inforce.BASEYTDPUADEPOSIT),
                new XElement("SDPUALTDPUADEPOSIT", inforce.SDPUALTDPUADEPOSIT),
                new XElement("SDPUAYTDPUADEPOSIT", inforce.SDPUAYTDPUADEPOSIT),
                new XElement("MADPUALTDPUADEPOSIT", inforce.MADPUALTDPUADEPOSIT),
                new XElement("MADPUAYTDPUADEPOSIT", inforce.MADPUAYTDPUADEPOSIT),
                new XElement("DATAASOFDATE", inforce.DATAASOFDATE ?? string.Empty),
                new XElement("ISSUECLASS", inforce.ISSUECLASS ?? string.Empty),
                new XElement("ACCOUNTVALUE", inforce.ACCOUNTVALUE),
                new XElement("PAIDTODATE", inforce.PAIDTODATE ?? string.Empty),
                new XElement("CUMULATIVEPREMIUM", inforce.CUMULATIVEPREMIUM ?? string.Empty),
                new XElement("CUMULATIVEWTHDRL", inforce.CUMULATIVEWTHDRL ?? string.Empty),
                new XElement("PUACASHVALUE", inforce.PUACASHVALUE),
                new XElement("DIVACCUMS", inforce.DIVACCUMS),
                new XElement("POLICYNUMBER", inforce.POLICYNUMBER ?? string.Empty),
                new XElement("STANDARDLOAN", inforce.STANDARDLOAN),
                new XElement("TEN35AMT", inforce.TEN35AMT),
                new XElement("SLIPUADEATHBENEFIT", inforce.SLIPUADEATHBENEFIT ?? string.Empty),
                new XElement("SDPUADEATHBENEFIT", inforce.SDPUADEATHBENEFIT ?? string.Empty),
                new XElement("APBPUADEATHBENEFIT", inforce.APBPUADEATHBENEFIT),
                new XElement("ADPUADEATHBENEFIT", inforce.ADPUADEATHBENEFIT ?? string.Empty),
                new XElement("MADPUADEATHBENEFIT", inforce.MADPUADEATHBENEFIT ?? string.Empty),
                new XElement("PUADEPOSITLIMIT", inforce.PUADEPOSITLIMIT ?? string.Empty),
                new XElement("LIFETODATEPUADEPOSIT", inforce.LIFETODATEPUADEPOSIT ?? string.Empty),
                new XElement("DBPURCHASEBYPUARIDERDIVS", inforce.DBPURCHASEBYPUARIDERDIVS ?? string.Empty),
                new XElement("G7PAYSTARTDATE", inforce.G7PAYSTARTDATE ?? string.Empty),
                new XElement("G7PAYANNUALPREMIUM", inforce.G7PAYANNUALPREMIUM),
                new XElement("G7PAYPREMIUMPAID", inforce.G7PAYPREMIUMPAID ?? string.Empty),
                new XElement("CVASOFLASTMATCHANGE", inforce.CVASOFLASTMATCHANGE ?? string.Empty),
                new XElement("MEC", inforce.MEC ?? string.Empty),
                new XElement("EXEMPT", inforce.EXEMPT ?? string.Empty),
                new XElement("ITXT1", inforce.ITXT1 ?? string.Empty),
                new XElement("ITXT2", inforce.ITXT2 ?? string.Empty),
                new XElement("ITXT3", inforce.ITXT3 ?? string.Empty),
                new XElement("INUM1", inforce.INUM1 ?? string.Empty),
                new XElement("INUM2", inforce.INUM2 ?? string.Empty),
                new XElement("INUM3", inforce.INUM3 ?? string.Empty),
                new XElement("IDT1", inforce.IDT1 ?? string.Empty),
                new XElement("IDT2", inforce.IDT2 ?? string.Empty),
                new XElement("IDT3", inforce.IDT3 ?? string.Empty)
            );
        }

        static XElement CreateRiderElement(Rider rider)
        {
            return new XElement("RIDER",
                new XAttribute("PERSONID", rider.PERSONID ?? string.Empty),
                new XElement("CODE", rider.CODE ?? string.Empty),
                new XElement("SEX", rider.SEX ?? string.Empty),
                new XElement("AMOUNT", rider.AMOUNT),
                new XElement("ISSAGE", rider.ISSAGE),
                CreateRatingElement(rider.RATING)  // Nested Rating inside Rider
            );
        }

        static XElement CreateRelationElement(string elementName, Relation relation, int relationIndex)
        {
            if (relationIndex == 1)
            {
                // Full set of properties for the first relation
                return new XElement(elementName,
                    new XElement("ORIGINATINGPERSONID", relation.ORIGINATINGPERSONID),
                    new XElement("RELATEDPERSONID", relation.RELATEDPERSONID),
                    new XElement("ROLECODE", relation.ROLECODE),
                    new XElement("RTXT1", relation.RTXT1 ?? string.Empty),
                    new XElement("RTXT2", relation.RTXT2 ?? string.Empty),
                    new XElement("RTXT3", relation.RTXT3 ?? string.Empty),
                    new XElement("RNUM1", relation.RNUM1 ?? string.Empty),
                    new XElement("RNUM2", relation.RNUM2 ?? string.Empty),
                    new XElement("RNUM3", relation.RNUM3 ?? string.Empty),
                    new XElement("RDT1", relation.RDT1 ?? string.Empty),
                    new XElement("RDT2", relation.RDT2 ?? string.Empty),
                    new XElement("RDT3", relation.RDT3 ?? string.Empty)
                );
            }
            else
            {
                // Limited properties for subsequent relations
                return new XElement(elementName,
                    new XElement("ORIGINATINGPERSONID", relation.ORIGINATINGPERSONID),
                    new XElement("RELATEDPERSONID", relation.RELATEDPERSONID),
                    new XElement("ROLECODE", relation.ROLECODE)
                );
            }
        }
    }
}
