using System;
using System.Linq;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;
using System.Xml.Linq;

namespace JsonToXmlConverter
{
    class Program
    {
        static void Main(string[] args)
        {
            string json = @"
            {
                ""DATA"": {
                    ""Illustration_System"": ""Navigator"",
                    ""AGENTINFORMATION"": {
                        ""FIRSTNAME"": [],
                        ""MIDDLENAME"": [],
                        ""LASTNAME"": [],
                        ""ADDRESS1"": [],
                        ""ADDRESS2"": [],
                        ""CITY"": [],
                        ""STATE"": [],
                        ""ZIP"": [],
                        ""COUNTRY"": [],
                        ""AGENTID"": [],
                        ""AGENCY"": [],
                        ""GA"": [],
                        ""AITXT1"": [],
                        ""AITXT2"": [],
                        ""AITXT3"": [],
                        ""AINUM1"": [],
                        ""AINUM2"": [],
                        ""AINUM3"": [],
                        ""AIDT1"": [],
                        ""AIDT2"": [],
                        ""AIDT3"": []
                    },
                    ""PERSON"": [
                        {
                            ""@PERSONID"": ""2"",
                            ""FIRSTNAME"": ""Alyson"",
                            ""MIDDLEINITIAL"": [],
                            ""LASTNAME"": ""Pfeiffer"",
                            ""CLIENTID"": ""0066939017"",
                            ""DATEOFBIRTH"": ""19800429"",
                            ""ISSUEAGE"": 40,
                            ""SEX"": ""Female""
                        },
                        {
                            ""@PERSONID"": ""1"",
                            ""FIRSTNAME"": ""John"",
                            ""MIDDLEINITIAL"": ""S"",
                            ""SUFFIX"": [],
                            ""LASTNAME"": ""Pfeiffer"",
                            ""CLIENTID"": ""002671360C"",
                            ""MEMBERCOUNCIL"": ""04907"",
                            ""MEMBERSTATUS"": ""Insurance"",
                            ""INACTIVEFEEIND"": 0,
                            ""ADDRESS1"": ""42 Appleby Ave"",
                            ""ADDRESS2"": [],
                            ""CITY"": ""Spotswood"",
                            ""STATE"": ""NJ"",
                            ""ZIP"": ""08884 1120"",
                            ""STATEOFISSUE"": ""NJ"",
                            ""DATEOFBIRTH"": ""19730911"",
                            ""ISSUEAGE"": 40,
                            ""SEX"": ""Male""
                        }
                    ],
                    ""RELATION"": [
                        {
                            ""ORIGINATINGPERSONID"": 1,
                            ""RELATEDPERSONID"": 2,
                            ""ROLECODE"": 1
                        },
                        {
                            ""ORIGINATINGPERSONID"": 2,
                            ""RELATEDPERSONID"": 1,
                            ""ROLECODE"": 1
                        }
                    ],
                    ""CASEDATA"": {
                        ""@PERSONID"": ""1"",
                        ""POLICYNUMBER"": ""0104410069"",
                        ""PRODUCT"": ""801UX"",
                        ""CLASS"": ""Non-Tobacco"",
                        ""STATUS"": ""Premium Paying"",
                        ""RATING"": {
                            ""TABLE1"": [],
                            ""FLATEXTRA1"": [],
                            ""FLATEXTRA1TOAGE"": [],
                            ""PERMANENTFLATEXTRA1"": [],
                            ""TABLE2"": [],
                            ""FLATEXTRA2"": [],
                            ""FLATEXTRA2TOAGE"": [],
                            ""PERMANENTFLATEXTRA2"": 0.0
                        },
                        ""WLFACEOPTION"": ""INPFACE"",
                        ""WLFACEPREMAMT"": 100000.0,
                        ""WLPREMMODE"": ""Quarterly"",
                        ""WLPAYFORM"": ""Direct Bill"",
                        ""ISSUEDATE"": ""20140128"",
                        ""PLANVERSIONID"": ""XX"",
                        ""POLICY"": {
                            ""CODE"": ""Purchase PUA""
                        },
                        ""INFORCE"": {
                            ""APBCURRENTDEATHBENEFIT"": 0,
                            ""ANNUALINCREASEAMT"": 0,
                            ""PUADEATHBENEFIT"": 978.76,
                            ""ACCOUNTVALUE"": 986.92,
                            ""PAIDTODATE"": ""20240728"",
                            ""PUACASHVALUE"": 188.73,
                            ""POLICYNUMBER"": ""0104410069"",
                            ""STANDARDLOAN"": 10899.36
                        }
                    },
                    ""RIDER"": [
                        {
                            ""@PERSONID"": ""1"",
                            ""CODE"": ""TIADBU"",
                            ""CLASS"": ""Non-Tobacco"",
                            ""SEX"": ""Male"",
                            ""AMOUNT"": 0,
                            ""UNITS"": 0.0,
                            ""ISSAGE"": 40,
                            ""CVGDIVOPT"": ""Purchase PUA"",
                            ""CVGPREM"": 0.0,
                            ""RATING"": {
                                ""TABLE"": ""1"",
                                ""TEMPORARYFLATTOAGE"": ""20140128""
                            }
                        },
                        {
                            ""@PERSONID"": ""2"",
                            ""CODE"": ""84P5U"",
                            ""CLASS"": ""Ultra Premier Non-Tobacco"",
                            ""SEX"": ""Female"",
                            ""AMOUNT"": 187,
                            ""UNITS"": 187.0,
                            ""ISSAGE"": 34,
                            ""CVGDIVOPT"": ""Purchase PUA"",
                            ""CVGPREM"": 359.04,
                            ""RATING"": {
                                ""TABLE"": ""1"",
                                ""TEMPORARYFLATTOAGE"": ""20140128""
                            }
                        }
                    ]
                }
            }";

            try
            {
                // Parse JSON string to a JObject
                var jsonObj = JObject.Parse(json);

                // Create XML
                var xmlDoc = new XDocument(
                    new XDeclaration("1.0", "utf-8", "yes"),
                    new XElement("FIPSCOLINKFILE",
                        new XAttribute("VERSION", "1.00"),
                        new XElement("DATA",
                            CreateAgentInformation(jsonObj["DATA"]["AGENTINFORMATION"] as JObject),
                            CreatePersons(jsonObj["DATA"]["PERSON"] as JArray),
                            CreateRelations(jsonObj["DATA"]["RELATION"] as JArray),
                            CreateCaseData(jsonObj["DATA"]["CASEDATA"] as JObject),
                            CreateRiders(jsonObj["DATA"]["RIDER"] as JArray)
                        )
                    )
                );

                // Output XML
                Console.WriteLine(xmlDoc.ToString());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred during JSON to XML conversion: {ex.Message}");
            }
        }

        static XElement CreateAgentInformation(JObject agentInfo)
        {
            return new XElement("AGENTINFORMATION",
                agentInfo.Properties().Select(prop => CreateElement(prop.Name, prop.Value))
            );
        }

        static IEnumerable<XElement> CreatePersons(JArray persons)
        {
            return persons.OrderBy(p => (string)p["@PERSONID"]).Select(person =>
                new XElement("PERSON",
                    new XAttribute("PERSONID", (string)person["@PERSONID"] ?? string.Empty),
                    person.Properties()
                          .Where(p => p.Name != "@PERSONID")
                          .Select(p => CreateElement(p.Name.ToUpper(), p.Value))
                )
            );
        }

        static IEnumerable<XElement> CreateRelations(JArray relations)
        {
            return relations.Select(relation =>
                new XElement("RELATION",
                    relation.Properties()
                            .Select(p => CreateElement(p.Name.ToUpper(), p.Value))
                )
            );
        }

        static XElement CreateCaseData(JObject caseData)
        {
            return new XElement("CASEDATA",
                new XAttribute("PERSONID", (string)caseData["@PERSONID"] ?? string.Empty),
                caseData.Properties()
                        .Where(p => p.Name != "@PERSONID" && p.Name != "RATING" && p.Name != "POLICY" && p.Name != "INFORCE")
                        .Select(p => CreateElement(p.Name.ToUpper(), p.Value)),
                CreateRating(caseData["RATING"] as JObject),
                CreatePolicy(caseData["POLICY"] as JObject),
                CreateInforce(caseData["INFORCE"] as JObject)
            );
        }

        static XElement CreateRating(JObject rating)
        {
            if (rating == null) return null;

            return new XElement("RATING",
                rating.Properties().Select(p => CreateElement(p.Name.ToUpper(), p.Value))
            );
        }

        static XElement CreatePolicy(JObject policy)
        {
            if (policy == null) return null;

            return new XElement("POLICY",
                policy.Properties().Select(p => CreateElement(p.Name.ToUpper(), p.Value))
            );
        }

        static XElement CreateInforce(JObject inforce)
        {
            if (inforce == null) return null;

            return new XElement("INFORCE",
                inforce.Properties().Select(p => CreateElement(p.Name.ToUpper(), p.Value))
            );
        }

        static IEnumerable<XElement> CreateRiders(JArray riders)
        {
            return riders.Select(rider =>
                new XElement("RIDER",
                    new XAttribute("PERSONID", (string)rider["@PERSONID"] ?? string.Empty),
                    rider.Properties()
                         .Where(p => p.Name != "@PERSONID" && p.Name != "RATING")
                         .Select(p => CreateElement(p.Name.ToUpper(), p.Value)),
                    CreateRiderRating(rider["RATING"] as JObject)
                )
            );
        }

        static XElement CreateRiderRating(JObject rating)
        {
            if (rating == null) return null;

            return new XElement("RATING",
                rating.Properties().Select(p => CreateElement(p.Name.ToUpper(), p.Value))
            );
        }

        static XElement CreateElement(string name, JToken value)
        {
            if (value == null || value.Type == JTokenType.Null || (value.Type == JTokenType.Array && !value.HasValues))
            {
                return new XElement(name); // Empty element
            }
            else if (value.Type == JTokenType.Array)
            {
                // Handle nested arrays if necessary
                return new XElement(name, value.Children().Select(v => CreateElement(name, v)));
            }
            else
            {
                return new XElement(name, value.ToString());
            }
        }
    }
}

