let accountsDate;
let apiData = [];

// Main OnLoad function
async function onLoad(executionContext) {
    const formContext = executionContext.getFormContext();
    await setUserLookupOnLoad(executionContext);

    // Check if form type is not Create
    if (formContext.ui.getFormType() !== 1) {
        showHideTabs(formContext, "pb_maturity_Instruction", "maturity_instruction_details", true);
        showHideTabs(formContext, "pb_maturity_Instruction", "pb_maturity_Instruction_notes", true);

        const certificateAccountTypeText = formContext.getAttribute("nf1pbm_certificateaccounttypetext")?.getValue();
        const certificateAccountNumber = formContext.getAttribute("nf1pbm_certificateaccountnumber")?.getValue();

        if (certificateAccountTypeText && certificateAccountNumber) {
            formContext.getControl("nf1pbm_certificateaccounttypetext").setVisible(true);
            formContext.getControl("nf1pbm_certificateaccountnumber").setVisible(true);
            formContext.getControl("nf1pbm_accounttype").setVisible(false);
            showHideSection(formContext, "pb_maturity_Instruction", "pbm_member_accounts", true);
            await callPowerAutomateFlow(executionContext, "Edit");
        }
    }
}

// Function to toggle fields on save
function toggleFieldsOnSave(formContext) {
    formContext.getControl("nf1pbm_certificateaccounttypetext").setVisible(true);
    formContext.getControl("nf1pbm_certificateaccountnumber").setVisible(true);
    formContext.getControl("nf1pbm_accounttype").setVisible(false);
    formContext.getControl("nf1pbm_accountnumber").setVisible(false);
}

// Function to set the current user in a lookup field on load
async function setUserLookupOnLoad(executionContext) {
    const globalContext = Xrm.Utility.getGlobalContext();
    const userId = globalContext.userSettings.userId.replace(/[{}]/g, "");  // Remove braces
    const userName = globalContext.userSettings.userName;

    const lookupValue = [{
        id: userId,
        name: userName,
        entityType: "systemuser"
    }];

    const formContext = executionContext.getFormContext();
    formContext.getAttribute("nf1pbm_maturityinstructionuser").setValue(lookupValue);
}

// Show/Hide Tabs
function showHideTabs(formContext, tabName, sectionName, isVisible) {
    const tab = formContext.ui.tabs.get(tabName);
    if (tab) {
        const section = tab.sections.get(sectionName);
        if (section) {
            section.setVisible(isVisible);
        } else {
            console.error(`Section ${sectionName} not found`);
        }
    } else {
        console.error(`Tab ${tabName} not found`);
    }
}

// Show/Hide Sections based on Lookup Field values
function showHideSection(formContext, lookupFieldName, tabName, sectionName) {
    const lookupField = formContext.getAttribute(lookupFieldName);
    if (lookupField) {
        const lookupValue = lookupField.getValue();
        const tab = formContext.ui.tabs.get(tabName);
        if (tab) {
            const section = tab.sections.get(sectionName);
            if (section) {
                section.setVisible(!!lookupValue);  // Toggle visibility based on lookup value
            }
        }
    }
}

// Call Power Automate Flow and handle the result
async function callPowerAutomateFlow(executionContext, formMode) {
    const formContext = executionContext.getFormContext();
    Xrm.Utility.showProgressIndicator("Processing...");

    const accounttype = getLookupFieldValue(formContext, "nf1pbm_accounttype");
    const accessnumber = getLookupFieldValue(formContext, "nf1pbm_memberaccessnumber");
    const affiliateAccountNumber = formContext.getAttribute("nf1pbm_affiliateaccountnumber")?.getValue();

    if (!accounttype || !accessnumber) {
        Xrm.Utility.closeProgressIndicator();
        console.error("Required lookup values are missing.");
        return;
    }

    const accountsubtype = getAccountSubtype(accounttype.id);
    const flowUrl = await getFlowUrl();

    try {
        const contact = await getContactRecordById(accessnumber.id);
        const maturityinstructionuser = globalContext.userSettings.userId.replace(/[{}]/g, "");

        const data = {
            accessnumber: accessnumber.id,
            accounttype: accounttype.id,
            maturityinstructionuser,
            accountsubtype,
            memberaccess: contact?.nf0base_memberaccessnumber
        };

        const response = await fetch(flowUrl, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(data)
        });

        if (!response.ok) {
            throw new Error(`Network response was not ok: ${response.statusText}`);
        }

        const apiData = await response.json();
        updateIframeWithData(formContext, apiData, accountsubtype, formMode, affiliateAccountNumber);
    } catch (error) {
        console.error("Error calling Power Automate flow:", error);
    } finally {
        Xrm.Utility.closeProgressIndicator();
    }
}

// Retrieve lookup field value
function getLookupFieldValue(formContext, fieldName) {
    const lookupField = formContext.getAttribute(fieldName);
    const lookupValue = lookupField?.getValue();
    return lookupValue && lookupValue.length > 0 ? lookupValue[0] : null;
}

// Retrieve contact record by ID
async function getContactRecordById(contactId) {
    try {
        const contact = await Xrm.WebApi.retrieveRecord("contact", contactId, "?$select=nf0base_memberaccessnumber");
        return contact;
    } catch (error) {
        console.error("Error retrieving contact:", error);
        return null;
    }
}

// Fetch Flow URL from environment variables
async function getFlowUrl() {
    try {
        const result = await Xrm.WebApi.online.retrieveMultipleRecords(
            "environmentvariabledefinition",
            "?$select=defaultvalue,displayname&$expand=environmentvariabledefinition_environmentvariablevalue($select=value)&$filter=schemaname eq 'nf1pbm_VarEnvFlowURLGetAccountRelationships'"
        );
        if (result.entities.length > 0) {
            return result.entities[0].environmentvariabledefinition_environmentvariablevalue[0].value;
        }
    } catch (error) {
        console.error("Error fetching Flow URL:", error);
    }
    return null;
}

// Determine Account Subtype based on Account Type ID
function getAccountSubtype(accountTypeId) {
    const accountTypeMap = {
        "619BDE1C-DD50-EF11-A317-000D3A1007BB": "SC",
        "08AC6D30-DD50-EF11-A317-000D3A1007BB": "IR",
        "7F5A6823-DD50-EF11-A317-000D3A1007BB": "ED"
    };
    return accountTypeMap[accountTypeId] || "";
}

// Update iframe content based on API response
function updateIframeWithData(formContext, data, accountsubtype, formMode, affiliateAccountNumber) {
    const webResourceControl = formContext.getControl("WebResource_member_accounts");
    if (webResourceControl) {
        webResourceControl.getContentWindow().then((window) => {
            window.receiveDataFromParent({
                formContext,
                data,
                accountsubtype,
                mode: formMode,
                affiliateAcNo: affiliateAccountNumber
            });
        });
    }
}

// Remove custom filter from the lookup field
function removeCustomFilter(executionContext) {
    const formContext = executionContext.getFormContext();
    const lookupField = formContext.getControl("nf1pbm_accountnumber");

    if (lookupField && formContext.data.entity.attributes.getByName("nf1pbm_accountnumber").addPreSearchHandler) {
        lookupField.removePreSearch(formContext.data.entity.attributes.getByName("nf1pbm_accountnumber").addPreSearchHandler);
        formContext.data.entity.attributes.getByName("nf1pbm_accountnumber").addPreSearchHandler = null;
    }
}

// Apply custom filter on the account numbers lookup
function filterAccountNumbersLookup(executionContext) {
    const formContext = executionContext.getFormContext();
    const accountTypeField = formContext.getAttribute("nf1pbm_accounttype");
    const accessNumberField = formContext.getAttribute("nf1pbm_accessnumber");

    if (accountTypeField && accessNumberField) {
        const accountTypeValue = accountTypeField.getValue();
        const accessNumberValue = accessNumberField.getValue();

        if (accountTypeValue && accessNumberValue) {
            const accountTypeId = accountTypeValue[0].id;
            const accessNumberId = accessNumberValue[0].id;

            const fetchXml = `
              <fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="false">
                <entity name="nf1pbm_certificateaccountnumber">
                  <attribute name="nf1pbm_certificateaccountnumberid" />
                  <attribute name="nf1pbm_name" />
                  <attribute name="createdon" />
                  <order attribute="nf1pbm_name" descending="false" />
                  <filter type="and">
                    <condition attribute="nf1pbm_accessnumber" operator="eq" value="${accessNumberId}" />
                    <condition attribute="nf1pbm_accounttype" operator="eq" value="${accountTypeId}" />
                    <condition attribute="nf1pbm_maturityinstructionuser" operator="eq-userid" />
                  </filter>
                </entity>
              </fetch>`;

            formContext.getControl("nf1pbm_accountnumber").addPreSearch(function() {
                formContext.getControl("nf1pbm_accountnumber").addCustomFilter(fetchXml);
            });
        }
    }
}

// Reset and show the certificate account type based on member access number lookup change
function resetandShowCertificateAccountType(executionContext) {
    const formContext = executionContext.getFormContext();
    resetAndShowChoiceFieldOnLookupChange(formContext, "nf1pbm_accounttype", "nf1pbm_memberaccessnumber");
    resetAndShowChoiceFieldOnLookupChange(formContext, "nf1pbm_accountnumber", "nf1pbm_accessnumber");
    setUserLookupOnLoad(executionContext);
}

// Reset and show the certificate account number based on some conditions
function resetandShowCertificateAccountNumber(executionContext) {
    const formContext = executionContext.getFormContext();
    resetAndShowChoiceFieldOnLookupChange(formContext, "nf1pbm_accountnumber", "nf1pbm_accounttype");
    showHideSection(formContext, "nf1pbm_accounttype", "pb_maturity_Instruction", "pbm_member_accounts");
    callPowerAutomateFlow(executionContext, "Create");
}

// Helper function to reset and show choice fields based on the lookup value change
function resetAndShowChoiceFieldOnLookupChange(formContext, choiceFieldName, parentLookupFieldName) {
    const parentLookupField = formContext.getAttribute(parentLookupFieldName);

    if (!parentLookupField) {
        console.error(`Parent lookup field ${parentLookupFieldName} not found`);
        return;
    }

    const parentLookupValue = parentLookupField.getValue();
    const choiceFieldControl = formContext.getControl(choiceFieldName);
    const choiceFieldAttribute = formContext.getAttribute(choiceFieldName);

    if (!choiceFieldControl || !choiceFieldAttribute) {
        console.error(`Choice field ${choiceFieldName} not found`);
        return;
    }

    if (parentLookupValue && parentLookupValue.length > 0) {
        // Show the choice field and reset its value
        choiceFieldControl.setVisible(true);
        choiceFieldAttribute.setValue(null);
    } else {
        // Hide the choice field if the parent lookup doesn't have a value
        choiceFieldControl.setVisible(false);
    }
}

