using System;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Collections.Generic;
using System.Net.Http.Headers;

namespace TKISFunctionApp
{
    public static class TKISintegration
    {
        [FunctionName("TKISintegration")]
        public static async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req,
            ILogger log)
        {
            log.LogInformation("C# HTTP trigger function processed a request.");

            string policyNo = req.Query["policyNo"];

            var policy = new { policyNo = policyNo };
            var policyList = new List<object> { policy };
            string requestBody = JsonConvert.SerializeObject(policyList);
            var content = new StringContent(requestBody, Encoding.UTF8, "application/json");

            using var client = new HttpClient();
            string apiUrl = Environment.GetEnvironmentVariable("API_URL");
            string clientSecretId = Environment.GetEnvironmentVariable("CLIENT_SECRET");

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", clientSecretId);

            try
            {
                HttpResponseMessage response = await client.PostAsync(apiUrl, content);

                if (response.IsSuccessStatusCode)
                {
                    var json = await response.Content.ReadAsStringAsync();
                    var responseJsonObj = JObject.Parse(json);
                    string policyIndicator = (string)responseJsonObj["DATA"]["Illustration_System"];
                    
                    // Example: processing the response based on the policyIndicator

                    return new OkObjectResult(new { INDICATOR = policyIndicator, DATA = responseJsonObj["DATA"] });
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.Forbidden)
                {
                    log.LogWarning("Received 403 Forbidden from the API. Check API key and permissions.");
                    return new StatusCodeResult(403);
                }
                else
                {
                    return new BadRequestObjectResult($"API request failed with the status code {response.StatusCode}");
                }
            }
            catch (Exception e)
            {
                log.LogError($"An error occurred while sending JSON data to the API: {e.Message}");
                return new BadRequestObjectResult("Unexpected Error!");
            }
        }
    }
}
