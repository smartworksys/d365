
let accountsDate;
let apiData = [];

// Main OnLoad function
async function onLoad(executionContext) {
    const formContext = executionContext.getFormContext();
    await setUserLookupOnLoad(executionContext);

    // Check if form type is not Create
    if (formContext.ui.getFormType() !== 1) {
        showHideTabs(formContext, "pb_maturity_Instruction", "maturity_instruction_details", true);
        showHideTabs(formContext, "pb_maturity_Instruction", "pb_maturity_Instruction_notes", true);

        const certificateAccountTypeText = formContext.getAttribute("nf1pbm_certificateaccounttypetext")?.getValue();
        const certificateAccountNumber = formContext.getAttribute("nf1pbm_certificateaccountnumber")?.getValue();

        if (certificateAccountTypeText && certificateAccountNumber) {
            formContext.getControl("nf1pbm_certificateaccounttypetext").setVisible(true);
            formContext.getControl("nf1pbm_certificateaccountnumber").setVisible(true);
            formContext.getControl("nf1pbm_accounttype").setVisible(false);
            showHideSection(formContext, "pb_maturity_Instruction", "pbm_member_accounts", true);
            await callPowerAutomateFlow(executionContext, "Edit");
        }
    }
}

// Function to toggle fields on save
function toggleFieldsOnSave(formContext) {
    formContext.getControl("nf1pbm_certificateaccounttypetext").setVisible(true);
    formContext.getControl("nf1pbm_certificateaccountnumber").setVisible(true);
    formContext.getControl("nf1pbm_accounttype").setVisible(false);
    formContext.getControl("nf1pbm_accountnumber").setVisible(false);
}

// Function to set the current user in a lookup field on load
async function setUserLookupOnLoad(executionContext) {
    const globalContext = Xrm.Utility.getGlobalContext();
    const userId = globalContext.userSettings.userId.replace(/[{}]/g, "");  // Remove braces
    const userName = globalContext.userSettings.userName;

    const lookupValue = [{
        id: userId,
        name: userName,
        entityType: "systemuser"
    }];

    const formContext = executionContext.getFormContext();
    formContext.getAttribute("nf1pbm_maturityinstructionuser").setValue(lookupValue);
}

// Show/Hide Tabs
function showHideTabs(formContext, tabName, sectionName, isVisible) {
    const tab = formContext.ui.tabs.get(tabName);
    if (tab) {
        const section = tab.sections.get(sectionName);
        if (section) {
            section.setVisible(isVisible);
        } else {
            console.error(`Section ${sectionName} not found`);
        }
    } else {
        console.error(`Tab ${tabName} not found`);
    }
}

// Show/Hide Sections based on Lookup Field values
function showHideSection(formContext, lookupFieldName, tabName, sectionName) {
    const lookupField = formContext.getAttribute(lookupFieldName);
    if (lookupField) {
        const lookupValue = lookupField.getValue();
        const tab = formContext.ui.tabs.get(tabName);
        if (tab) {
            const section = tab.sections.get(sectionName);
            if (section) {
                section.setVisible(!!lookupValue);  // Toggle visibility based on lookup value
            }
        }
    }
}

// Call Power Automate Flow and handle the result
async function callPowerAutomateFlow(executionContext, formMode) {
    const formContext = executionContext.getFormContext();
    Xrm.Utility.showProgressIndicator("Processing...");

    const accounttype = getLookupFieldValue(formContext, "nf1pbm_accounttype");
    const accessnumber = getLookupFieldValue(formContext, "nf1pbm_memberaccessnumber");
    const affiliateAccountNumber = formContext.getAttribute("nf1pbm_affiliateaccountnumber")?.getValue();

    if (!accounttype || !accessnumber) {
        Xrm.Utility.closeProgressIndicator();
        console.error("Required lookup values are missing.");
        return;
    }

    const accountsubtype = getAccountSubtype(accounttype.id);
    const flowUrl = await getFlowUrl();

    try {
        const contact = await getContactRecordById(accessnumber.id);
        const maturityinstructionuser = globalContext.userSettings.userId.replace(/[{}]/g, "");

        const data = {
            accessnumber: accessnumber.id,
            accounttype: accounttype.id,
            maturityinstructionuser,
            accountsubtype,
            memberaccess: contact?.nf0base_memberaccessnumber
        };

        const response = await fetch(flowUrl, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(data)
        });

        if (!response.ok) {
            throw new Error(`Network response was not ok: ${response.statusText}`);
        }

        const apiData = await response.json();
        updateIframeWithData(formContext, apiData, accountsubtype, formMode, affiliateAccountNumber);
    } catch (error) {
        console.error("Error calling Power Automate flow:", error);
    } finally {
        Xrm.Utility.closeProgressIndicator();
    }
}

// Retrieve lookup field value
function getLookupFieldValue(formContext, fieldName) {
    const lookupField = formContext.getAttribute(fieldName);
    const lookupValue = lookupField?.getValue();
    return lookupValue && lookupValue.length > 0 ? lookupValue[0] : null;
}

// Retrieve contact record by ID
async function getContactRecordById(contactId) {
    try {
        const contact = await Xrm.WebApi.retrieveRecord("contact", contactId, "?$select=nf0base_memberaccessnumber");
        return contact;
    } catch (error) {
        console.error("Error retrieving contact:", error);
        return null;
    }
}

// Fetch Flow URL from environment variables
async function getFlowUrl() {
    try {
        const result = await Xrm.WebApi.online.retrieveMultipleRecords(
            "environmentvariabledefinition",
            "?$select=defaultvalue,displayname&$expand=environmentvariabledefinition_environmentvariablevalue($select=value)&$filter=schemaname eq 'nf1pbm_VarEnvFlowURLGetAccountRelationships'"
        );
        if (result.entities.length > 0) {
            return result.entities[0].environmentvariabledefinition_environmentvariablevalue[0].value;
        }
    } catch (error) {
        console.error("Error fetching Flow URL:", error);
    }
    return null;
}

// Determine Account Subtype based on Account Type ID
function getAccountSubtype(accountTypeId) {
    const accountTypeMap = {
        "619BDE1C-DD50-EF11-A317-000D3A1007BB": "SC",
        "08AC6D30-DD50-EF11-A317-000D3A1007BB": "IR",
        "7F5A6823-DD50-EF11-A317-000D3A1007BB": "ED"
    };
    return accountTypeMap[accountTypeId] || "";
}

// Update iframe content based on API response
function updateIframeWithData(formContext, data, accountsubtype, formMode, affiliateAccountNumber) {
    const webResourceControl = formContext.getControl("WebResource_member_accounts");
    if (webResourceControl) {
        webResourceControl.getContentWindow().then((window) => {
            window.receiveDataFromParent({
                formContext,
                data,
                accountsubtype,
                mode: formMode,
                affiliateAcNo: affiliateAccountNumber
            });
        });
    }
}






let formContext;

// Function to populate the main accounts dropdown
function populateaccountsDropdown(data, accountsubtype) {
    const dropdown = document.getElementById("drpMemberAccounts");
    dropdown.innerHTML = "";  // Clear any existing options

    const defaultOption = document.createElement("option");
    defaultOption.text = "--Select--";
    defaultOption.value = "";
    dropdown.add(defaultOption);

    data.forEach(item => {
        if ((accountsubtype === "ED" && item.subType === "IR" && item.iraPlanSequenceNumber === "EDN") ||
            (accountsubtype === "IR" && item.subType === "IR" && item.iraPlanSequenceNumber === "IRA") ||
            (item.subType === accountsubtype)) {
            const option = document.createElement("option");
            option.text = item.accountNumber;
            option.value = item.accountNumber;
            dropdown.add(option);
        }
    });

    if (data.length > 0) {
        populateAffiliateaccountsDropdown(data, "");
    }
}

// Function to populate the affiliate accounts dropdown
function populateAffiliateaccountsDropdown(data, selectedValue = "") {
    const dropdown = document.getElementById("drpMemberAffiliateAccounts");
    dropdown.innerHTML = "";  // Clear existing options

    const defaultOption = document.createElement("option");
    defaultOption.text = "--Select--";
    defaultOption.value = "";
    dropdown.add(defaultOption);

    data.forEach(item => {
        if (["SK", "SH", "OS"].includes(item.subType)) {
            const option = document.createElement("option");
            option.text = item.accountNumber;
            option.value = item.accountNumber;
            dropdown.add(option);
        }
    });

    if (selectedValue) {
        dropdown.value = selectedValue;
    }
}

// Function to receive formContext from the parent D365 form
function receiveDataFromParent(context) {
    formContext = context.formContext;
    const data = context.data;
    const accountsubtype = context.accountsubtype;
    const frmMode = context.mode;
    const affiliateAcNo = context.affiliateAcNo;

    if (frmMode === "Create") {
        populateaccountsDropdown(data, accountsubtype);
    } else {
        document.getElementById("drpMemberAccounts").style.display = "none";
        document.getElementById("lbldrpMemberAccounts").style.display = "none";
        populateAffiliateaccountsDropdown(data, affiliateAcNo);
    }
}

// Function to send the selected account number to the parent form
function sendAccountNoValue() {
    const dropdown = document.getElementById("drpMemberAccounts");
    const selectedValue = dropdown.value;

    if (!selectedValue) {
        alert("Please select a valid option from the dropdown.");
        formContext.getAttribute("nf1pbm_certificateaccountnumber").setValue(null);
        return;
    }

    if (formContext) {
        formContext.getAttribute("nf1pbm_certificateaccountnumber").setValue(selectedValue);
        formContext.getAttribute("nf1pbm_certificateaccountnumber").fireOnChange();
    }
}

// Function to send the selected affiliate account number to the parent form
function sendAffiliateAccountNoValue() {
    const dropdown = document.getElementById("drpMemberAffiliateAccounts");
    const selectedValue = dropdown.value;

    if (!selectedValue) {
        alert("Please select a valid option from the dropdown.");
        formContext.getAttribute("nf1pbm_affiliateaccountnumber").setValue(null);
        return;
    }

    if (formContext) {
        formContext.getAttribute("nf1pbm_affiliateaccountnumber").setValue(selectedValue);
        formContext.getAttribute("nf1pbm_affiliateaccountnumber").fireOnChange();
    }
}



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Dropdown</title>
    <link rel="stylesheet" type="text/css" href="/WebResources/nf1pbm_MaturityInstructions/CSS/CommonStyle.css">
    <script type="text/javascript" src="/WebResources/nf1pbm_MaturityInstructions/JS/MemberAccountDropdown.js" defer></script>    
</head>
<body style="overflow-wrap: break-word;">
    <div class="divMRCcls">
        <div class="form-group" id="dvmemberaccounts" style="display:none;">
            <label id="lbldrpMemberAccounts" for="drpMemberAccounts" class="labelPBMcls" title="Select a Certificate Account">Certificate Account</label>
            <select id="drpMemberAccounts" class="selectPBMcls" title="Select a Member Account" onchange="sendAccountNoValue()">
                <!-- Options will be dynamically loaded here -->
            </select>
        </div>
        <div class="form-group" id="dvaffiliatememberaccounts" style="display:none;">
            <label for="drpMemberAffiliateAccounts" class="labelPBMcls" title="Select an Affiliate Account">Affiliate Account</label>
            <select id="drpMemberAffiliateAccounts" class="selectPBMcls" title="Select an Affiliate Account" onchange="sendAffiliateAccountNoValue()">
                <!-- Options will be dynamically loaded here -->
            </select>
        </div>
    </div>
</body>
</html>
