// Helper function to retrieve lookup field values
function getLookupFieldValue(formContext, fieldName) {
    var lookupFieldValue = formContext.getAttribute(fieldName).getValue();
    if (lookupFieldValue != null) {
        return lookupFieldValue[0]; // Return first record from the lookup array
    }
    return null;
}

// Function to retrieve contact record by access number
async function getContactRecordById(accessnumber) {
    try {
        const contact = await Xrm.WebApi.retrieveRecord("contact", accessnumber, "?$select=nf0base_memberaccessnumber");
        return contact.nf0base_memberaccessnumber;
    } catch (error) {
        console.error("Failed to retrieve contact:", error);
        throw new Error("Failed to retrieve contact.");
    }
}

// Function to retrieve the Power Automate Flow URL from environment variables
async function getPowerAutomateFlowUrl() {
    try {
        const result = await Xrm.WebApi.online.retrieveMultipleRecords(
            "environmentvariabledefinition",
            "?$select=defaultvalue,displayname&$expand=environmentvariabledefinition_environmentvariablevalue($select=value)&$filter=schemaname eq 'nf1pbm_VarEnvFlowURLGetAccountRelationships'"
        );

        if (result.entities.length > 0 && result.entities[0].environmentvariabledefinition_environmentvariablevalue.length > 0) {
            return result.entities[0].environmentvariabledefinition_environmentvariablevalue[0].value;
        }

        throw new Error("Flow URL not found.");
    } catch (error) {
        console.error("Error retrieving flow URL:", error);
        throw new Error("Failed to retrieve Power Automate Flow URL.");
    }
}

// Function to call Power Automate Flow
async function callPowerAutomateFlowAsync(flowUrl, data) {
    try {
        const response = await fetch(flowUrl, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
        });

        if (!response.ok) {
            throw new Error("Network response was not ok: " + response.statusText);
        }

        return await response.json();
    } catch (error) {
        console.error("Error calling Power Automate Flow:", error);
        throw new Error("Failed to call Power Automate Flow.");
    }
}

// Main function to handle Power Automate Flow process asynchronously
async function callPowerAutomateFlow(executionContext, formMode) {
    try {
        // Show the Dynamics 365 OOTB loading spinner
        Xrm.Utility.showProgressIndicator("Processing...");

        var formContext = executionContext.getFormContext();
        var accountsubtype = "";
        var maturityinstructionuser = Xrm.Utility.getGlobalContext().userSettings.userId.replace("{", "").replace("}", "");

        // Retrieve account type and access number
        var accounttypelookupValue = getLookupFieldValue(formContext, "nf1pbm_accounttype");
        var accessnumberlookupValue = getLookupFieldValue(formContext, "nf1pbm_memberaccessnumber");

        if (!accounttypelookupValue || !accessnumberlookupValue) {
            throw new Error("Account type or Access number not found.");
        }

        var accounttype = accounttypelookupValue.id;
        var accessnumber = accessnumberlookupValue.id;

        // Determine account subtype based on account type
        if (accounttype === "619BDE1C-DD50-EF11-A317-000D3A1007BB") {
            accountsubtype = "SC";
        } else if (accounttype === "08AC6D30-DD50-EF11-A317-000D3A1007BB") {
            accountsubtype = "IR";
        } else if (accounttype === "7F5A6823-DD50-EF11-A317-000D3A1007BB") {
            accountsubtype = "ED";
        }

        var certificateAffiliateAccountNumber = formContext.getAttribute("nf1pbm_affiliateaccountnumber").getValue();

        // Retrieve contact record
        var retrievedContact = await getContactRecordById(accessnumber);

        // Retrieve Power Automate Flow URL
        var flowUrl = await getPowerAutomateFlowUrl();

        // Prepare the data object to be sent
        var data = {
            accessnumber: accessnumber,
            accounttype: accounttype,
            maturityinstructionuser: maturityinstructionuser,
            accountsubtype: accountsubtype,
            memberaccess: retrievedContact,
        };

        // Call the Power Automate flow and process the response
        const apiData = await callPowerAutomateFlowAsync(flowUrl, data);

        // Process the response and update the form
        let count = 0;
        apiData.forEach(function (item) {
            if (accountsubtype === "ED") {
                if (item.subType === "IR" && item.iraPlanSequenceNumber === "EDN") {
                    count++;
                }
            } else if (accountsubtype === "IR") {
                if (item.subType === "IR" && item.iraPlanSequenceNumber === "IRA") {
                    count++;
                }
            } else {
                if (item.subType === accountsubtype) {
                    count++;
                }
            }
        });

        formContext.getAttribute("nf1pbm_accessnumberint").setValue(retrievedContact);

        if (count === 0) {
            Xrm.Navigation.openAlertDialog({ text: "Certificate Accounts not found for this Access Number Account Type." });
        } else {
            showHideSection(formContext, "nf1pbm_accounttype", "pb_maturity_Instruction", "pbm_member_accounts");

            // Pass data to the HTML web resource
            passDataToWebResource(formContext, formMode, apiData, accountsubtype, certificateAffiliateAccountNumber);
        }

    } catch (error) {
        console.error("Error processing the flow:", error.message);
        Xrm.Navigation.openErrorDialog({ message: error.message });
    } finally {
        // Hide the Dynamics 365 OOTB loading spinner
        Xrm.Utility.closeProgressIndicator();
    }
}

// Function to pass data to an HTML web resource
function passDataToWebResource(formContext, formMode, apiData, accountsubtype, affiliateAcNo) {
    var webResourceControl = formContext.getControl("WebResource_member_accounts");

    if (webResourceControl !== null) {
        webResourceControl.getContentWindow().then(function (window) {
            window.receiveDataFromParent({
                formContext: formContext,
                data: apiData,
                accountsubtype: accountsubtype,
                mode: formMode,
                affiliateAcNo: affiliateAcNo,
            });
        });
    }
}
