using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.Functions.Worker.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace KOFC_Navigator_Integration
{
    public class NavClientIntegration
    {
        private readonly ILogger<NavClientIntegration> _logger;
        private readonly HttpClient _httpClient;

        public NavClientIntegration(ILogger<NavClientIntegration> logger, IHttpClientFactory httpClientFactory)
        {
            _logger = logger;
            _httpClient = httpClientFactory.CreateClient("AuthorizedClient");
        }

        [Function("NavClientIntegration")]
        public async Task<HttpResponseData> RunAsync([HttpTrigger(AuthorizationLevel.Function, "get", "post")] HttpRequestData req, FunctionContext executionContext)
        {
            _logger.LogInformation("Processing HTTP trigger.");

            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
            _logger.LogInformation($"Received request body: {requestBody}");

            string apiUrl = Environment.GetEnvironmentVariable("NAV_GATEWAY_API_URL");
            _logger.LogInformation($"API URL: {apiUrl}");

            var reqJsonStr = new { request = requestBody };
            string jsonData = JsonConvert.SerializeObject(reqJsonStr);
            var content = new StringContent(jsonData, Encoding.UTF8, "application/json");

            try
            {
                _logger.LogInformation("Sending request to API.");
                var response = await _httpClient.PostAsync(apiUrl, content);

                var responseToClient = req.CreateResponse();
                responseToClient.Headers.Add("Content-Type", "application/json");

                if (response.IsSuccessStatusCode)
                {
                    string responseContent = await response.Content.ReadAsStringAsync();
                    _logger.LogInformation($"API response: {responseContent}");

                    responseToClient.StatusCode = System.Net.HttpStatusCode.OK;
                    await responseToClient.WriteStringAsync(responseContent);
                }
                else
                {
                    _logger.LogError($"API call failed with status code: {response.StatusCode}");
                    responseToClient.StatusCode = response.StatusCode;
                    await responseToClient.WriteStringAsync($"API call failed with status: {response.StatusCode}");
                }
                return responseToClient;
            }
            catch (Exception ex)
            {
                _logger.LogError($"An error occurred: {ex.Message}");
                var errorResponse = req.CreateResponse(System.Net.HttpStatusCode.InternalServerError);
                await errorResponse.WriteStringAsync("Internal server error");
                return errorResponse;
            }
        }
    }
}
