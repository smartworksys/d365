function showFormNotification(executionContext, message, level) {
    var formContext = executionContext.getFormContext(); // Get the form context

    // level could be "ERROR", "WARNING", or "INFO"
    formContext.ui.setFormNotification(message, level, "notificationId");

    // Optionally, clear the notification after a delay
    setTimeout(function() {
        formContext.ui.clearFormNotification("notificationId");
    }, 10000); // Clears after 10 seconds
}

async function getMaturityInstructions(executionContext, accessNumber, accountTypeId, accountNumber) {
    const fetchXml = `
    <fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="false">
      <entity name="nf1pbm_maturityinstructions">
        <attribute name="nf1pbm_maturityinstructionsid" />
        <attribute name="nf1pbm_maturityinstructionid" />
        <attribute name="createdon" />
        <order attribute="nf1pbm_maturityinstructionid" descending="false" />
        <filter type="and">
          <condition attribute="nf1pbm_accessnumberint" operator="eq" value="${accessNumber}" />
          <condition attribute="nf1pbm_accounttype" operator="eq" uiname="Share Certificate" uitype="nf1pbm_certificateaccounttype" value="${accountTypeId}" />
          <condition attribute="nf1pbm_certificateaccountnumber" operator="eq" value="${accountNumber}" />
        </filter>
      </entity>
    </fetch>`;

    try {
        const result = await Xrm.WebApi.retrieveMultipleRecords("nf1pbm_maturityinstructions", `?fetchXml=${encodeURIComponent(fetchXml)}`);
        
        if (result.entities.length > 0) {
            const existingRecordId = result.entities[0].nf1pbm_maturityinstructionsid;
            const message = `Record already exists with this combination. ID: ${existingRecordId}`;
            
            showFormNotification(executionContext, message, "ERROR");
            return; // Stop execution if the record exists
        }

        console.log("Maturity instructions retrieved successfully:", result.entities);
        return result.entities;
    } catch (error) {
        console.error("Error retrieving maturity instructions:", error.message);
        throw new Error(error.message);
    }
}







getMaturityInstructions(executionContext, "00000000022688", "{619BDE1C-DD50-EF11-A317-000D3A1007BB}", "04000850640013")
    .then((instructions) => {
        console.log(instructions);
    })
    .catch((error) => {
        console.error(error);
    });

