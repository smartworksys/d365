using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Microsoft.Azure.WebJobs.Extensions.AuthenticationEvents.TokenIssuanceStart;
using Microsoft.Azure.WebJobs.Extensions.AuthenticationEvents;
using Microsoft.PowerPlatform.Dataverse.Client;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Sdk;

namespace AuthEventsTrigger2312080040006798
{
    public static class AuthEventTrigger
    {
        [FunctionName("onTokenIssuanceStart")]
        public static WebJobsAuthenticationEventResponse Run(
                                [WebJobsAuthenticationEventsTriggerAttribute(AudienceAppId = "e3a6485a-2d92-4a89-baaf-ca89b4d30966",
                 AuthorityUrl = "https://login.microsoftonline.com/8a4b69f8-8bb7-4be5-9eda-6c40a157248c",
                 AuthorizedPartyAppId = "99045fe1-7639-4a75-9d4a-577b6ca3810f")] WebJobsTokenIssuanceStartRequest request, ILogger log)
        {
            try
            {
                log.LogInformation("Starting Token Issuance Event Processing...");

                string crmUrl = Environment.GetEnvironmentVariable("CrmUrl");
                string clientId = Environment.GetEnvironmentVariable("ClientId");
                string clientSecret = Environment.GetEnvironmentVariable("ClientSecret");
                string userID = "susmitha.thokala@kofc.org";

                if (string.IsNullOrEmpty(crmUrl) || string.IsNullOrEmpty(clientId) || string.IsNullOrEmpty(clientSecret))
                {
                    throw new Exception("Missing CRM connection details in environment variables.");
                }

                var conn = $@"AuthType=ClientSecret;
                              Url={crmUrl};
                              ClientId={clientId};
                              ClientSecret={clientSecret}";

                // Create a ServiceClient
                var serviceClient = new ServiceClient(conn);

                if (!serviceClient.IsReady)
                {
                    log.LogError("CRM Connection failed.");
                    throw new Exception("Failed to establish CRM connection.");
                }

                log.LogInformation("CRM Connection successful");

                string userFetchXML = @"
                    <fetch top='50'>
                        <entity name='systemuser'>
                            <attribute name='kofc_agentid' />
                            <attribute name='kofc_user_ldap_id' />
                            <attribute name='windowsliveid' />
                            <attribute name='kofc_insurancerole' />
                            <filter>
                                <condition attribute='windowsliveid' operator='eq' value='{0}' />
                            </filter>
                        </entity>
                    </fetch>";

                string updatedUserFetchXML = String.Format(userFetchXML, userID);
                var userFetchExpression = new FetchExpression(updatedUserFetchXML);
                EntityCollection userResult = serviceClient.RetrieveMultiple(userFetchExpression);

                if (userResult == null || userResult.Entities.Count == 0)
                {
                    log.LogWarning("No user found with the specified windowsliveid.");
                    throw new Exception("User not found in CRM.");
                }

                Entity userEntity = userResult.Entities[0];
                log.LogInformation("User entity retrieved.");

                string windowsliveid = userEntity.GetAttributeValue<string>("windowsliveid");
                if (string.IsNullOrEmpty(windowsliveid))
                {
                    log.LogWarning("windowsliveid is missing for the user.");
                    throw new Exception("User's windowsliveid is missing.");
                }

                log.LogInformation("kofc_insurancerole ID: " + userEntity.GetAttributeValue<string>("kofc_insurancerole"));

                // Checks if the request is successful and did the token validation pass
                if (request.RequestStatus == WebJobsAuthenticationEventsRequestStatusType.Successful)
                {
                    log.LogInformation("Request was successful. Adding custom claims.");

                    request.Response.Actions.Add(new WebJobsProvideClaimsForToken(
                        new WebJobsAuthenticationEventsTokenClaim("dateOfBirth", "01/01/2000"),
                        new WebJobsAuthenticationEventsTokenClaim("customRoles", "Writer", "Editor"),
                        new WebJobsAuthenticationEventsTokenClaim("apiVersion", "1.0.0"),
                        new WebJobsAuthenticationEventsTokenClaim("loginID", windowsliveid),
                        new WebJobsAuthenticationEventsTokenClaim("correlationId", request.Data.AuthenticationContext.CorrelationId.ToString())
                    ));
                }
                else
                {
                    log.LogInformation($"Request failed with status message: {request.StatusMessage}");
                }

                return request.Completed();
            }
            catch (Exception ex)
            {
                log.LogError($"Error occurred: {ex.Message}");
                return request.Failed(ex);
            }
        }
    }
}

