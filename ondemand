let accountsDate;
let apiData = [];

// Attach the filter function to the OnLoad event and the OnChange event of the account type lookup field
async function onLoad(executionContext) {
    try {
        const formContext = executionContext.getFormContext();
        if (formContext.ui.getFormType() !== 1) {
            showHideTabs(formContext, "pb_maturity_Instruction", "maturity_instruction_details", true);
            showHideTabs(formContext, "pb_maturity_Instruction", "pb_maturity_Instruction_notes", true);

            const certificateAccountTypeText = formContext.getAttribute("nf1pbm_certificateaccounttypetext").getValue();
            const certificateAccountNumber = formContext.getAttribute("nf1pbm_certificateaccountnumber").getValue();

            if (certificateAccountTypeText && certificateAccountNumber) {
                formContext.getControl("nf1pbm_certificateaccounttypetext").setVisible(true);
                formContext.getControl("nf1pbm_certificateaccountnumber").setVisible(true);
                formContext.getControl("nf1pbm_accounttype").setVisible(false);
                showHideFrame(formContext, "pb_maturity_Instruction", "pbm_member_accounts", true);
                await callPowerAutomateFlow(executionContext, "Edit");
            }
        }
    } catch (error) {
        console.error("Error in onLoad function: ", error);
    }
}

async function enableSectionOnLookupChange(executionContext) {
    try {
        const formContext = executionContext.getFormContext();
        showHideSection(formContext, "nf1pbm_accounttype", "pb_maturity_Instruction", "maturity_instruction_details");
        showHideSection(formContext, "nf1pbm_accounttype", "pb_maturity_Instruction", "pb_maturity_Instruction_notes");

        const certificateAccountNumber = formContext.getAttribute("nf1pbm_certificateaccountnumber").getValue();

        apiData.forEach((item) => {
            if (certificateAccountNumber === item.accountNumber) {
                formContext.getAttribute("nf1pbm_maturitydate").setValue(null);
                if (item.maturityDate) {
                    const mdate = new Date(item.maturityDate);
                    formContext.getAttribute("nf1pbm_maturitydate").setValue(mdate);
                }
            }
        });
    } catch (error) {
        console.error("Error in enableSectionOnLookupChange: ", error);
    }
}

async function resetAndShowCertificateAccountType(executionContext) {
    resetAndShowChoiceFieldOnLookupChange(executionContext, "nf1pbm_accounttype", "nf1pbm_memberaccessnumber");
    resetAndShowChoiceFieldOnLookupChange(executionContext, "nf1pbm_accountnumber", "nf1pbm_accessnumber");
}

async function resetAndShowCertificateAccountNumber(executionContext) {
    const formContext = executionContext.getFormContext();
    showHideSection(formContext, "nf1pbm_accounttype", "pb_maturity_Instruction", "pbm_member_accounts");
    await callPowerAutomateFlow(executionContext, "Create");
}

function resetAndShowChoiceFieldOnLookupChange(executionContext, fieldName, parent) {
    const formContext = executionContext.getFormContext();

    const lookupField = formContext.getAttribute(parent);
    if (!lookupField) {
        console.error("Lookup field not found");
        return;
    }

    const lookupValue = lookupField.getValue();
    const choiceFieldControl = formContext.getControl(fieldName);
    const choiceFieldAttribute = formContext.getAttribute(fieldName);

    if (!choiceFieldControl || !choiceFieldAttribute) {
        console.error("Choice field not found");
        return;
    }

    if (lookupValue && lookupValue.length > 0) {
        choiceFieldControl.setVisible(true);
    } else {
        choiceFieldControl.setVisible(false);
    }
}

function showHideTabs(formContext, tabName, sectionName, isVisible) {
    const tab = formContext.ui.tabs.get(tabName);
    if (tab) {
        const section = tab.sections.get(sectionName);
        if (section) {
            section.setVisible(isVisible);
        } else {
            console.log("Section not found");
        }
    } else {
        console.log("Tab not found");
    }
}

function showHideSection(formContext, lookupFieldName, tabName, sectionName) {
    const lookupField = formContext.getAttribute(lookupFieldName);
    if (lookupField) {
        const lookupValue = lookupField.getValue();
        const tab = formContext.ui.tabs.get(tabName);

        if (tab) {
            const section = tab.sections.get(sectionName);
            if (section) {
                section.setVisible(lookupValue && lookupValue.length > 0);
            } else {
                console.log("Section not found");
            }
        } else {
            console.log("Tab not found");
        }
    } else {
        console.log("Lookup field not found");
    }
}

async function callPowerAutomateFlow(executionContext, formMode) {
    try {
        Xrm.Utility.showProgressIndicator("Processing...");

        const formContext = executionContext.getFormContext();
        const accountTypeLookupValue = getLookupFieldValue(formContext, "nf1pbm_accounttype");
        const accessNumberLookupValue = getLookupFieldValue(formContext, "nf1pbm_memberaccessnumber");

        let accountType = accountTypeLookupValue?.id || "";
        let accessNumber = accessNumberLookupValue?.id || "";
        let accountSubtype = "";

        if (accountType === "619BDE1C-DD50-EF11-A317-000D3A1007BB") {
            accountSubtype = "SC";
        } else if (accountType === "08AC6D30-DD50-EF11-A317-000D3A1007BB") {
            accountSubtype = "IR";
        } else if (accountType === "7F5A6823-DD50-EF11-A317-000D3A1007BB") {
            accountSubtype = "ED";
        }

        const contact = await getContactRecordById(accessNumber);
        const flowUrl = await getFlowUrl();

        const maturityInstructionUser = Xrm.Utility.getGlobalContext().userSettings.userId.replace("{", "").replace("}", "");

        const requestData = {
            accessnumber: accessNumber,
            accounttype: accountType,
            maturityinstructionuser: maturityInstructionUser,
            accountsubtype: accountSubtype,
            memberaccess: contact.nf0base_memberaccessnumber
        };

        const response = await fetch(flowUrl, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(requestData)
        });

        if (!response.ok) {
            throw new Error(`Failed to fetch from Power Automate flow: ${response.statusText}`);
        }

        const responseData = await response.json();
        apiData = responseData;

        const webResourceControl = formContext.getControl("WebResource_member_accounts");
        if (webResourceControl) {
            const webResourceWindow = await webResourceControl.getContentWindow();
            webResourceWindow.receiveDataFromParent({
                formContext: formContext,
                data: responseData,
                accountsubtype: accountSubtype,
                mode: formMode
            });
        }
    } catch (error) {
        console.error("Error in callPowerAutomateFlow: ", error);
    } finally {
        Xrm.Utility.closeProgressIndicator();
    }
}

async function getFlowUrl() {
    try {
        const result = await Xrm.WebApi.online.retrieveMultipleRecords(
            "environmentvariabledefinition",
            "?$select=defaultvalue,displayname&$expand=environmentvariabledefinition_environmentvariablevalue($select=value)&$filter=schemaname eq 'nf1pbm_VarEnvFlowURLGetAccountRelationships'"
        );

        if (result.entities.length > 0 && result.entities[0]["environmentvariabledefinition_environmentvariablevalue"]?.length > 0) {
            return result.entities[0]["environmentvariabledefinition_environmentvariablevalue"][0].value;
        }

        throw new Error("Flow URL not found in environment variables");
    } catch (error) {
        console.error("Error retrieving flow URL: ", error);
        throw error;
    }
}

async function getContactRecordById(contactId) {
    try {
        if (!contactId) {
            throw new Error("Contact ID is required");
        }

        const result = await Xrm.WebApi.retrieveRecord("contact", contactId, "?$select=nf0base_memberaccessnumber");
        return result;
    } catch (error) {
        console.error("Error retrieving contact record: ", error);
        throw error;
    }
}

function getLookupFieldValue(formContext, lookupFieldName) {
    const lookupField = formContext.getAttribute(lookupFieldName);
    if (lookupField) {
        const lookupValue = lookupField.getValue();
        if (lookupValue && lookupValue.length > 0) {
            return {
                id: lookupValue[0].id.replace("{", "").replace("}", ""),
                name: lookupValue[0].name,
                entityType: lookupValue[0].entityType
            };
        }
    }
    return null;
}

// Add any remaining unchanged functions from the original code

function filterProducts(formContext, descId, lookupFieldName) {
    const fetchXml = `
      <fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="false">
      <entity name="nfc_otdb_product">
        <attribute name="nfc_otdb_productid" />
        <attribute name="nfc_otdb_name" />
        <attribute name="createdon" />
        <order attribute="nfc_otdb_name" descending="false" />
        <filter type="and">
          <condition attribute="nfc_otdb_shortdescription" operator="eq" value="${descId}" />
          <condition attribute="statecode" operator="eq" value="0" />
          <condition attribute="nfc_otdb_productstatus" operator="eq" value="451130000" />
        </filter>
      </entity>
    </fetch>`;

    formContext.getControl(lookupFieldName).addPreSearch(() => {
        formContext.getControl(lookupFieldName).addCustomFilter(fetchXml);
    });
}

function validateFieldsOnSave(executionContext) {
    const formContext = executionContext.getFormContext();
    const certificateAccountNumber = formContext.getAttribute("nf1pbm_certificateaccountnumber").getValue();
    const affiliateAccountNumber = formContext.getAttribute("nf1pbm_affiliateaccountnumber").getValue();

    if (!certificateAccountNumber) {
        Xrm.Navigation.openAlertDialog({ text: "The 'Certificate Account Number' is required. Please fill it before saving." });
        executionContext.getEventArgs().preventDefault();
    } else if (!affiliateAccountNumber) {
        Xrm.Navigation.openAlertDialog({ text: "The 'Affiliate Account Number' is required. Please fill it before saving." });
        executionContext.getEventArgs().preventDefault();
    }
}

function onAffiliateAccountNumberChange(executionContext) {
    const formContext = executionContext.getFormContext();
    const affiliateAccountNumber = formContext.getAttribute("nf1pbm_affiliateaccountnumber").getValue();
    apiData.forEach((item) => {
        if (affiliateAccountNumber === item.accountNumber) {
            console.log("Maturity Date: ", item.maturityDate);
        }
    });
}

function toggleLookupReadOnly(executionContext, lookupField, isReadOnly) {
    const formContext = executionContext.getFormContext();
    const fieldControl = formContext.getControl(lookupField);

    if (fieldControl) {
        fieldControl.setDisabled(isReadOnly);
    } else {
        console.log("Lookup field not found.");
    }
}

function showHideFrame(formContext, tabName, sectionName, isVisible) {
    const tab = formContext.ui.tabs.get(tabName);
    if (tab) {
        const section = tab.sections.get(sectionName);
        if (section) {
            section.setVisible(isVisible);
        } else {
            console.log("Section not found");
        }
    } else {
        console.log("Tab not found");
    }
}

