using System;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.Functions.Worker.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Linq;

namespace KOFC_Navigator_Integration
{
    public class NavClientIntegration
    {
        private readonly ILogger<NavClientIntegration> _logger;
        private readonly HttpClient _httpClient;

        public NavClientIntegration(ILogger<NavClientIntegration> logger, IHttpClientFactory httpClientFactory)
        {
            _logger = logger;
            _httpClient = httpClientFactory.CreateClient("AuthorizedClient");
        }

        [Function("NavClientIntegration")]
        public async Task<HttpResponseData> RunAsync([HttpTrigger(AuthorizationLevel.Function, "get", "post")] HttpRequestData req, FunctionContext executionContext)
        {
            _logger.LogInformation("Processing HTTP trigger.");
            
            // Simulated JSON response (replace with actual HTTP call if needed)
            string jsonResponse = "{\"processRequestResult\":\"<TXLife xmlns:FIP=\\\"http://www.fiservinsurance.com/LPES/Base/OneView\\\" xmlns:F=\\\"http://www.fiservinsurance.com/LPES/Base/Form\\\" xmlns=\\\"http://ACORD.org/Standards/Life/2\\\">\\r\\n  <TXLifeResponse>\\r\\n    <TransTrackingID>e3283545-81ee-46af-b8b3-b1c5010908ac<\\/TransTrackingID>\\r\\n    <TransExeDate>2024-08-07<\\/TransExeDate>\\r\\n    <TransExeTime>11:04:57.5300649-05:00<\\/TransExeTime>\\r\\n    <TransResult>\\r\\n      <ResultCode tc=\\\"1\\\">Success<\\/ResultCode>\\r\\n    <\\/TransResult>\\r\\n  <\\/TXLifeResponse>\\r\\n<\\/TXLife>\"}";

            try
            {
                JObject json = JObject.Parse(jsonResponse);
                string xmlContent = json["processRequestResult"].ToString();

                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.LoadXml(xmlContent);
                XmlNode transTrackingIDNode = xmlDoc.SelectSingleNode("//TransTrackingID");
                string transTrackingID = transTrackingIDNode.InnerText;

                _logger.LogInformation($"Extracted TransTrackingID: {transTrackingID}");

                var responseToClient = req.CreateResponse(System.Net.HttpStatusCode.OK);
                await responseToClient.WriteStringAsync($"TransTrackingID: {transTrackingID}");
                return responseToClient;
            }
            catch (Exception ex)
            {
                _logger.LogError($"An error occurred: {ex.Message}");
                var errorResponse = req.CreateResponse(System.Net.HttpStatusCode.InternalServerError);
                await errorResponse.WriteStringAsync("Error processing the request");
                return errorResponse;
            }
        }
    }
}
