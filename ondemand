using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using System.Xml.Linq;

namespace JsonToXmlConverter
{
    // Define model classes
    public class Root
    {
        [JsonProperty("FIPSCOLINKFILE")]
        public FipscoLinkFile FIPSCOLINKFILE { get; set; }
    }

    public class FipscoLinkFile
    {
        [JsonProperty("@VERSION")]
        public string VERSION { get; set; }

        [JsonProperty("DATA")]
        public Data DATA { get; set; }
    }

    public class Data
    {
        [JsonProperty("AGENTINFORMATION")]
        public AgentInformation AGENTINFORMATION { get; set; }

        [JsonProperty("PERSON")]
        public List<Person> PERSON { get; set; }

        [JsonProperty("RELATION")]
        public List<Relation> RELATION { get; set; }

        [JsonProperty("CASEDATA")]
        public CaseData CASEDATA { get; set; }
    }

    public class AgentInformation
    {
        public string FIRSTNAME { get; set; }
        public string MIDDLENAME { get; set; }
        public string LASTNAME { get; set; }
        public string ADDRESS1 { get; set; }
        public string ADDRESS2 { get; set; }
        public string CITY { get; set; }
        public string STATE { get; set; }
        public string ZIP { get; set; }
        public string COUNTRY { get; set; }
        public string AGENTID { get; set; }
        public string AGENCY { get; set; }
        public string GA { get; set; }
        public string AITXT1 { get; set; }
        public string AITXT2 { get; set; }
        public string AITXT3 { get; set; }
        public string AINUM1 { get; set; }
        public string AINUM2 { get; set; }
        public string AINUM3 { get; set; }
        public string AIDT1 { get; set; }
        public string AIDT2 { get; set; }
        public string AIDT3 { get; set; }
    }

    public class Person
    {
        [JsonProperty("@PERSONID")]
        public string PERSONID { get; set; }

        public string FIRSTNAME { get; set; }
        public string MIDDLEINITIAL { get; set; }
        public string SUFFIX { get; set; }
        public string LASTNAME { get; set; }
        public string CLIENTID { get; set; }
        public string MEMBERCOUNCIL { get; set; }
        public string MEMBERSTATUS { get; set; }
        public string INACTIVEFEEIND { get; set; }
        public string ADDRESS1 { get; set; }
        public string ADDRESS2 { get; set; }
        public string CITY { get; set; }
        public string STATE { get; set; }
        public string ZIP { get; set; }
        public string STATEOFISSUE { get; set; }
        public string DATEOFBIRTH { get; set; }
        public string ISSUEAGE { get; set; }
        public string SEX { get; set; }
        public string PTXT1 { get; set; }
        public string PTXT2 { get; set; }
        public string PTXT3 { get; set; }
        public string PNUM1 { get; set; }
        public string PNUM2 { get; set; }
        public string PNUM3 { get; set; }
        public string PDT1 { get; set; }
        public string PDT2 { get; set; }
        public string PDT3 { get; set; }
    }

    public class Relation
    {
        public string ORIGINATINGPERSONID { get; set; }
        public string RELATEDPERSONID { get; set; }
        public string ROLECODE { get; set; }
        public string RTXT1 { get; set; }
        public string RTXT2 { get; set; }
        public string RTXT3 { get; set; }
        public string RNUM1 { get; set; }
        public string RNUM2 { get; set; }
        public string RNUM3 { get; set; }
        public string RDT1 { get; set; }
        public string RDT2 { get; set; }
        public string RDT3 { get; set; }
    }

    public class CaseData
    {
        [JsonProperty("@PERSONID")]
        public string PERSONID { get; set; }

        public string POLICYNUMBER { get; set; }
        public string PRODUCT { get; set; }
        public string CLASS { get; set; }
        public string STATUS { get; set; }
        public Rating RATING { get; set; }
        public string WLFACEOPTION { get; set; }
        public string WLFACEPREMAMT { get; set; }
        public string WLPREMMODE { get; set; }
        public string WLPAYFORM { get; set; }
        public string TERMCONVERSION { get; set; }
        public string GPOEXERCISE { get; set; }
        public string PRINT { get; set; }
        public string ADDLOANINTTOBAL { get; set; }
        public string WDRLTOLOANATCOSTBASIS { get; set; }
        public string ISSUEDATE { get; set; }
        public string PLANVERSIONID { get; set; }
        public string PAYMENTYEARS { get; set; }
        public string CTXT3 { get; set; }
        public string CNUM1 { get; set; }
        public string CNUM2 { get; set; }
        public string CNUM3 { get; set; }
        public string CDT1 { get; set; }
        public string CDT2 { get; set; }
        public string CDT3 { get; set; }
        public Policy POLICY { get; set; }
        public Inforce INFORCE { get; set; }

        [JsonProperty("RIDER")]
        public List<Rider> RIDER { get; set; }
    }

    public class Rating
    {
        public string TABLE1 { get; set; }
        public string FLATEXTRA1 { get; set; }
        public string FLATEXTRA1TOAGE { get; set; }
        public string PERMANENTFLATEXTRA1 { get; set; }
        public string TABLE2 { get; set; }
        public string FLATEXTRA2 { get; set; }
        public string FLATEXTRA2TOAGE { get; set; }
        public string PERMANENTFLATEXTRA2 { get; set; }
    }

    public class Policy
    {
        [JsonProperty("@TYPE")]
        public string TYPE { get; set; }

        public string CODE { get; set; }
    }

    public class Inforce
    {
        public string APBCURRENTDEATHBENEFIT { get; set; }
        public string ANNUALINCREASEAMT { get; set; }
        public string ADDAVAILABLECONV { get; set; }
        public string AMTAVAILABLECONV { get; set; }
        public string PUADEATHBENEFIT { get; set; }
        public string BASELTDPUADEPOSIT { get; set; }
        public string BASEYTDPUADEPOSIT { get; set; }
        public string SDPUALTDPUADEPOSIT { get; set; }
        public string SDPUAYTDPUADEPOSIT { get; set; }
        public string MADPUALTDPUADEPOSIT { get; set; }
        public string MADPUAYTDPUADEPOSIT { get; set; }
        public string DATAASOFDATE { get; set; }
        public string ISSUECLASS { get; set; }
        public string ACCOUNTVALUE { get; set; }
        public string PAIDTODATE { get; set; }
        public string CUMULATIVEPREMIUM { get; set; }
        public string CUMULATIVEWTHDRL { get; set; }
        public string PUACASHVALUE { get; set; }
        public string DIVACCUMS { get; set; }
        public string POLICYNUMBER { get; set; }
        public string STANDARDLOAN { get; set; }
        public string TEN35AMT { get; set; }
        public string SLIPUADEATHBENEFIT { get; set; }
        public string APBPUADEATHBENEFIT { get; set; }
        public string SDPUADEATHBENEFIT { get; set; }
        public string ADPUADEATHBENEFIT { get; set; }
        public string MADPUADEATHBENEFIT { get; set; }
        public string PUADEPOSITLIMIT { get; set; }
        public string LIFETODATEPUADEPOSIT { get; set; }
        public string DBPURCHASEBYPUARIDERDIVS { get; set; }
        public string G7PAYSTARTDATE { get; set; }
        public string G7PAYANNUALPREMIUM { get; set; }
        public string G7PAYPREMIUMPAID { get; set; }
        public string CVASOFLASTMATCHANGE { get; set; }
        public string MEC { get; set; }
        public string EXEMPT { get; set; }
        public string ITXT1 { get; set; }
        public string ITXT2 { get; set; }
        public string ITXT3 { get; set; }
        public string INUM1 { get; set; }
        public string INUM2 { get; set; }
        public string INUM3 { get; set; }
        public string IDT1 { get; set; }
        public string IDT2 { get; set; }
        public string IDT3 { get; set; }
    }

    public class Rider
    {
        [JsonProperty("@PERSONID")]
        public string PERSONID { get; set; }

        public string CODE { get; set; }
        public string CLASS { get; set; }
        public string SEX { get; set; }
        public string AMOUNT { get; set; }
        public string UNITS { get; set; }
        public string ISSAGE { get; set; }
        public string CVGDIVOPT { get; set; }
        public string CVGDIVACCUMS { get; set; }
        public string CVGPREM { get; set; }
        public RatingRider RATING { get; set; }
        public string TBROYTFACEAMOUNT { get; set; }
        public string TBRSPECIFIEDWAIVEDPREMIUM { get; set; }
        public string TBRPUAEARNEDFACE { get; set; }
        public string TBRPUAYTDFACE { get; set; }
        public string TBRPUAYTDSURRENDERAMT { get; set; }
        public string FIXEDPREMIUMOVERRIDEDATE { get; set; }
        public string TBRPUASPURCHASEDBYDIVSLTD { get; set; }
        public string TBRPUASPURCHASEDBYDIVSYTD { get; set; }
        public string TBRNEXTANNUALPREMIUM { get; set; }
        public string TBRPOLPREVDIVDUR { get; set; }
        public string TBRNEXTANNVDIVDUR { get; set; }
        public string TBRANNUALPREMIUM { get; set; }
        public string TBRDURATION { get; set; }
        public string RIDERSTATUS { get; set; }
        public string TBRPREMIUMPUAS { get; set; }
        public string RDTXT1 { get; set; }
        public string RDTXT2 { get; set; }
        public string RDTXT3 { get; set; }
        public string RDNUM1 { get; set; }
        public string RDNUM2 { get; set; }
        public string RDNUM3 { get; set; }
        public string RDDT1 { get; set; }
        public string RDDT2 { get; set; }
        public string RDDT3 { get; set; }
    }

    public class RatingRider
    {
        public string TABLE { get; set; }
        public string TEMPORARYFLATEXTRA { get; set; }
        public string TEMPORARYFLATTOAGE { get; set; }
        public string PERMANENTFLATEXTRA { get; set; }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // Your JSON string
            string json = /* Your JSON string representing the data */;

            try
            {
                // Deserialize JSON into Root object
                Root root = JsonConvert.DeserializeObject<Root>(json);

                // Create XML
                XDocument xmlDoc = new XDocument(
                    new XDeclaration("1.0", "UTF-8", "yes"),
                    CreateFipscoLinkFileElement(root.FIPSCOLINKFILE)
                );

                // Output XML
                Console.WriteLine(xmlDoc.ToString());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred during JSON to XML conversion: {ex.Message}");
            }
        }

        static XElement CreateFipscoLinkFileElement(FipscoLinkFile fipsco)
        {
            var element = new XElement("FIPSCOLINKFILE",
                new XAttribute("VERSION", fipsco.VERSION),
                CreateDataElement(fipsco.DATA)
            );

            return element;
        }

        static XElement CreateDataElement(Data data)
        {
            var elements = new List<object>();

            if (data.AGENTINFORMATION != null)
                elements.Add(CreateAgentInformationElement(data.AGENTINFORMATION));

            if (data.PERSON != null)
                elements.AddRange(data.PERSON.Select(CreatePersonElement));

            if (data.RELATION != null)
                elements.AddRange(data.RELATION.Select(CreateRelationElement));

            if (data.CASEDATA != null)
                elements.Add(CreateCaseDataElement(data.CASEDATA));

            return new XElement("DATA", elements);
        }

        static XElement CreateAgentInformationElement(AgentInformation agentInfo)
        {
            var properties = agentInfo.GetType().GetProperties();

            var elements = properties.Select(prop =>
                new XElement(prop.Name, prop.GetValue(agentInfo) ?? string.Empty));

            return new XElement("AGENTINFORMATION", elements);
        }

        static XElement CreatePersonElement(Person person)
        {
            var attributes = new List<XAttribute>();
            if (!string.IsNullOrEmpty(person.PERSONID))
                attributes.Add(new XAttribute("PERSONID", person.PERSONID));

            var properties = person.GetType().GetProperties()
                .Where(prop => prop.Name != "PERSONID");

            var elements = properties.Select(prop =>
                new XElement(prop.Name, prop.GetValue(person) ?? string.Empty));

            return new XElement("PERSON", attributes, elements);
        }

        static XElement CreateRelationElement(Relation relation)
        {
            var properties = relation.GetType().GetProperties();

            var elements = properties.Select(prop =>
                new XElement(prop.Name, prop.GetValue(relation) ?? string.Empty));

            return new XElement("RELATION", elements);
        }

        static XElement CreateCaseDataElement(CaseData caseData)
        {
            var attributes = new List<XAttribute>();
            if (!string.IsNullOrEmpty(caseData.PERSONID))
                attributes.Add(new XAttribute("PERSONID", caseData.PERSONID));

            var elements = new List<object>();

            var properties = caseData.GetType().GetProperties()
                .Where(prop => prop.Name != "PERSONID" && prop.Name != "RATING" && prop.Name != "POLICY" && prop.Name != "INFORCE" && prop.Name != "RIDER");

            elements.AddRange(properties.Select(prop =>
                new XElement(prop.Name, prop.GetValue(caseData) ?? string.Empty)));

            if (caseData.RATING != null)
                elements.Add(CreateRatingElement(caseData.RATING));

            if (caseData.POLICY != null)
                elements.Add(CreatePolicyElement(caseData.POLICY));

            if (caseData.INFORCE != null)
                elements.Add(CreateInforceElement(caseData.INFORCE));

            if (caseData.RIDER != null)
                elements.AddRange(caseData.RIDER.Select(CreateRiderElement));

            return new XElement("CASEDATA", attributes, elements);
        }

        static XElement CreateRatingElement(Rating rating)
        {
            var properties = rating.GetType().GetProperties();

            var elements = properties.Select(prop =>
                new XElement(prop.Name, prop.GetValue(rating) ?? string.Empty));

            return new XElement("RATING", elements);
        }

        static XElement CreatePolicyElement(Policy policy)
        {
            var attributes = new List<XAttribute>();
            if (!string.IsNullOrEmpty(policy.TYPE))
                attributes.Add(new XAttribute("TYPE", policy.TYPE));

            var elements = new List<object>
            {
                new XElement("CODE", policy.CODE)
            };

            return new XElement("POLICY", attributes, elements);
        }

        static XElement CreateInforceElement(Inforce inforce)
        {
            var properties = inforce.GetType().GetProperties();

            var elements = properties.Select(prop =>
                new XElement(prop.Name, prop.GetValue(inforce) ?? string.Empty));

            return new XElement("INFORCE", elements);
        }

        static XElement CreateRiderElement(Rider rider)
        {
            var attributes = new List<XAttribute>();
            if (!string.IsNullOrEmpty(rider.PERSONID))
                attributes.Add(new XAttribute("PERSONID", rider.PERSONID));

            var elements = new List<object>();

            var properties = rider.GetType().GetProperties()
                .Where(prop => prop.Name != "PERSONID" && prop.Name != "RATING");

            elements.AddRange(properties.Select(prop =>
                new XElement(prop.Name, prop.GetValue(rider) ?? string.Empty)));

            if (rider.RATING != null)
                elements.Add(CreateRatingRiderElement(rider.RATING));

            return new XElement("RIDER", attributes, elements);
        }

        static XElement CreateRatingRiderElement(RatingRider rating)
        {
            var properties = rating.GetType().GetProperties();

            var elements = properties.Select(prop =>
                new XElement(prop.Name, prop.GetValue(rating) ?? string.Empty));

            return new XElement("RATING", elements);
        }
    }
}
