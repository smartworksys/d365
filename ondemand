using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Azure.WebJobs;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;

namespace KOFC_Navigator_Integration
{
    public class NavigatorIntegration
    {
        private readonly ILogger<NavigatorIntegration> _logger;

        public NavigatorIntegration(ILogger<NavigatorIntegration> logger)
        {
            _logger = logger;
        }

        [FunctionName("NavigatorIntegration")]
        public async Task<IActionResult> RunAsync(
            [HttpTrigger(AuthorizationLevel.Function, "get", "post")] HttpRequest req)
        {
            _logger.LogInformation("C# HTTP trigger function processed a request.");

            string type = req.Query["type"];
            string policyNo = req.Query["policyNo"];
            string contactID = req.Query["contactID"];
            string transTrackingID = null;

            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
            string payLoadData = null;

            if (type.Equals("contact"))
            {
                var contactData = new NavigatorClientXML(_logger);
                payLoadData = contactData.getNavContactData(contactID);
            }
            else if (type.Equals("policy"))
            {
                var inforcePolicyData = new NavInforcePolicyData();
                payLoadData = inforcePolicyData.getNavInforcePolicyData(policyNo);
            }
            else
            {
                return new BadRequestObjectResult("Invalid request type");
            }

            var reqJsonStr = new
            {
                request = payLoadData
            };

            string jsonData = JsonConvert.SerializeObject(reqJsonStr);
            var data = new StringContent(jsonData, Encoding.UTF8, "application/json");

            // Create HttpClient instance
            using var client = new HttpClient();
            string apiUrl = Environment.GetEnvironmentVariable("navGatewayAPIURL");
            string apiKey = Environment.GetEnvironmentVariable("navGatewayAPIKey");
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", apiKey);

            try
            {
                // Send POST request to the API
                var response = await client.PostAsync(apiUrl, data);

                // Check if request was successful
                if (response.IsSuccessStatusCode)
                {
                    var json = await response.Content.ReadAsStringAsync();
                    SapiensResponse result = JsonConvert.DeserializeObject<SapiensResponse>(json);
                    String res = result.processRequestResult;

                    // Save XML to Blob Storage
                    XmlDocument xmlDoc = new XmlDocument();
                    xmlDoc.LoadXml(res);
                    await SaveXmlToBlobStorage(xmlDoc, policyNo ?? contactID);

                    XmlNodeList elemlist = xmlDoc.GetElementsByTagName("TransTrackingID");
                    transTrackingID = elemlist[0].InnerXml;
                    _logger.LogInformation("JSON data sent successfully to the API. TransTrackingID: " + transTrackingID);
                }
                else
                {
                    _logger.LogInformation($"Failed to send JSON data to the API. Status code: {response.StatusCode}");
                    return new StatusCodeResult((int)response.StatusCode);
                }
            }
            catch (Exception ex)
            {
                _logger.LogInformation($"An error occurred while sending JSON data to the API: {ex.Message}");
                return new StatusCodeResult(500);
            }

            return new OkObjectResult(transTrackingID);
        }

        private async Task SaveXmlToBlobStorage(XmlDocument xmlDoc, string identifier)
        {
            string connectionString = Environment.GetEnvironmentVariable("AzureWebJobsStorage");
            string containerName = "navigatorxmlfiles";
            string fileName = $"{identifier}_{DateTime.UtcNow:yyyyMMddHHmmss}.xml";

            BlobServiceClient blobServiceClient = new BlobServiceClient(connectionString);
            BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(containerName);

            // Create the container if it doesn't exist
            await containerClient.CreateIfNotExistsAsync(PublicAccessType.Blob);

            BlobClient blobClient = containerClient.GetBlobClient(fileName);

            // Convert the XML document to a byte array
            byte[] byteArray = Encoding.UTF8.GetBytes(xmlDoc.OuterXml);

            using (MemoryStream ms = new MemoryStream(byteArray))
            {
                await blobClient.UploadAsync(ms, new BlobHttpHeaders { ContentType = "application/xml" });
            }

            _logger.LogInformation($"XML file {fileName} saved to Blob Storage successfully.");
        }
    }
}
