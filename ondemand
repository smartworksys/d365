using System.Linq;
using System.Xml.Linq;
using MyFunctionApp.Models;

namespace MyFunctionApp.Helpers
{
    public static class JsonToXmlConverter
    {
        public static XDocument Convert(ApiResponse apiResponse)
        {
            var xmlDoc = new XDocument(
                new XDeclaration("1.0", "UTF-8", "yes"),
                new XElement("FIPSCOLINKFILE",
                    new XAttribute("VERSION", "1.00"),
                    new XElement("Illustration_System", apiResponse.Illustration_System ?? string.Empty), // Handle Illustration_System
                    new XElement("DATA",
                        new XElement("AGENTINFORMATION",
                            new XElement("FIRSTNAME", apiResponse.AGENTINFORMATION?.FIRSTNAME?[0] ?? string.Empty),
                            new XElement("MIDDLENAME", apiResponse.AGENTINFORMATION?.MIDDLENAME?[0] ?? string.Empty),
                            new XElement("LASTNAME", apiResponse.AGENTINFORMATION?.LASTNAME?[0] ?? string.Empty),
                            new XElement("ADDRESS1", apiResponse.AGENTINFORMATION?.ADDRESS1?[0] ?? string.Empty),
                            new XElement("CITY", apiResponse.AGENTINFORMATION?.CITY?[0] ?? string.Empty),
                            new XElement("STATE", apiResponse.AGENTINFORMATION?.STATE?[0] ?? string.Empty),
                            new XElement("ZIP", apiResponse.AGENTINFORMATION?.ZIP?[0] ?? string.Empty)
                        ),
                        // Handle PERSON array and sort by PERSONID
                        new XElement("PERSONS",
                            from person in apiResponse.PERSON.OrderBy(p => int.Parse(p.PERSONID))
                            select new XElement("PERSON",
                                new XAttribute("PERSONID", person.PERSONID),
                                new XElement("FIRSTNAME", person.FIRSTNAME ?? string.Empty),
                                new XElement("MIDDLEINITIAL", person.MIDDLEINITIAL ?? string.Empty),
                                new XElement("LASTNAME", person.LASTNAME ?? string.Empty),
                                new XElement("CLIENTID", person.CLIENTID ?? string.Empty),
                                new XElement("DATEOFBIRTH", person.DATEOFBIRTH ?? string.Empty),
                                new XElement("ISSUEAGE", person.ISSUEAGE.ToString() ?? string.Empty),
                                new XElement("SEX", person.SEX ?? string.Empty)
                            )
                        ),
                        // Handle RELATION array
                        new XElement("RELATIONS",
                            from relation in apiResponse.RELATION
                            select new XElement("RELATION",
                                new XElement("ORIGINATINGPERSONID", relation.ORIGINATINGPERSONID.ToString() ?? string.Empty),
                                new XElement("RELATEDPERSONID", relation.RELATEDPERSONID.ToString() ?? string.Empty),
                                new XElement("ROLECODE", relation.ROLECODE.ToString() ?? string.Empty),
                                new XElement("RTXT1", relation.RTXT1?[0] ?? string.Empty),
                                new XElement("RNUM1", relation.RNUM1?[0] ?? string.Empty),
                                new XElement("RDT1", relation.RDT1?[0] ?? string.Empty)
                            )
                        ),
                        new XElement("CASEDATA",
                            new XAttribute("PERSONID", apiResponse.CASEDATA?.PERSONID ?? string.Empty),
                            new XElement("POLICYNUMBER", apiResponse.CASEDATA?.POLICYNUMBER ?? string.Empty),
                            new XElement("PRODUCT", apiResponse.CASEDATA?.PRODUCT ?? string.Empty),
                            new XElement("CLASS", apiResponse.CASEDATA?.CLASS ?? string.Empty),
                            new XElement("STATUS", apiResponse.CASEDATA?.STATUS ?? string.Empty),
                            new XElement("RATING",
                                new XElement("TABLE1", apiResponse.CASEDATA?.RATING?.TABLE1?[0] ?? string.Empty),
                                new XElement("FLATEXTRA1", apiResponse.CASEDATA?.RATING?.FLATEXTRA1?[0] ?? string.Empty),
                                new XElement("FLATEXTRA1TOAGE", apiResponse.CASEDATA?.RATING?.FLATEXTRA1TOAGE?[0] ?? string.Empty),
                                new XElement("PERMANENTFLATEXTRA1", apiResponse.CASEDATA?.RATING?.PERMANENTFLATEXTRA1?[0] ?? string.Empty)
                            ),
                            new XElement("INFORCE",
                                new XElement("APBCURRENTDEATHBENEFIT", apiResponse.CASEDATA?.INFORCE?.APBCURRENTDEATHBENEFIT.ToString() ?? string.Empty),
                                new XElement("PUACASHVALUE", apiResponse.CASEDATA?.INFORCE?.PUACASHVALUE.ToString() ?? string.Empty),
                                new XElement("POLICYNUMBER", apiResponse.CASEDATA?.INFORCE?.POLICYNUMBER ?? string.Empty),
                                new XElement("STANDARDLOAN", apiResponse.CASEDATA?.INFORCE?.STANDARDLOAN.ToString() ?? string.Empty)
                            ),
                            // Handle RIDER array inside CASEDATA
                            new XElement("RIDERS",
                                from rider in apiResponse.CASEDATA.RIDER
                                select new XElement("RIDER",
                                    new XAttribute("PERSONID", rider.PERSONID ?? string.Empty),
                                    new XElement("CODE", rider.CODE ?? string.Empty),
                                    new XElement("CLASS", rider.CLASS ?? string.Empty),
                                    new XElement("SEX", rider.SEX ?? string.Empty),
                                    new XElement("AMOUNT", rider.AMOUNT.ToString() ?? string.Empty),
                                    new XElement("UNITS", rider.UNITS.ToString() ?? string.Empty),
                                    new XElement("ISSAGE", rider.ISSAGE.ToString() ?? string.Empty),
                                    new XElement("CVGDIVOPT", rider.CVGDIVOPT ?? string.Empty),
                                    new XElement("CVGPREM", rider.CVGPREM.ToString() ?? string.Empty),
                                    new XElement("RATING",
                                        new XElement("TABLE1", rider.RATING?.TABLE1?[0] ?? string.Empty),
                                        new XElement("TEMPORARYFLATEXTRA", rider.RATING?.TEMPORARYFLATEXTRA?[0] ?? string.Empty),
                                        new XElement("TEMPORARYFLATTOAGE", rider.RATING?.TEMPORARYFLATTOAGE ?? string.Empty)
                                    )
                                )
                            )
                        )
                    )
                )
            );

            return xmlDoc;
        }
    }
}

