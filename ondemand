using System;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Net.Http.Headers;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Collections.Generic;

namespace TKISConsoleApp
{
    public class TKISInForcePolicyData
    {
        public string policyNo { get; set; }
    }

    public static class TKISIntegration
    {
        public static async Task Main(string[] args)
        {
            Console.WriteLine("Enter Policy Number:");
            string policyNo = Console.ReadLine();
            
            // Set up necessary variables
            string apiUrl = "YOUR_API_URL"; // Replace with actual API URL
            string clientSecretId = "YOUR_SECRET"; // Replace with actual secret

            // Create a list of policies to send as a request body
            var policy = new TKISInForcePolicyData { policyNo = policyNo };
            var policyList = new List<TKISInForcePolicyData> { policy };
            
            // Serialize the policy list into JSON
            string requestBody = JsonConvert.SerializeObject(policyList);
            var content = new StringContent(requestBody, Encoding.UTF8, "application/json");

            // Create HttpClient instance
            using var client = new HttpClient();
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", clientSecretId);

            try
            {
                // Send POST request to the API
                HttpResponseMessage response = await client.PostAsync(apiUrl, content);

                // Check if the response was successful
                if (!response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"API request failed with the status code {response.StatusCode} --- {response.Headers} --- {response.ReasonPhrase}");
                    return;
                }

                // Read and parse the response JSON
                var json = await response.Content.ReadAsStringAsync();
                JObject responseJsonObj = JObject.Parse(json);

                // Extract the policy indicator
                string policyIndicator = (string)responseJsonObj["DATA"]["Illustration_System"];
                // Remove the indicator from the JSON
                ((JObject)responseJsonObj["DATA"]).Remove("Illustration_System");

                // Handle policy indicators
                if (policyIndicator == "TKIS")
                {
                    // Deserialize the JSON string into an object
                    var jsonObject = JsonConvert.DeserializeObject<Dictionary<string, Dictionary<string, Dictionary<string, string>>>>(json);
                    var TKISdataSection = jsonObject["DATA"];

                    // Simulating conversion to INI format
                    var iniData = JSONtoINI.GenerateIniContent(TKISdataSection);

                    Console.WriteLine($"Policy Indicator: {policyIndicator}");
                    Console.WriteLine($"Converted Data: {iniData}");
                }
                else if (policyIndicator == "DNI")
                {
                    Console.WriteLine($"Policy Indicator: {policyIndicator}");
                    Console.WriteLine("DATA: [No additional data]");
                }
                else if (policyIndicator == "Navigator")
                {
                    Console.WriteLine($"Policy Indicator: {policyIndicator}");
                    Console.WriteLine($"Data: {responseJsonObj["DATA"]}");
                }
                else
                {
                    Console.WriteLine("Policy ID not found.");
                }
            }
            catch (Exception e)
            {
                Console.WriteLine($"An error occurred: {e.Message}");
            }
        }
    }

    // Placeholder for your JSON to INI conversion method
    public static class JSONtoINI
    {
        public static string GenerateIniContent(Dictionary<string, Dictionary<string, string>> data)
        {
            // Simulate conversion of JSON data to INI format
            return "[Sample INI data]";
        }
    }
}
