using System;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.Functions.Worker.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Microsoft.PowerPlatform.Dataverse.Client;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Sdk;
using System.Collections.Generic;

namespace KOFC_FA_eApp_CustomClaims
{
    public class AuthEventTrigger
    {
        private readonly ILogger<AuthEventTrigger> _log;

        public AuthEventTrigger(ILogger<AuthEventTrigger> log)
        {
            _log = log;
        }

        [Function("onTokenIssuanceStart")]
        public async Task<HttpResponseData> Run(
            [HttpTrigger(AuthorizationLevel.Function, "post", Route = "token-issuance")] HttpRequestData req,
            FunctionContext executionContext)
        {
            _log.LogInformation("Starting Token Issuance Event Processing...");

            // Retrieve user identity from headers
            string userID = GetUserIdFromHeaders(req);
            if (string.IsNullOrEmpty(userID))
            {
                _log.LogError("Unable to retrieve user ID from request headers.");
                var errorResponse = req.CreateResponse(System.Net.HttpStatusCode.BadRequest);
                await errorResponse.WriteStringAsync("User identity not found.");
                return errorResponse;
            }

            _log.LogInformation($"User ID retrieved: {userID}");

            // Retrieve CRM connection details from environment variables
            string crmUrl = Environment.GetEnvironmentVariable("CRM_URL");
            string clientId = Environment.GetEnvironmentVariable("CRM_CLIENT_ID");
            string clientSecret = Environment.GetEnvironmentVariable("CRM_CLIENT_SECRET");

            HttpResponseData response;

            if (string.IsNullOrEmpty(crmUrl) || string.IsNullOrEmpty(clientId) || string.IsNullOrEmpty(clientSecret))
            {
                _log.LogError("Missing CRM connection details in environment variables.");
                response = req.CreateResponse(System.Net.HttpStatusCode.BadRequest);
                await response.WriteStringAsync("Missing CRM connection details.");
                return response;
            }

            // Establish connection to CRM
            var conn = $@"AuthType=ClientSecret;
                          Url={crmUrl};
                          ClientId={clientId};
                          ClientSecret={clientSecret}";
            var serviceClient = new ServiceClient(conn);

            if (!serviceClient.IsReady)
            {
                _log.LogError("CRM Connection failed.");
                response = req.CreateResponse(System.Net.HttpStatusCode.InternalServerError);
                await response.WriteStringAsync("Failed to establish CRM connection.");
                return response;
            }

            _log.LogInformation("CRM Connection successful");

            // Fetch user details from CRM using FetchXML
            string userFetchXML = @"
                <fetch top='50'>
                    <entity name='systemuser'>
                        <attribute name='kofc_agentid' />
                        <attribute name='kofc_user_ldap_id' />
                        <attribute name='windowsliveid' />
                        <attribute name='kofc_insurancerole' />
                        <filter>
                            <condition attribute='windowsliveid' operator='eq' value='{0}' />
                        </filter>
                    </entity>
                </fetch>";

            string updatedUserFetchXML = String.Format(userFetchXML, userID);
            var userFetchExpression = new FetchExpression(updatedUserFetchXML);
            EntityCollection userResult = serviceClient.RetrieveMultiple(userFetchExpression);

            if (userResult == null || userResult.Entities.Count == 0)
            {
                _log.LogWarning("No user found with the specified windowsliveid.");
                response = req.CreateResponse(System.Net.HttpStatusCode.NotFound);
                await response.WriteStringAsync("User not found in CRM.");
                return response;
            }

            Entity userEntity = userResult.Entities[0];
            _log.LogInformation("User entity retrieved.");

            string windowsliveid = userEntity.GetAttributeValue<string>("windowsliveid");
            if (string.IsNullOrEmpty(windowsliveid))
            {
                _log.LogWarning("windowsliveid is missing for the user.");
                response = req.CreateResponse(System.Net.HttpStatusCode.BadRequest);
                await response.WriteStringAsync("User's windowsliveid is missing.");
                return response;
            }

            int? insuranceRoleValue = userEntity.GetAttributeValue<OptionSetValue>("kofc_insurancerole")?.Value;
            if (insuranceRoleValue.HasValue)
            {
                _log.LogInformation("kofc_insurancerole ID: " + insuranceRoleValue.Value.ToString());
            }
            else
            {
                _log.LogInformation("kofc_insurancerole is not set for this user.");
            }

            // Prepare the custom claims response
            ResponseContent responseContent = new ResponseContent();
            responseContent.Data.Actions[0].Claims.CorrelationId = Guid.NewGuid().ToString();
            responseContent.Data.Actions[0].Claims.ApiVersion = "1.0.0";
            responseContent.Data.Actions[0].Claims.DateOfBirth = "01/01/2000";
            responseContent.Data.Actions[0].Claims.CustomRoles.Add("Writer");
            responseContent.Data.Actions[0].Claims.CustomRoles.Add("Editor");
            responseContent.Data.Actions[0].Claims.LoginID = windowsliveid;

            response = req.CreateResponse(System.Net.HttpStatusCode.OK);
            await response.WriteAsJsonAsync(responseContent);
            _log.LogInformation("Custom claims added and response generated.");

            return response;
        }

        private string GetUserIdFromHeaders(HttpRequestData req)
        {
            if (req.Headers.TryGetValues("X-MS-CLIENT-PRINCIPAL", out var principalHeader))
            {
                var encodedPrincipal = principalHeader.ToString();
                var decodedPrincipal = Encoding.UTF8.GetString(Convert.FromBase64String(encodedPrincipal));
                dynamic principalData = JsonConvert.DeserializeObject(decodedPrincipal);

                return principalData?.userId;
            }
            return null;
        }
    }

    public class ResponseContent
    {
        [JsonProperty("data")]
        public Data Data { get; set; }

        public ResponseContent()
        {
            Data = new Data();
        }
    }

    public class Data
    {
        [JsonProperty("@odata.type")]
        public string ODataType { get; set; }

        public List<Action> Actions { get; set; }

        public Data()
        {
            ODataType = "microsoft.graph.onTokenIssuanceStartResponseData";
            Actions = new List<Action> { new Action() };
        }
    }

    public class Action
    {
        [JsonProperty("@odata.type")]
        public string ODataType { get; set; }

        public Claims Claims { get; set; }

        public Action()
        {
            ODataType = "microsoft.graph.tokenIssuanceStart.provideClaimsForToken";
            Claims = new Claims();
        }
    }

    public class Claims
    {
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        public string CorrelationId { get; set; }

        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        public string DateOfBirth { get; set; }

        public string ApiVersion { get; set; }

        public List<string> CustomRoles { get; set; }

        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        public string LoginID { get; set; }

        public Claims()
        {
            CustomRoles = new List<string>();
        }
    }
}
