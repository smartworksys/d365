using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.Functions.Worker.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Microsoft.PowerPlatform.Dataverse.Client;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Sdk;

namespace KOFC_FA_eApp_CustomClaims
{
    public class AuthEventTrigger
    {
        private readonly ILogger<AuthEventTrigger> _log;

        public AuthEventTrigger(ILogger<AuthEventTrigger> log)
        {
            _log = log;
        }

        [Function("onTokenIssuanceStart")]
        public async Task<HttpResponseData> Run(
            [HttpTrigger(AuthorizationLevel.Function, "post", Route = "token-issuance")] HttpRequestData req,
            FunctionContext executionContext)
        {
            _log.LogInformation("Starting Token Issuance Event Processing...");

            string crmUrl = Environment.GetEnvironmentVariable("CRM_URL");
            string clientId = Environment.GetEnvironmentVariable("CRM_CLIENT_ID");
            string clientSecret = Environment.GetEnvironmentVariable("CRM_CLIENT_SECRET");
            string userID = "susmitha.thokala@kofc.org";

            if (string.IsNullOrEmpty(crmUrl) || string.IsNullOrEmpty(clientId) || string.IsNullOrEmpty(clientSecret))
            {
                _log.LogError("Missing CRM connection details in environment variables.");
                var response = req.CreateResponse(System.Net.HttpStatusCode.BadRequest);
                await response.WriteStringAsync("Missing CRM connection details.");
                return response;
            }

            var conn = $@"AuthType=ClientSecret;
                          Url={crmUrl};
                          ClientId={clientId};
                          ClientSecret={clientSecret}";

            // Create a ServiceClient
            var serviceClient = new ServiceClient(conn);

            if (!serviceClient.IsReady)
            {
                _log.LogError("CRM Connection failed.");
                var response = req.CreateResponse(System.Net.HttpStatusCode.InternalServerError);
                await response.WriteStringAsync("Failed to establish CRM connection.");
                return response;
            }

            _log.LogInformation("CRM Connection successful");

            string userFetchXML = @"
                <fetch top='50'>
                    <entity name='systemuser'>
                        <attribute name='kofc_agentid' />
                        <attribute name='kofc_user_ldap_id' />
                        <attribute name='windowsliveid' />
                        <attribute name='kofc_insurancerole' />
                        <filter>
                            <condition attribute='windowsliveid' operator='eq' value='{0}' />
                        </filter>
                    </entity>
                </fetch>";

            string updatedUserFetchXML = String.Format(userFetchXML, userID);
            var userFetchExpression = new FetchExpression(updatedUserFetchXML);
            EntityCollection userResult = serviceClient.RetrieveMultiple(userFetchExpression);

            if (userResult == null || userResult.Entities.Count == 0)
            {
                _log.LogWarning("No user found with the specified windowsliveid.");
                var response = req.CreateResponse(System.Net.HttpStatusCode.NotFound);
                await response.WriteStringAsync("User not found in CRM.");
                return response;
            }

            Entity userEntity = userResult.Entities[0];
            _log.LogInformation("User entity retrieved.");

            string windowsliveid = userEntity.GetAttributeValue<string>("windowsliveid");
            if (string.IsNullOrEmpty(windowsliveid))
            {
                _log.LogWarning("windowsliveid is missing for the user.");
                var response = req.CreateResponse(System.Net.HttpStatusCode.BadRequest);
                await response.WriteStringAsync("User's windowsliveid is missing.");
                return response;
            }

            int? insuranceRoleValue = userEntity.GetAttributeValue<OptionSetValue>("kofc_insurancerole")?.Value;
            if (insuranceRoleValue.HasValue)
            {
                _log.LogInformation("kofc_insurancerole ID: " + insuranceRoleValue.Value.ToString());
            }
            else
            {
                _log.LogInformation("kofc_insurancerole is not set for this user.");
            }

            // Assuming custom claims addition - Example JSON for demonstration
            var responseData = new
            {
                dateOfBirth = "01/01/2000",
                customRoles = new[] { "Writer", "Editor" },
                apiVersion = "1.0.0",
                loginID = windowsliveid,
                correlationId = Guid.NewGuid().ToString() // Replace with actual correlation if needed
            };

            var response = req.CreateResponse(System.Net.HttpStatusCode.OK);
            await response.WriteAsJsonAsync(responseData);
            _log.LogInformation("Custom claims added and response generated.");

            return response;
        }
    }
}
